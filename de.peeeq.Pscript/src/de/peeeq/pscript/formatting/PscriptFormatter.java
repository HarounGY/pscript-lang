/*
 * generated by Xtext
 */
package de.peeeq.pscript.formatting;

import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;

import de.peeeq.pscript.services.PscriptGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class PscriptFormatter extends AbstractDeclarativeFormatter {
	
	@Override
	protected void configureFormatting(FormattingConfig c) {
// It's usually a good idea to activate the following three statements.
// They will add and preserve newlines around comments
//		c.setLinewrap(0, 1, 2).before(getGrammarAccess().getSL_COMMENTRule());
//		c.setLinewrap(0, 1, 2).before(getGrammarAccess().getML_COMMENTRule());
//		c.setLinewrap(0, 1, 1).after(getGrammarAccess().getML_COMMENTRule());
		
		PscriptGrammarAccess f = (PscriptGrammarAccess) getGrammarAccess();
	    
	    c.setAutoLinewrap(120);
	    
	    
	    // find common keywords an specify formatting for them
	    for (Pair<Keyword, Keyword> pair : f.findKeywordPairs("(", ")")) {
	      c.setNoSpace().after(pair.getFirst());
	      c.setNoSpace().before(pair.getSecond());
	    }
	    for (Keyword comma : f.findKeywords(",")) {
	      c.setNoSpace().before(comma);
	    }
	    
	    //c.setLinewrap(1).after(f.getStmtReturnAccess().get);
	    
	    //class
	    c.setIndentationIncrement().after(
	    		f.getClassDefAccess().getLeftCurlyBracketKeyword_3());
	    c.setIndentationIncrement().before(
	    		f.getClassDefAccess().getRightCurlyBracketKeyword_6());
	    
	    // funcdef 
	    c.setIndentationIncrement().after(
	    		f.getFuncDefAccess().getLeftCurlyBracketKeyword_7());
	    c.setIndentationIncrement().before(
	    		f.getFuncDefAccess().getRightCurlyBracketKeyword_9());
	    
	    
	    // if
	    c.setIndentationIncrement().after(
		        f.getStmtIfAccess().getLeftCurlyBracketKeyword_2());
	    c.setIndentationDecrement().before(
	        f.getStmtIfAccess().getRightCurlyBracketKeyword_4());
	    c.setIndentationIncrement().after(
		        f.getStmtIfAccess().getLeftCurlyBracketKeyword_5_1());
	    c.setIndentationDecrement().before(
	        f.getStmtIfAccess().getRightCurlyBracketKeyword_5_3());
	    
	    
/* from example:
	    // formatting for grammar rule Line
	    c.setLinewrap(2).after(f.getLineAccess().getSemicolonKeyword_1());
	    c.setNoSpace().before(f.getLineAccess().getSemicolonKeyword_1());
	    
	    // formatting for grammar rule TestIndentation
	    c.setIndentationIncrement().after(
	        f.getTestIndentationAccess().getLeftCurlyBracketKeyword_1());
	    c.setIndentationDecrement().before(
	        f.getTestIndentationAccess().getRightCurlyBracketKeyword_3());
	    c.setLinewrap().after(
	        f.getTestIndentationAccess().getLeftCurlyBracketKeyword_1());
	    c.setLinewrap().after(
	        f.getTestIndentationAccess().getRightCurlyBracketKeyword_3());
	    
	    // formatting for grammar rule Param
	    c.setNoLinewrap().around(f.getParamAccess().getColonKeyword_1());
	    c.setNoSpace().around(f.getParamAccess().getColonKeyword_1());
	    
	    */
	    
	    // formatting for Comments 
	    c.setLinewrap(0, 1, 2).before(f.getSL_COMMENTRule());
	    c.setLinewrap(0, 1, 2).before(f.getML_COMMENTRule());
	    c.setLinewrap(0, 1, 1).after(f.getML_COMMENTRule());
	}
}
