/*
* generated by Xtext
*/

package de.peeeq.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class JassToPscriptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prog");
		private final Assignment cElemsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElemsEntityParserRuleCall_0 = (RuleCall)cElemsAssignment.eContents().get(0);
		
		//Prog:
		//	elems+=Entity*;
		public ParserRule getRule() { return rule; }

		//elems+=Entity*
		public Assignment getElemsAssignment() { return cElemsAssignment; }

		//Entity
		public RuleCall getElemsEntityParserRuleCall_0() { return cElemsEntityParserRuleCall_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGlobalBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNativeDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Entity:
		//	TypeDef | GlobalBlock | NativeDef;
		public ParserRule getRule() { return rule; }

		//TypeDef | GlobalBlock | NativeDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDef
		public RuleCall getTypeDefParserRuleCall_0() { return cTypeDefParserRuleCall_0; }

		//GlobalBlock
		public RuleCall getGlobalBlockParserRuleCall_1() { return cGlobalBlockParserRuleCall_1; }

		//NativeDef
		public RuleCall getNativeDefParserRuleCall_2() { return cNativeDefParserRuleCall_2; }
	}

	public class GlobalBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGlobalBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGlobalsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarsConstantParserRuleCall_2_0 = (RuleCall)cVarsAssignment_2.eContents().get(0);
		private final Keyword cEndglobalsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GlobalBlock:
		//	{GlobalBlock} "globals" vars+=Constant* "endglobals";
		public ParserRule getRule() { return rule; }

		//{GlobalBlock} "globals" vars+=Constant* "endglobals"
		public Group getGroup() { return cGroup; }

		//{GlobalBlock}
		public Action getGlobalBlockAction_0() { return cGlobalBlockAction_0; }

		//"globals"
		public Keyword getGlobalsKeyword_1() { return cGlobalsKeyword_1; }

		//vars+=Constant*
		public Assignment getVarsAssignment_2() { return cVarsAssignment_2; }

		//Constant
		public RuleCall getVarsConstantParserRuleCall_2_0() { return cVarsConstantParserRuleCall_2_0; }

		//"endglobals"
		public Keyword getEndglobalsKeyword_3() { return cEndglobalsKeyword_3; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExprParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//Constant:
		//	"constant" type=ID name=ID "=" value=Expr;
		public ParserRule getRule() { return rule; }

		//"constant" type=ID name=ID "=" value=Expr
		public Group getGroup() { return cGroup; }

		//"constant"
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }

		//type=ID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//value=Expr
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//Expr
		public RuleCall getValueExprParserRuleCall_4_0() { return cValueExprParserRuleCall_4_0; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMultParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Expr:
		//	Literal | FunctionCall | Mult;
		public ParserRule getRule() { return rule; }

		//Literal | FunctionCall | Mult
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_1() { return cFunctionCallParserRuleCall_1; }

		//Mult
		public RuleCall getMultParserRuleCall_2() { return cMultParserRuleCall_2; }
	}

	public class MultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftLiteralParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightLiteralParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Mult:
		//	left=Literal "*" right=Literal;
		public ParserRule getRule() { return rule; }

		//left=Literal "*" right=Literal
		public Group getGroup() { return cGroup; }

		//left=Literal
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//Literal
		public RuleCall getLeftLiteralParserRuleCall_0_0() { return cLeftLiteralParserRuleCall_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }

		//right=Literal
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//Literal
		public RuleCall getRightLiteralParserRuleCall_2_0() { return cRightLiteralParserRuleCall_2_0; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersExprParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersExprParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//	name=ID "(" (parameters+=Expr ("," parameters+=Expr)*)? ")";
		public ParserRule getRule() { return rule; }

		//name=ID "(" (parameters+=Expr ("," parameters+=Expr)*)? ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameters+=Expr ("," parameters+=Expr)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameters+=Expr
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }

		//Expr
		public RuleCall getParametersExprParserRuleCall_2_0_0() { return cParametersExprParserRuleCall_2_0_0; }

		//("," parameters+=Expr)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameters+=Expr
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//Expr
		public RuleCall getParametersExprParserRuleCall_2_1_1_0() { return cParametersExprParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cIntValAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIntValINTTerminalRuleCall_0_1_0 = (RuleCall)cIntValAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBoolLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBoolValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cBoolValAlternatives_1_1_0 = (Alternatives)cBoolValAssignment_1_1.eContents().get(0);
		private final Keyword cBoolValTrueKeyword_1_1_0_0 = (Keyword)cBoolValAlternatives_1_1_0.eContents().get(0);
		private final Keyword cBoolValFalseKeyword_1_1_0_1 = (Keyword)cBoolValAlternatives_1_1_0.eContents().get(1);
		
		//Literal:
		//	{IntLiteral} intVal=INT | {BoolLiteral} boolVal=("true" | "false");
		public ParserRule getRule() { return rule; }

		//{IntLiteral} intVal=INT | {BoolLiteral} boolVal=("true" | "false")
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntLiteral} intVal=INT
		public Group getGroup_0() { return cGroup_0; }

		//{IntLiteral}
		public Action getIntLiteralAction_0_0() { return cIntLiteralAction_0_0; }

		//intVal=INT
		public Assignment getIntValAssignment_0_1() { return cIntValAssignment_0_1; }

		//INT
		public RuleCall getIntValINTTerminalRuleCall_0_1_0() { return cIntValINTTerminalRuleCall_0_1_0; }

		//{BoolLiteral} boolVal=("true" | "false")
		public Group getGroup_1() { return cGroup_1; }

		//{BoolLiteral}
		public Action getBoolLiteralAction_1_0() { return cBoolLiteralAction_1_0; }

		//boolVal=("true" | "false")
		public Assignment getBoolValAssignment_1_1() { return cBoolValAssignment_1_1; }

		//"true" | "false"
		public Alternatives getBoolValAlternatives_1_1_0() { return cBoolValAlternatives_1_1_0; }

		//"true"
		public Keyword getBoolValTrueKeyword_1_1_0_0() { return cBoolValTrueKeyword_1_1_0_0; }

		//"false"
		public Keyword getBoolValFalseKeyword_1_1_0_1() { return cBoolValFalseKeyword_1_1_0_1; }
	}

	public class NativeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NativeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNativeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cTakesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamsFormalParametersParserRuleCall_4_0 = (RuleCall)cParamsAssignment_4.eContents().get(0);
		private final Keyword cReturnsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReturnTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReturnTypeReturnTypeParserRuleCall_6_0 = (RuleCall)cReturnTypeAssignment_6.eContents().get(0);
		
		//NativeDef:
		//	"constant"? "native" name=ID "takes" params=FormalParameters "returns" returnType=ReturnType;
		public ParserRule getRule() { return rule; }

		//"constant"? "native" name=ID "takes" params=FormalParameters "returns" returnType=ReturnType
		public Group getGroup() { return cGroup; }

		//"constant"?
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }

		//"native"
		public Keyword getNativeKeyword_1() { return cNativeKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"takes"
		public Keyword getTakesKeyword_3() { return cTakesKeyword_3; }

		//params=FormalParameters
		public Assignment getParamsAssignment_4() { return cParamsAssignment_4; }

		//FormalParameters
		public RuleCall getParamsFormalParametersParserRuleCall_4_0() { return cParamsFormalParametersParserRuleCall_4_0; }

		//"returns"
		public Keyword getReturnsKeyword_5() { return cReturnsKeyword_5; }

		//returnType=ReturnType
		public Assignment getReturnTypeAssignment_6() { return cReturnTypeAssignment_6; }

		//ReturnType
		public RuleCall getReturnTypeReturnTypeParserRuleCall_6_0() { return cReturnTypeReturnTypeParserRuleCall_6_0; }
	}

	public class ReturnTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cReturnsNothingAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNothingKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ReturnType:
		//	{ReturnsNothing} "nothing" | name=ID;
		public ParserRule getRule() { return rule; }

		//{ReturnsNothing} "nothing" | name=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ReturnsNothing} "nothing"
		public Group getGroup_0() { return cGroup_0; }

		//{ReturnsNothing}
		public Action getReturnsNothingAction_0_0() { return cReturnsNothingAction_0_0; }

		//"nothing"
		public Keyword getNothingKeyword_0_1() { return cNothingKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class FormalParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalParameters");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cParamNothingAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNothingKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cParametersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cParametersFormalParameterParserRuleCall_1_0_0 = (RuleCall)cParametersAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParametersFormalParameterParserRuleCall_1_1_1_0 = (RuleCall)cParametersAssignment_1_1_1.eContents().get(0);
		
		//FormalParameters:
		//	{ParamNothing} "nothing" | parameters+=FormalParameter ("," parameters+=FormalParameter)*;
		public ParserRule getRule() { return rule; }

		//{ParamNothing} "nothing" | parameters+=FormalParameter ("," parameters+=FormalParameter)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ParamNothing} "nothing"
		public Group getGroup_0() { return cGroup_0; }

		//{ParamNothing}
		public Action getParamNothingAction_0_0() { return cParamNothingAction_0_0; }

		//"nothing"
		public Keyword getNothingKeyword_0_1() { return cNothingKeyword_0_1; }

		//parameters+=FormalParameter ("," parameters+=FormalParameter)*
		public Group getGroup_1() { return cGroup_1; }

		//parameters+=FormalParameter
		public Assignment getParametersAssignment_1_0() { return cParametersAssignment_1_0; }

		//FormalParameter
		public RuleCall getParametersFormalParameterParserRuleCall_1_0_0() { return cParametersFormalParameterParserRuleCall_1_0_0; }

		//("," parameters+=FormalParameter)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//parameters+=FormalParameter
		public Assignment getParametersAssignment_1_1_1() { return cParametersAssignment_1_1_1; }

		//FormalParameter
		public RuleCall getParametersFormalParameterParserRuleCall_1_1_1_0() { return cParametersFormalParameterParserRuleCall_1_1_1_0; }
	}

	public class FormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FormalParameter:
		//	type=ID name=ID;
		public ParserRule getRule() { return rule; }

		//type=ID name=ID
		public Group getGroup() { return cGroup; }

		//type=ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cExtendsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExtendNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExtendNameIDTerminalRuleCall_3_0 = (RuleCall)cExtendNameAssignment_3.eContents().get(0);
		
		//TypeDef:
		//	"type" name=ID "extends" extendName=ID;
		public ParserRule getRule() { return rule; }

		//"type" name=ID "extends" extendName=ID
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"extends"
		public Keyword getExtendsKeyword_2() { return cExtendsKeyword_2; }

		//extendName=ID
		public Assignment getExtendNameAssignment_3() { return cExtendNameAssignment_3; }

		//ID
		public RuleCall getExtendNameIDTerminalRuleCall_3_0() { return cExtendNameIDTerminalRuleCall_3_0; }
	}
	
	
	private ProgElements pProg;
	private EntityElements pEntity;
	private GlobalBlockElements pGlobalBlock;
	private ConstantElements pConstant;
	private ExprElements pExpr;
	private MultElements pMult;
	private FunctionCallElements pFunctionCall;
	private LiteralElements pLiteral;
	private NativeDefElements pNativeDef;
	private ReturnTypeElements pReturnType;
	private FormalParametersElements pFormalParameters;
	private FormalParameterElements pFormalParameter;
	private TypeDefElements pTypeDef;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public JassToPscriptGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Prog:
	//	elems+=Entity*;
	public ProgElements getProgAccess() {
		return (pProg != null) ? pProg : (pProg = new ProgElements());
	}
	
	public ParserRule getProgRule() {
		return getProgAccess().getRule();
	}

	//Entity:
	//	TypeDef | GlobalBlock | NativeDef;
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//GlobalBlock:
	//	{GlobalBlock} "globals" vars+=Constant* "endglobals";
	public GlobalBlockElements getGlobalBlockAccess() {
		return (pGlobalBlock != null) ? pGlobalBlock : (pGlobalBlock = new GlobalBlockElements());
	}
	
	public ParserRule getGlobalBlockRule() {
		return getGlobalBlockAccess().getRule();
	}

	//Constant:
	//	"constant" type=ID name=ID "=" value=Expr;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//Expr:
	//	Literal | FunctionCall | Mult;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//Mult:
	//	left=Literal "*" right=Literal;
	public MultElements getMultAccess() {
		return (pMult != null) ? pMult : (pMult = new MultElements());
	}
	
	public ParserRule getMultRule() {
		return getMultAccess().getRule();
	}

	//FunctionCall:
	//	name=ID "(" (parameters+=Expr ("," parameters+=Expr)*)? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return (pFunctionCall != null) ? pFunctionCall : (pFunctionCall = new FunctionCallElements());
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//Literal:
	//	{IntLiteral} intVal=INT | {BoolLiteral} boolVal=("true" | "false");
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//NativeDef:
	//	"constant"? "native" name=ID "takes" params=FormalParameters "returns" returnType=ReturnType;
	public NativeDefElements getNativeDefAccess() {
		return (pNativeDef != null) ? pNativeDef : (pNativeDef = new NativeDefElements());
	}
	
	public ParserRule getNativeDefRule() {
		return getNativeDefAccess().getRule();
	}

	//ReturnType:
	//	{ReturnsNothing} "nothing" | name=ID;
	public ReturnTypeElements getReturnTypeAccess() {
		return (pReturnType != null) ? pReturnType : (pReturnType = new ReturnTypeElements());
	}
	
	public ParserRule getReturnTypeRule() {
		return getReturnTypeAccess().getRule();
	}

	//FormalParameters:
	//	{ParamNothing} "nothing" | parameters+=FormalParameter ("," parameters+=FormalParameter)*;
	public FormalParametersElements getFormalParametersAccess() {
		return (pFormalParameters != null) ? pFormalParameters : (pFormalParameters = new FormalParametersElements());
	}
	
	public ParserRule getFormalParametersRule() {
		return getFormalParametersAccess().getRule();
	}

	//FormalParameter:
	//	type=ID name=ID;
	public FormalParameterElements getFormalParameterAccess() {
		return (pFormalParameter != null) ? pFormalParameter : (pFormalParameter = new FormalParameterElements());
	}
	
	public ParserRule getFormalParameterRule() {
		return getFormalParameterAccess().getRule();
	}

	//TypeDef:
	//	"type" name=ID "extends" extendName=ID;
	public TypeDefElements getTypeDefAccess() {
		return (pTypeDef != null) ? pTypeDef : (pTypeDef = new TypeDefElements());
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
