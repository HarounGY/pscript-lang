/*
* generated by Xtext
*/
grammar InternalJassToPscript;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.peeeq.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.peeeq.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.peeeq.services.JassToPscriptGrammarAccess;

}

@parser::members {

 	private JassToPscriptGrammarAccess grammarAccess;
 	
    public InternalJassToPscriptParser(TokenStream input, JassToPscriptGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Prog";	
   	}
   	
   	@Override
   	protected JassToPscriptGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProg
entryRuleProg returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgRule()); }
	 iv_ruleProg=ruleProg 
	 { $current=$iv_ruleProg.current; } 
	 EOF 
;

// Rule Prog
ruleProg returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgAccess().getElemsEntityParserRuleCall_0()); 
	    }
		lv_elems_0_0=ruleEntity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgRule());
	        }
       		add(
       			$current, 
       			"elems",
        		lv_elems_0_0, 
        		"Entity");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getTypeDefParserRuleCall_0()); 
    }
    this_TypeDef_0=ruleTypeDef
    { 
        $current = $this_TypeDef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getGlobalBlockParserRuleCall_1()); 
    }
    this_GlobalBlock_1=ruleGlobalBlock
    { 
        $current = $this_GlobalBlock_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEntityAccess().getNativeDefParserRuleCall_2()); 
    }
    this_NativeDef_2=ruleNativeDef
    { 
        $current = $this_NativeDef_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGlobalBlock
entryRuleGlobalBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalBlockRule()); }
	 iv_ruleGlobalBlock=ruleGlobalBlock 
	 { $current=$iv_ruleGlobalBlock.current; } 
	 EOF 
;

// Rule GlobalBlock
ruleGlobalBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGlobalBlockAccess().getGlobalBlockAction_0(),
            $current);
    }
)	otherlv_1='globals' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGlobalBlockAccess().getGlobalsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalBlockAccess().getVarsConstantParserRuleCall_2_0()); 
	    }
		lv_vars_2_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalBlockRule());
	        }
       		add(
       			$current, 
       			"vars",
        		lv_vars_2_0, 
        		"Constant");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='endglobals' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGlobalBlockAccess().getEndglobalsKeyword_3());
    }
)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='constant' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantAccess().getConstantKeyword_0());
    }
(
(
		lv_type_1_0=RULE_ID
		{
			newLeafNode(lv_type_1_0, grammarAccess.getConstantAccess().getTypeIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"ID");
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstantAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getValueExprParserRuleCall_4_0()); 
	    }
		lv_value_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExprAccess().getLiteralParserRuleCall_0()); 
    }
    this_Literal_0=ruleLiteral
    { 
        $current = $this_Literal_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprAccess().getFunctionCallParserRuleCall_1()); 
    }
    this_FunctionCall_1=ruleFunctionCall
    { 
        $current = $this_FunctionCall_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExprAccess().getMultParserRuleCall_2()); 
    }
    this_Mult_2=ruleMult
    { 
        $current = $this_Mult_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMult
entryRuleMult returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultRule()); }
	 iv_ruleMult=ruleMult 
	 { $current=$iv_ruleMult.current; } 
	 EOF 
;

// Rule Mult
ruleMult returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultAccess().getLeftLiteralParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultAccess().getAsteriskKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultAccess().getRightLiteralParserRuleCall_2_0()); 
	    }
		lv_right_2_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	 iv_ruleFunctionCall=ruleFunctionCall 
	 { $current=$iv_ruleFunctionCall.current; } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFunctionCallAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionCallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getParametersExprParserRuleCall_2_0_0()); 
	    }
		lv_parameters_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallAccess().getParametersExprParserRuleCall_2_1_1_0()); 
	    }
		lv_parameters_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getIntLiteralAction_0_0(),
            $current);
    }
)(
(
		lv_intVal_1_0=RULE_INT
		{
			newLeafNode(lv_intVal_1_0, grammarAccess.getLiteralAccess().getIntValINTTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"intVal",
        		lv_intVal_1_0, 
        		"INT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getBoolLiteralAction_1_0(),
            $current);
    }
)(
(
(
		lv_boolVal_3_1=	'true' 
    {
        newLeafNode(lv_boolVal_3_1, grammarAccess.getLiteralAccess().getBoolValTrueKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed($current, "boolVal", lv_boolVal_3_1, null);
	    }

    |		lv_boolVal_3_2=	'false' 
    {
        newLeafNode(lv_boolVal_3_2, grammarAccess.getLiteralAccess().getBoolValFalseKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed($current, "boolVal", lv_boolVal_3_2, null);
	    }

)

)
)))
;





// Entry rule entryRuleNativeDef
entryRuleNativeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNativeDefRule()); }
	 iv_ruleNativeDef=ruleNativeDef 
	 { $current=$iv_ruleNativeDef.current; } 
	 EOF 
;

// Rule NativeDef
ruleNativeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='constant' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNativeDefAccess().getConstantKeyword_0());
    }
)?	otherlv_1='native' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNativeDefAccess().getNativeKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getNativeDefAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNativeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='takes' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNativeDefAccess().getTakesKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNativeDefAccess().getParamsFormalParametersParserRuleCall_4_0()); 
	    }
		lv_params_4_0=ruleFormalParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNativeDefRule());
	        }
       		set(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"FormalParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='returns' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNativeDefAccess().getReturnsKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNativeDefAccess().getReturnTypeReturnTypeParserRuleCall_6_0()); 
	    }
		lv_returnType_6_0=ruleReturnType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNativeDefRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_6_0, 
        		"ReturnType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleReturnType
entryRuleReturnType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnTypeRule()); }
	 iv_ruleReturnType=ruleReturnType 
	 { $current=$iv_ruleReturnType.current; } 
	 EOF 
;

// Rule ReturnType
ruleReturnType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnTypeAccess().getReturnsNothingAction_0_0(),
            $current);
    }
)	otherlv_1='nothing' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReturnTypeAccess().getNothingKeyword_0_1());
    }
)
    |(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getReturnTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReturnTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleFormalParameters
entryRuleFormalParameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormalParametersRule()); }
	 iv_ruleFormalParameters=ruleFormalParameters 
	 { $current=$iv_ruleFormalParameters.current; } 
	 EOF 
;

// Rule FormalParameters
ruleFormalParameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFormalParametersAccess().getParamNothingAction_0_0(),
            $current);
    }
)	otherlv_1='nothing' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFormalParametersAccess().getNothingKeyword_0_1());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParametersAccess().getParametersFormalParameterParserRuleCall_1_0_0()); 
	    }
		lv_parameters_2_0=ruleFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParametersRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"FormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFormalParametersAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormalParametersAccess().getParametersFormalParameterParserRuleCall_1_1_1_0()); 
	    }
		lv_parameters_4_0=ruleFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormalParametersRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"FormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleFormalParameter
entryRuleFormalParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormalParameterRule()); }
	 iv_ruleFormalParameter=ruleFormalParameter 
	 { $current=$iv_ruleFormalParameter.current; } 
	 EOF 
;

// Rule FormalParameter
ruleFormalParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_type_0_0=RULE_ID
		{
			newLeafNode(lv_type_0_0, grammarAccess.getFormalParameterAccess().getTypeIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFormalParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ID");
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFormalParameterAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFormalParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleTypeDef
entryRuleTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefRule()); }
	 iv_ruleTypeDef=ruleTypeDef 
	 { $current=$iv_ruleTypeDef.current; } 
	 EOF 
;

// Rule TypeDef
ruleTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeDefAccess().getTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeDefAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeDefAccess().getExtendsKeyword_2());
    }
(
(
		lv_extendName_3_0=RULE_ID
		{
			newLeafNode(lv_extendName_3_0, grammarAccess.getTypeDefAccess().getExtendNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"extendName",
        		lv_extendName_3_0, 
        		"ID");
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


