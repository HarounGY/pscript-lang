/*
 * generated by Xtext
 */
package de.peeeq.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import de.peeeq.jassToPscript.TypeDef
import de.peeeq.jassToPscript.Prog
import de.peeeq.jassToPscript.Constant
import de.peeeq.jassToPscript.Expr
import de.peeeq.jassToPscript.FunctionCall
import de.peeeq.jassToPscript.IntLiteral
import de.peeeq.jassToPscript.BoolLiteral
import de.peeeq.jassToPscript.NativeDef
import de.peeeq.jassToPscript.FormalParameters
import de.peeeq.jassToPscript.ReturnsNothing
import de.peeeq.jassToPscript.Mult
import de.peeeq.jassToPscript.Entity

class JassToPscriptGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		//TODO implment me
		fsa.generateFile("natives.pscript", compile(resource));
		 
	}
	
	def compile(Resource resource)  
		'''
		// generated by JassToPscript
		
		package jass_natives {
			
			// standard types
			nativetype int
			nativetype real
			nativetype string
			nativetype bool
			nativetype code
			nativetype handle
			
			
		«FOR e: resource.contents.filter(typeof(Prog))»
			«e.compile»
		«ENDFOR»
		
		}
   		'''
   	
   	def compile(Prog prog) '''
   	«FOR elem:prog.elems»
   		«elem.compile»
   	«ENDFOR»
   	'''
	
	def dispatch compile(Entity e) '''/*Entity: «e»*/'''	
		
	def dispatch compile(TypeDef t) '''nativetype «t.name.compileType» = «t.name» extends «t.extendName.compileType»''' 
	
	def dispatch compile(Constant c) '''val «c.name» = «c.value.compile»'''
	
	def dispatch compile(Expr e) '''/* not implemented */''' 
	def dispatch compile(FunctionCall e) '''«e.name»(«FOR p:e.parameters SEPARATOR ','»p.compile«ENDFOR»)''' 
	def dispatch compile(IntLiteral e) '''«e.intVal»''' 
	def dispatch compile(BoolLiteral e) '''«e.boolVal»''' 
	def dispatch compile(Mult e) '''«e.left.compile» * «e.right.compile»'''
	
	
	def dispatch compile(NativeDef f) '''
	«IF f.returnType instanceof ReturnsNothing»
	native «f.name» («f.params.compile»)
	«ELSE»
	native «f.name» («f.params.compile») returns «f.returnType»
	«ENDIF»'''
	
	def dispatch compile(FormalParameters f) '''«FOR p:f.parameters SEPARATOR ', '»«p.name.toFirstLower»:«p.type.compileType»«ENDFOR»'''
	
	def compileNames(FormalParameters f) '''«FOR p:f.parameters SEPARATOR ', '»«p.name.toFirstLower»«ENDFOR»'''
	
	def compileType(String type) { 
		if (type.equals("integer")) {
			return 'int'
		} 
		if (type.equals("boolean")) {
			return 'bool'
		} 
		return type		
	}
}
