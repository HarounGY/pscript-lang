/*
 * generated by Xtext
 */
package de.peeeq.pscript.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import de.peeeq.pscript.pscript.ExprMember;
import de.peeeq.pscript.ui.contentassist.AbstractPscriptProposalProvider;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class PscriptProposalProvider extends AbstractPscriptProposalProvider {


	@Override
	public void completeExprMember_Right(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// call implementation in superclass
		super.completeExprMember_Right(model,  assignment,context,  acceptor);
		//completeRuleCall(((RuleCall)assignment.getTerminal()), context, acceptor);
		if (model instanceof ExprMember) {
			ExprMember e = (ExprMember) model;
			// compute the plain proposal
			String proposal = "#functions for " + e.getLeft();

			// convert it to a valid STRING-terminal
			proposal = getValueConverter().toString(proposal, "STRING");


			ICompletionProposal completionProposal = 
				createCompletionProposal(proposal, context);

			// register the proposal, the acceptor handles null-values gracefully
			acceptor.accept(completionProposal);
		}
	}
}
