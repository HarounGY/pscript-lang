/*
* generated by Xtext
*/
package de.peeeq.pscript.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.peeeq.pscript.services.PscriptGrammarAccess;

public class PscriptParser extends AbstractContentAssistParser {
	
	@Inject
	private PscriptGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.peeeq.pscript.ui.contentassist.antlr.internal.InternalPscriptParser createParser() {
		de.peeeq.pscript.ui.contentassist.antlr.internal.InternalPscriptParser result = new de.peeeq.pscript.ui.contentassist.antlr.internal.InternalPscriptParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEntityAccess().getAlternatives(), "rule__Entity__Alternatives");
					put(grammarAccess.getClassMemberAccess().getAlternatives_1(), "rule__ClassMember__Alternatives_1");
					put(grammarAccess.getVarDefAccess().getAlternatives_1(), "rule__VarDef__Alternatives_1");
					put(grammarAccess.getStatementsAccess().getAlternatives_1(), "rule__Statements__Alternatives_1");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getExprAssignmentAccess().getOpAlternatives_1_1_0(), "rule__ExprAssignment__OpAlternatives_1_1_0");
					put(grammarAccess.getExprEqualityAccess().getOpAlternatives_1_1_0(), "rule__ExprEquality__OpAlternatives_1_1_0");
					put(grammarAccess.getExprComparisonAccess().getOpAlternatives_1_1_0(), "rule__ExprComparison__OpAlternatives_1_1_0");
					put(grammarAccess.getExprAdditiveAccess().getOpAlternatives_1_1_0(), "rule__ExprAdditive__OpAlternatives_1_1_0");
					put(grammarAccess.getExprMultAccess().getOpAlternatives_1_1_0(), "rule__ExprMult__OpAlternatives_1_1_0");
					put(grammarAccess.getExprSignAccess().getAlternatives(), "rule__ExprSign__Alternatives");
					put(grammarAccess.getExprSignAccess().getOpAlternatives_0_1_0(), "rule__ExprSign__OpAlternatives_0_1_0");
					put(grammarAccess.getExprNotAccess().getAlternatives(), "rule__ExprNot__Alternatives");
					put(grammarAccess.getExprAtomicAccess().getAlternatives(), "rule__ExprAtomic__Alternatives");
					put(grammarAccess.getExprAtomicAccess().getAlternatives_7_3(), "rule__ExprAtomic__Alternatives_7_3");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getPackageDeclarationAccess().getGroup(), "rule__PackageDeclaration__Group__0");
					put(grammarAccess.getPackageDeclarationAccess().getGroup_3(), "rule__PackageDeclaration__Group_3__0");
					put(grammarAccess.getPackageDeclarationAccess().getGroup_5(), "rule__PackageDeclaration__Group_5__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildCardAccess().getGroup(), "rule__QualifiedNameWithWildCard__Group__0");
					put(grammarAccess.getNativeTypeAccess().getGroup(), "rule__NativeType__Group__0");
					put(grammarAccess.getClassDefAccess().getGroup(), "rule__ClassDef__Group__0");
					put(grammarAccess.getClassMemberAccess().getGroup(), "rule__ClassMember__Group__0");
					put(grammarAccess.getVarDefAccess().getGroup(), "rule__VarDef__Group__0");
					put(grammarAccess.getVarDefAccess().getGroup_3(), "rule__VarDef__Group_3__0");
					put(grammarAccess.getVarDefAccess().getGroup_4(), "rule__VarDef__Group_4__0");
					put(grammarAccess.getTypeExprAccess().getGroup(), "rule__TypeExpr__Group__0");
					put(grammarAccess.getFuncDefAccess().getGroup(), "rule__FuncDef__Group__0");
					put(grammarAccess.getFuncDefAccess().getGroup_4(), "rule__FuncDef__Group_4__0");
					put(grammarAccess.getFuncDefAccess().getGroup_4_1(), "rule__FuncDef__Group_4_1__0");
					put(grammarAccess.getFuncDefAccess().getGroup_6(), "rule__FuncDef__Group_6__0");
					put(grammarAccess.getParameterDefAccess().getGroup(), "rule__ParameterDef__Group__0");
					put(grammarAccess.getStatementsAccess().getGroup(), "rule__Statements__Group__0");
					put(grammarAccess.getStmtReturnAccess().getGroup(), "rule__StmtReturn__Group__0");
					put(grammarAccess.getStmtIfAccess().getGroup(), "rule__StmtIf__Group__0");
					put(grammarAccess.getStmtIfAccess().getGroup_5(), "rule__StmtIf__Group_5__0");
					put(grammarAccess.getStmtWhileAccess().getGroup(), "rule__StmtWhile__Group__0");
					put(grammarAccess.getStmtExprAccess().getGroup(), "rule__StmtExpr__Group__0");
					put(grammarAccess.getExprAssignmentAccess().getGroup(), "rule__ExprAssignment__Group__0");
					put(grammarAccess.getExprAssignmentAccess().getGroup_1(), "rule__ExprAssignment__Group_1__0");
					put(grammarAccess.getExprOrAccess().getGroup(), "rule__ExprOr__Group__0");
					put(grammarAccess.getExprOrAccess().getGroup_1(), "rule__ExprOr__Group_1__0");
					put(grammarAccess.getExprAndAccess().getGroup(), "rule__ExprAnd__Group__0");
					put(grammarAccess.getExprAndAccess().getGroup_1(), "rule__ExprAnd__Group_1__0");
					put(grammarAccess.getExprEqualityAccess().getGroup(), "rule__ExprEquality__Group__0");
					put(grammarAccess.getExprEqualityAccess().getGroup_1(), "rule__ExprEquality__Group_1__0");
					put(grammarAccess.getExprComparisonAccess().getGroup(), "rule__ExprComparison__Group__0");
					put(grammarAccess.getExprComparisonAccess().getGroup_1(), "rule__ExprComparison__Group_1__0");
					put(grammarAccess.getExprAdditiveAccess().getGroup(), "rule__ExprAdditive__Group__0");
					put(grammarAccess.getExprAdditiveAccess().getGroup_1(), "rule__ExprAdditive__Group_1__0");
					put(grammarAccess.getExprMultAccess().getGroup(), "rule__ExprMult__Group__0");
					put(grammarAccess.getExprMultAccess().getGroup_1(), "rule__ExprMult__Group_1__0");
					put(grammarAccess.getExprSignAccess().getGroup_0(), "rule__ExprSign__Group_0__0");
					put(grammarAccess.getExprNotAccess().getGroup_0(), "rule__ExprNot__Group_0__0");
					put(grammarAccess.getExprCustomOperatorAccess().getGroup(), "rule__ExprCustomOperator__Group__0");
					put(grammarAccess.getExprCustomOperatorAccess().getGroup_1(), "rule__ExprCustomOperator__Group_1__0");
					put(grammarAccess.getExprMemberAccess().getGroup(), "rule__ExprMember__Group__0");
					put(grammarAccess.getExprMemberAccess().getGroup_1(), "rule__ExprMember__Group_1__0");
					put(grammarAccess.getExprAtomicAccess().getGroup_0(), "rule__ExprAtomic__Group_0__0");
					put(grammarAccess.getExprAtomicAccess().getGroup_1(), "rule__ExprAtomic__Group_1__0");
					put(grammarAccess.getExprAtomicAccess().getGroup_2(), "rule__ExprAtomic__Group_2__0");
					put(grammarAccess.getExprAtomicAccess().getGroup_3(), "rule__ExprAtomic__Group_3__0");
					put(grammarAccess.getExprAtomicAccess().getGroup_4(), "rule__ExprAtomic__Group_4__0");
					put(grammarAccess.getExprAtomicAccess().getGroup_5(), "rule__ExprAtomic__Group_5__0");
					put(grammarAccess.getExprAtomicAccess().getGroup_6(), "rule__ExprAtomic__Group_6__0");
					put(grammarAccess.getExprAtomicAccess().getGroup_7(), "rule__ExprAtomic__Group_7__0");
					put(grammarAccess.getExprAtomicAccess().getGroup_7_3_1(), "rule__ExprAtomic__Group_7_3_1__0");
					put(grammarAccess.getExprAtomicAccess().getGroup_8(), "rule__ExprAtomic__Group_8__0");
					put(grammarAccess.getExprListAccess().getGroup(), "rule__ExprList__Group__0");
					put(grammarAccess.getExprListAccess().getGroup_2(), "rule__ExprList__Group_2__0");
					put(grammarAccess.getProgramAccess().getPackagesAssignment_1(), "rule__Program__PackagesAssignment_1");
					put(grammarAccess.getProgramAccess().getPackagesAssignment_2(), "rule__Program__PackagesAssignment_2");
					put(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1(), "rule__PackageDeclaration__NameAssignment_1");
					put(grammarAccess.getPackageDeclarationAccess().getImportsAssignment_3_1(), "rule__PackageDeclaration__ImportsAssignment_3_1");
					put(grammarAccess.getPackageDeclarationAccess().getElementsAssignment_5_0(), "rule__PackageDeclaration__ElementsAssignment_5_0");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getNativeTypeAccess().getNameAssignment_3(), "rule__NativeType__NameAssignment_3");
					put(grammarAccess.getNativeTypeAccess().getOrigNameAssignment_5(), "rule__NativeType__OrigNameAssignment_5");
					put(grammarAccess.getClassDefAccess().getNameAssignment_2(), "rule__ClassDef__NameAssignment_2");
					put(grammarAccess.getClassDefAccess().getMembersAssignment_4(), "rule__ClassDef__MembersAssignment_4");
					put(grammarAccess.getVarDefAccess().getConstantAssignment_1_1(), "rule__VarDef__ConstantAssignment_1_1");
					put(grammarAccess.getVarDefAccess().getNameAssignment_2(), "rule__VarDef__NameAssignment_2");
					put(grammarAccess.getVarDefAccess().getTypeAssignment_3_1(), "rule__VarDef__TypeAssignment_3_1");
					put(grammarAccess.getVarDefAccess().getEAssignment_4_1(), "rule__VarDef__EAssignment_4_1");
					put(grammarAccess.getTypeExprAccess().getNameAssignment_1(), "rule__TypeExpr__NameAssignment_1");
					put(grammarAccess.getFuncDefAccess().getNameAssignment_2(), "rule__FuncDef__NameAssignment_2");
					put(grammarAccess.getFuncDefAccess().getParametersAssignment_4_0(), "rule__FuncDef__ParametersAssignment_4_0");
					put(grammarAccess.getFuncDefAccess().getParametersAssignment_4_1_1(), "rule__FuncDef__ParametersAssignment_4_1_1");
					put(grammarAccess.getFuncDefAccess().getTypeAssignment_6_1(), "rule__FuncDef__TypeAssignment_6_1");
					put(grammarAccess.getFuncDefAccess().getBodyAssignment_8(), "rule__FuncDef__BodyAssignment_8");
					put(grammarAccess.getParameterDefAccess().getNameAssignment_1(), "rule__ParameterDef__NameAssignment_1");
					put(grammarAccess.getParameterDefAccess().getTypeAssignment_3(), "rule__ParameterDef__TypeAssignment_3");
					put(grammarAccess.getStatementsAccess().getStatementsAssignment_1_1(), "rule__Statements__StatementsAssignment_1_1");
					put(grammarAccess.getStmtReturnAccess().getEAssignment_2(), "rule__StmtReturn__EAssignment_2");
					put(grammarAccess.getStmtIfAccess().getCondAssignment_1(), "rule__StmtIf__CondAssignment_1");
					put(grammarAccess.getStmtIfAccess().getThenBlockAssignment_3(), "rule__StmtIf__ThenBlockAssignment_3");
					put(grammarAccess.getStmtIfAccess().getElseBlockAssignment_5_2(), "rule__StmtIf__ElseBlockAssignment_5_2");
					put(grammarAccess.getStmtWhileAccess().getCondAssignment_1(), "rule__StmtWhile__CondAssignment_1");
					put(grammarAccess.getStmtWhileAccess().getBodyAssignment_3(), "rule__StmtWhile__BodyAssignment_3");
					put(grammarAccess.getStmtExprAccess().getEAssignment_0(), "rule__StmtExpr__EAssignment_0");
					put(grammarAccess.getExprAssignmentAccess().getOpAssignment_1_1(), "rule__ExprAssignment__OpAssignment_1_1");
					put(grammarAccess.getExprAssignmentAccess().getRightAssignment_1_2(), "rule__ExprAssignment__RightAssignment_1_2");
					put(grammarAccess.getExprOrAccess().getOpAssignment_1_1(), "rule__ExprOr__OpAssignment_1_1");
					put(grammarAccess.getExprOrAccess().getRightAssignment_1_2(), "rule__ExprOr__RightAssignment_1_2");
					put(grammarAccess.getExprAndAccess().getOpAssignment_1_1(), "rule__ExprAnd__OpAssignment_1_1");
					put(grammarAccess.getExprAndAccess().getRightAssignment_1_2(), "rule__ExprAnd__RightAssignment_1_2");
					put(grammarAccess.getExprEqualityAccess().getOpAssignment_1_1(), "rule__ExprEquality__OpAssignment_1_1");
					put(grammarAccess.getExprEqualityAccess().getRightAssignment_1_2(), "rule__ExprEquality__RightAssignment_1_2");
					put(grammarAccess.getExprComparisonAccess().getOpAssignment_1_1(), "rule__ExprComparison__OpAssignment_1_1");
					put(grammarAccess.getExprComparisonAccess().getRightAssignment_1_2(), "rule__ExprComparison__RightAssignment_1_2");
					put(grammarAccess.getExprAdditiveAccess().getOpAssignment_1_1(), "rule__ExprAdditive__OpAssignment_1_1");
					put(grammarAccess.getExprAdditiveAccess().getRightAssignment_1_2(), "rule__ExprAdditive__RightAssignment_1_2");
					put(grammarAccess.getExprMultAccess().getOpAssignment_1_1(), "rule__ExprMult__OpAssignment_1_1");
					put(grammarAccess.getExprMultAccess().getRightAssignment_1_2(), "rule__ExprMult__RightAssignment_1_2");
					put(grammarAccess.getExprSignAccess().getOpAssignment_0_1(), "rule__ExprSign__OpAssignment_0_1");
					put(grammarAccess.getExprSignAccess().getRightAssignment_0_2(), "rule__ExprSign__RightAssignment_0_2");
					put(grammarAccess.getExprNotAccess().getOpAssignment_0_1(), "rule__ExprNot__OpAssignment_0_1");
					put(grammarAccess.getExprNotAccess().getRightAssignment_0_2(), "rule__ExprNot__RightAssignment_0_2");
					put(grammarAccess.getExprCustomOperatorAccess().getOpAssignment_1_1(), "rule__ExprCustomOperator__OpAssignment_1_1");
					put(grammarAccess.getExprCustomOperatorAccess().getRightAssignment_1_2(), "rule__ExprCustomOperator__RightAssignment_1_2");
					put(grammarAccess.getExprMemberAccess().getOpAssignment_1_1(), "rule__ExprMember__OpAssignment_1_1");
					put(grammarAccess.getExprMemberAccess().getRightAssignment_1_2(), "rule__ExprMember__RightAssignment_1_2");
					put(grammarAccess.getExprAtomicAccess().getNameValAssignment_0_1(), "rule__ExprAtomic__NameValAssignment_0_1");
					put(grammarAccess.getExprAtomicAccess().getParametersAssignment_0_2(), "rule__ExprAtomic__ParametersAssignment_0_2");
					put(grammarAccess.getExprAtomicAccess().getNameValAssignment_1_1(), "rule__ExprAtomic__NameValAssignment_1_1");
					put(grammarAccess.getExprAtomicAccess().getNameValAssignment_2_1(), "rule__ExprAtomic__NameValAssignment_2_1");
					put(grammarAccess.getExprAtomicAccess().getIntValAssignment_4_1(), "rule__ExprAtomic__IntValAssignment_4_1");
					put(grammarAccess.getExprAtomicAccess().getNumValAssignment_5_1(), "rule__ExprAtomic__NumValAssignment_5_1");
					put(grammarAccess.getExprAtomicAccess().getStrValAssignment_6_1(), "rule__ExprAtomic__StrValAssignment_6_1");
					put(grammarAccess.getExprAtomicAccess().getNameAssignment_7_2(), "rule__ExprAtomic__NameAssignment_7_2");
					put(grammarAccess.getExprAtomicAccess().getParametersAssignment_7_3_0(), "rule__ExprAtomic__ParametersAssignment_7_3_0");
					put(grammarAccess.getExprAtomicAccess().getLeftAssignment_8_3(), "rule__ExprAtomic__LeftAssignment_8_3");
					put(grammarAccess.getExprAtomicAccess().getOpAssignment_8_4(), "rule__ExprAtomic__OpAssignment_8_4");
					put(grammarAccess.getExprAtomicAccess().getRightAssignment_8_5(), "rule__ExprAtomic__RightAssignment_8_5");
					put(grammarAccess.getExprListAccess().getParamsAssignment_1(), "rule__ExprList__ParamsAssignment_1");
					put(grammarAccess.getExprListAccess().getParamsAssignment_2_1(), "rule__ExprList__ParamsAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.peeeq.pscript.ui.contentassist.antlr.internal.InternalPscriptParser typedParser = (de.peeeq.pscript.ui.contentassist.antlr.internal.InternalPscriptParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public PscriptGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PscriptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
