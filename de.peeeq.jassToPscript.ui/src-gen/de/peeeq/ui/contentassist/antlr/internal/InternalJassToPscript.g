/*
* generated by Xtext
*/
grammar InternalJassToPscript;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.peeeq.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.peeeq.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.peeeq.services.JassToPscriptGrammarAccess;

}

@parser::members {
 
 	private JassToPscriptGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(JassToPscriptGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProg
entryRuleProg 
:
{ before(grammarAccess.getProgRule()); }
	 ruleProg
{ after(grammarAccess.getProgRule()); } 
	 EOF 
;

// Rule Prog
ruleProg
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgAccess().getElemsAssignment()); }
(rule__Prog__ElemsAssignment)*
{ after(grammarAccess.getProgAccess().getElemsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntity
entryRuleEntity 
:
{ before(grammarAccess.getEntityRule()); }
	 ruleEntity
{ after(grammarAccess.getEntityRule()); } 
	 EOF 
;

// Rule Entity
ruleEntity
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEntityAccess().getAlternatives()); }
(rule__Entity__Alternatives)
{ after(grammarAccess.getEntityAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGlobalBlock
entryRuleGlobalBlock 
:
{ before(grammarAccess.getGlobalBlockRule()); }
	 ruleGlobalBlock
{ after(grammarAccess.getGlobalBlockRule()); } 
	 EOF 
;

// Rule GlobalBlock
ruleGlobalBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGlobalBlockAccess().getGroup()); }
(rule__GlobalBlock__Group__0)
{ after(grammarAccess.getGlobalBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstant
entryRuleConstant 
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantAccess().getGroup()); }
(rule__Constant__Group__0)
{ after(grammarAccess.getConstantAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpr
entryRuleExpr 
:
{ before(grammarAccess.getExprRule()); }
	 ruleExpr
{ after(grammarAccess.getExprRule()); } 
	 EOF 
;

// Rule Expr
ruleExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprAccess().getAlternatives()); }
(rule__Expr__Alternatives)
{ after(grammarAccess.getExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMult
entryRuleMult 
:
{ before(grammarAccess.getMultRule()); }
	 ruleMult
{ after(grammarAccess.getMultRule()); } 
	 EOF 
;

// Rule Mult
ruleMult
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultAccess().getGroup()); }
(rule__Mult__Group__0)
{ after(grammarAccess.getMultAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
(rule__FunctionCall__Group__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNativeDef
entryRuleNativeDef 
:
{ before(grammarAccess.getNativeDefRule()); }
	 ruleNativeDef
{ after(grammarAccess.getNativeDefRule()); } 
	 EOF 
;

// Rule NativeDef
ruleNativeDef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNativeDefAccess().getGroup()); }
(rule__NativeDef__Group__0)
{ after(grammarAccess.getNativeDefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnType
entryRuleReturnType 
:
{ before(grammarAccess.getReturnTypeRule()); }
	 ruleReturnType
{ after(grammarAccess.getReturnTypeRule()); } 
	 EOF 
;

// Rule ReturnType
ruleReturnType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnTypeAccess().getAlternatives()); }
(rule__ReturnType__Alternatives)
{ after(grammarAccess.getReturnTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFormalParameters
entryRuleFormalParameters 
:
{ before(grammarAccess.getFormalParametersRule()); }
	 ruleFormalParameters
{ after(grammarAccess.getFormalParametersRule()); } 
	 EOF 
;

// Rule FormalParameters
ruleFormalParameters
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFormalParametersAccess().getAlternatives()); }
(rule__FormalParameters__Alternatives)
{ after(grammarAccess.getFormalParametersAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFormalParameter
entryRuleFormalParameter 
:
{ before(grammarAccess.getFormalParameterRule()); }
	 ruleFormalParameter
{ after(grammarAccess.getFormalParameterRule()); } 
	 EOF 
;

// Rule FormalParameter
ruleFormalParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFormalParameterAccess().getGroup()); }
(rule__FormalParameter__Group__0)
{ after(grammarAccess.getFormalParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDef
entryRuleTypeDef 
:
{ before(grammarAccess.getTypeDefRule()); }
	 ruleTypeDef
{ after(grammarAccess.getTypeDefRule()); } 
	 EOF 
;

// Rule TypeDef
ruleTypeDef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeDefAccess().getGroup()); }
(rule__TypeDef__Group__0)
{ after(grammarAccess.getTypeDefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Entity__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getTypeDefParserRuleCall_0()); }
	ruleTypeDef
{ after(grammarAccess.getEntityAccess().getTypeDefParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEntityAccess().getGlobalBlockParserRuleCall_1()); }
	ruleGlobalBlock
{ after(grammarAccess.getEntityAccess().getGlobalBlockParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEntityAccess().getNativeDefParserRuleCall_2()); }
	ruleNativeDef
{ after(grammarAccess.getEntityAccess().getNativeDefParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getLiteralParserRuleCall_0()); }
	ruleLiteral
{ after(grammarAccess.getExprAccess().getLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExprAccess().getFunctionCallParserRuleCall_1()); }
	ruleFunctionCall
{ after(grammarAccess.getExprAccess().getFunctionCallParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExprAccess().getMultParserRuleCall_2()); }
	ruleMult
{ after(grammarAccess.getExprAccess().getMultParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getGroup_0()); }
(rule__Literal__Group_0__0)
{ after(grammarAccess.getLiteralAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getGroup_1()); }
(rule__Literal__Group_1__0)
{ after(grammarAccess.getLiteralAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__BoolValAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getBoolValTrueKeyword_1_1_0_0()); }

	'true' 

{ after(grammarAccess.getLiteralAccess().getBoolValTrueKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getBoolValFalseKeyword_1_1_0_1()); }

	'false' 

{ after(grammarAccess.getLiteralAccess().getBoolValFalseKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnTypeAccess().getGroup_0()); }
(rule__ReturnType__Group_0__0)
{ after(grammarAccess.getReturnTypeAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getReturnTypeAccess().getNameAssignment_1()); }
(rule__ReturnType__NameAssignment_1)
{ after(grammarAccess.getReturnTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getGroup_0()); }
(rule__FormalParameters__Group_0__0)
{ after(grammarAccess.getFormalParametersAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFormalParametersAccess().getGroup_1()); }
(rule__FormalParameters__Group_1__0)
{ after(grammarAccess.getFormalParametersAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__GlobalBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalBlock__Group__0__Impl
	rule__GlobalBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalBlockAccess().getGlobalBlockAction_0()); }
(

)
{ after(grammarAccess.getGlobalBlockAccess().getGlobalBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalBlock__Group__1__Impl
	rule__GlobalBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalBlockAccess().getGlobalsKeyword_1()); }

	'globals' 

{ after(grammarAccess.getGlobalBlockAccess().getGlobalsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalBlock__Group__2__Impl
	rule__GlobalBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalBlockAccess().getVarsAssignment_2()); }
(rule__GlobalBlock__VarsAssignment_2)*
{ after(grammarAccess.getGlobalBlockAccess().getVarsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalBlockAccess().getEndglobalsKeyword_3()); }

	'endglobals' 

{ after(grammarAccess.getGlobalBlockAccess().getEndglobalsKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Constant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__0__Impl
	rule__Constant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getConstantKeyword_0()); }

	'constant' 

{ after(grammarAccess.getConstantAccess().getConstantKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__1__Impl
	rule__Constant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getTypeAssignment_1()); }
(rule__Constant__TypeAssignment_1)
{ after(grammarAccess.getConstantAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__2__Impl
	rule__Constant__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNameAssignment_2()); }
(rule__Constant__NameAssignment_2)
{ after(grammarAccess.getConstantAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__3__Impl
	rule__Constant__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getConstantAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getValueAssignment_4()); }
(rule__Constant__ValueAssignment_4)
{ after(grammarAccess.getConstantAccess().getValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Mult__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mult__Group__0__Impl
	rule__Mult__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultAccess().getLeftAssignment_0()); }
(rule__Mult__LeftAssignment_0)
{ after(grammarAccess.getMultAccess().getLeftAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mult__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mult__Group__1__Impl
	rule__Mult__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultAccess().getAsteriskKeyword_1()); }

	'*' 

{ after(grammarAccess.getMultAccess().getAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mult__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mult__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultAccess().getRightAssignment_2()); }
(rule__Mult__RightAssignment_2)
{ after(grammarAccess.getMultAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getNameAssignment_0()); }
(rule__FunctionCall__NameAssignment_0)
{ after(grammarAccess.getFunctionCallAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_2()); }
(rule__FunctionCall__Group_2__0)?
{ after(grammarAccess.getFunctionCallAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionCall__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2__0__Impl
	rule__FunctionCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParametersAssignment_2_0()); }
(rule__FunctionCall__ParametersAssignment_2_0)
{ after(grammarAccess.getFunctionCallAccess().getParametersAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_2_1()); }
(rule__FunctionCall__Group_2_1__0)*
{ after(grammarAccess.getFunctionCallAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionCall__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2_1__0__Impl
	rule__FunctionCall__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParametersAssignment_2_1_1()); }
(rule__FunctionCall__ParametersAssignment_2_1_1)
{ after(grammarAccess.getFunctionCallAccess().getParametersAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Literal__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_0__0__Impl
	rule__Literal__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getIntLiteralAction_0_0()); }
(

)
{ after(grammarAccess.getLiteralAccess().getIntLiteralAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getIntValAssignment_0_1()); }
(rule__Literal__IntValAssignment_0_1)
{ after(grammarAccess.getLiteralAccess().getIntValAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Literal__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_1__0__Impl
	rule__Literal__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getBoolLiteralAction_1_0()); }
(

)
{ after(grammarAccess.getLiteralAccess().getBoolLiteralAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getBoolValAssignment_1_1()); }
(rule__Literal__BoolValAssignment_1_1)
{ after(grammarAccess.getLiteralAccess().getBoolValAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NativeDef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NativeDef__Group__0__Impl
	rule__NativeDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NativeDef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeDefAccess().getConstantKeyword_0()); }
(
	'constant' 
)?
{ after(grammarAccess.getNativeDefAccess().getConstantKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NativeDef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NativeDef__Group__1__Impl
	rule__NativeDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NativeDef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeDefAccess().getNativeKeyword_1()); }

	'native' 

{ after(grammarAccess.getNativeDefAccess().getNativeKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NativeDef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NativeDef__Group__2__Impl
	rule__NativeDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NativeDef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeDefAccess().getNameAssignment_2()); }
(rule__NativeDef__NameAssignment_2)
{ after(grammarAccess.getNativeDefAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NativeDef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NativeDef__Group__3__Impl
	rule__NativeDef__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NativeDef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeDefAccess().getTakesKeyword_3()); }

	'takes' 

{ after(grammarAccess.getNativeDefAccess().getTakesKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NativeDef__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NativeDef__Group__4__Impl
	rule__NativeDef__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NativeDef__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeDefAccess().getParamsAssignment_4()); }
(rule__NativeDef__ParamsAssignment_4)
{ after(grammarAccess.getNativeDefAccess().getParamsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NativeDef__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NativeDef__Group__5__Impl
	rule__NativeDef__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__NativeDef__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeDefAccess().getReturnsKeyword_5()); }

	'returns' 

{ after(grammarAccess.getNativeDefAccess().getReturnsKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NativeDef__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NativeDef__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NativeDef__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeDefAccess().getReturnTypeAssignment_6()); }
(rule__NativeDef__ReturnTypeAssignment_6)
{ after(grammarAccess.getNativeDefAccess().getReturnTypeAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ReturnType__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnType__Group_0__0__Impl
	rule__ReturnType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnType__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnTypeAccess().getReturnsNothingAction_0_0()); }
(

)
{ after(grammarAccess.getReturnTypeAccess().getReturnsNothingAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnType__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnType__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnType__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnTypeAccess().getNothingKeyword_0_1()); }

	'nothing' 

{ after(grammarAccess.getReturnTypeAccess().getNothingKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FormalParameters__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameters__Group_0__0__Impl
	rule__FormalParameters__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getParamNothingAction_0_0()); }
(

)
{ after(grammarAccess.getFormalParametersAccess().getParamNothingAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameters__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameters__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getNothingKeyword_0_1()); }

	'nothing' 

{ after(grammarAccess.getFormalParametersAccess().getNothingKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FormalParameters__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameters__Group_1__0__Impl
	rule__FormalParameters__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getParametersAssignment_1_0()); }
(rule__FormalParameters__ParametersAssignment_1_0)
{ after(grammarAccess.getFormalParametersAccess().getParametersAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameters__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameters__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getGroup_1_1()); }
(rule__FormalParameters__Group_1_1__0)*
{ after(grammarAccess.getFormalParametersAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FormalParameters__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameters__Group_1_1__0__Impl
	rule__FormalParameters__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getFormalParametersAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameters__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameters__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getParametersAssignment_1_1_1()); }
(rule__FormalParameters__ParametersAssignment_1_1_1)
{ after(grammarAccess.getFormalParametersAccess().getParametersAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FormalParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameter__Group__0__Impl
	rule__FormalParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterAccess().getTypeAssignment_0()); }
(rule__FormalParameter__TypeAssignment_0)
{ after(grammarAccess.getFormalParameterAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FormalParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FormalParameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterAccess().getNameAssignment_1()); }
(rule__FormalParameter__NameAssignment_1)
{ after(grammarAccess.getFormalParameterAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeDef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDef__Group__0__Impl
	rule__TypeDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getTypeKeyword_0()); }

	'type' 

{ after(grammarAccess.getTypeDefAccess().getTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDef__Group__1__Impl
	rule__TypeDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getNameAssignment_1()); }
(rule__TypeDef__NameAssignment_1)
{ after(grammarAccess.getTypeDefAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDef__Group__2__Impl
	rule__TypeDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getExtendsKeyword_2()); }

	'extends' 

{ after(grammarAccess.getTypeDefAccess().getExtendsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDef__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getExtendNameAssignment_3()); }
(rule__TypeDef__ExtendNameAssignment_3)
{ after(grammarAccess.getTypeDefAccess().getExtendNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Prog__ElemsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgAccess().getElemsEntityParserRuleCall_0()); }
	ruleEntity{ after(grammarAccess.getProgAccess().getElemsEntityParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalBlock__VarsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalBlockAccess().getVarsConstantParserRuleCall_2_0()); }
	ruleConstant{ after(grammarAccess.getGlobalBlockAccess().getVarsConstantParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getTypeIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getConstantAccess().getTypeIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__ValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getValueExprParserRuleCall_4_0()); }
	ruleExpr{ after(grammarAccess.getConstantAccess().getValueExprParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__LeftAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultAccess().getLeftLiteralParserRuleCall_0_0()); }
	ruleLiteral{ after(grammarAccess.getMultAccess().getLeftLiteralParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mult__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultAccess().getRightLiteralParserRuleCall_2_0()); }
	ruleLiteral{ after(grammarAccess.getMultAccess().getRightLiteralParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFunctionCallAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParametersAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParametersExprParserRuleCall_2_0_0()); }
	ruleExpr{ after(grammarAccess.getFunctionCallAccess().getParametersExprParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParametersAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getParametersExprParserRuleCall_2_1_1_0()); }
	ruleExpr{ after(grammarAccess.getFunctionCallAccess().getParametersExprParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__IntValAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getIntValINTTerminalRuleCall_0_1_0()); }
	RULE_INT{ after(grammarAccess.getLiteralAccess().getIntValINTTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__BoolValAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getBoolValAlternatives_1_1_0()); }
(rule__Literal__BoolValAlternatives_1_1_0)
{ after(grammarAccess.getLiteralAccess().getBoolValAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NativeDef__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeDefAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getNativeDefAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NativeDef__ParamsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeDefAccess().getParamsFormalParametersParserRuleCall_4_0()); }
	ruleFormalParameters{ after(grammarAccess.getNativeDefAccess().getParamsFormalParametersParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NativeDef__ReturnTypeAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeDefAccess().getReturnTypeReturnTypeParserRuleCall_6_0()); }
	ruleReturnType{ after(grammarAccess.getNativeDefAccess().getReturnTypeReturnTypeParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getReturnTypeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__ParametersAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getParametersFormalParameterParserRuleCall_1_0_0()); }
	ruleFormalParameter{ after(grammarAccess.getFormalParametersAccess().getParametersFormalParameterParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameters__ParametersAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParametersAccess().getParametersFormalParameterParserRuleCall_1_1_1_0()); }
	ruleFormalParameter{ after(grammarAccess.getFormalParametersAccess().getParametersFormalParameterParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterAccess().getTypeIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFormalParameterAccess().getTypeIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FormalParameter__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFormalParameterAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFormalParameterAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTypeDefAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__ExtendNameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDefAccess().getExtendNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getTypeDefAccess().getExtendNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


