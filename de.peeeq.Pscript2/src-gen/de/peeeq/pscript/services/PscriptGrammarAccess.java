/*
* generated by Xtext
*/

package de.peeeq.pscript.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class PscriptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cPackagesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackagesPackageDeclarationParserRuleCall_1_0 = (RuleCall)cPackagesAssignment_1.eContents().get(0);
		private final Assignment cPackagesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPackagesPackageDeclarationParserRuleCall_2_0 = (RuleCall)cPackagesAssignment_2.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Program:
		//	NL* packages+=PackageDeclaration packages+=PackageDeclaration* NL*;
		public ParserRule getRule() { return rule; }

		//NL* packages+=PackageDeclaration packages+=PackageDeclaration* NL*
		public Group getGroup() { return cGroup; }

		//NL*
		public RuleCall getNLTerminalRuleCall_0() { return cNLTerminalRuleCall_0; }

		//packages+=PackageDeclaration
		public Assignment getPackagesAssignment_1() { return cPackagesAssignment_1; }

		//PackageDeclaration
		public RuleCall getPackagesPackageDeclarationParserRuleCall_1_0() { return cPackagesPackageDeclarationParserRuleCall_1_0; }

		//packages+=PackageDeclaration*
		public Assignment getPackagesAssignment_2() { return cPackagesAssignment_2; }

		//PackageDeclaration
		public RuleCall getPackagesPackageDeclarationParserRuleCall_2_0() { return cPackagesPackageDeclarationParserRuleCall_2_0; }

		//NL*
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPackageDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cNLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cNLTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cImportsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_5_1_0 = (RuleCall)cImportsAssignment_5_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cElementsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cElementsEntityParserRuleCall_7_0_0 = (RuleCall)cElementsAssignment_7_0.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cNLTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//PackageDeclaration:
		//	{PackageDeclaration} "package" name=ID "{" NL (NL* imports+=Import)* NL* (elements+=Entity NL*)* "}" NL;
		public ParserRule getRule() { return rule; }

		//{PackageDeclaration} "package" name=ID "{" NL (NL* imports+=Import)* NL* (elements+=Entity NL*)* "}" NL
		public Group getGroup() { return cGroup; }

		//{PackageDeclaration}
		public Action getPackageDeclarationAction_0() { return cPackageDeclarationAction_0; }

		//"package"
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//NL
		public RuleCall getNLTerminalRuleCall_4() { return cNLTerminalRuleCall_4; }

		//(NL* imports+=Import)*
		public Group getGroup_5() { return cGroup_5; }

		//NL*
		public RuleCall getNLTerminalRuleCall_5_0() { return cNLTerminalRuleCall_5_0; }

		//imports+=Import
		public Assignment getImportsAssignment_5_1() { return cImportsAssignment_5_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_5_1_0() { return cImportsImportParserRuleCall_5_1_0; }

		//NL*
		public RuleCall getNLTerminalRuleCall_6() { return cNLTerminalRuleCall_6; }

		//(elements+=Entity NL*)*
		public Group getGroup_7() { return cGroup_7; }

		//elements+=Entity
		public Assignment getElementsAssignment_7_0() { return cElementsAssignment_7_0; }

		//Entity
		public RuleCall getElementsEntityParserRuleCall_7_0_0() { return cElementsEntityParserRuleCall_7_0_0; }

		//NL*
		public RuleCall getNLTerminalRuleCall_7_1() { return cNLTerminalRuleCall_7_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }

		//NL
		public RuleCall getNLTerminalRuleCall_9() { return cNLTerminalRuleCall_9; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceImportStringParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Import:
		//	"import" importedNamespace=ImportString NL;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=ImportString NL
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=ImportString
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//ImportString
		public RuleCall getImportedNamespaceImportStringParserRuleCall_1_0() { return cImportedNamespaceImportStringParserRuleCall_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }
	}

	public class ImportStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cAsteriskKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//ImportString:
		//	ID "." ("*" | ID);
		public ParserRule getRule() { return rule; }

		//ID "." ("*" | ID)
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//"*" | ID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"*"
		public Keyword getAsteriskKeyword_2_0() { return cAsteriskKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFuncDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInitBlockParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNativeFuncParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Entity:
		//	TypeDef | FuncDef | VarDef | InitBlock | NativeFunc;
		public ParserRule getRule() { return rule; }

		//TypeDef | FuncDef | VarDef | InitBlock | NativeFunc
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDef
		public RuleCall getTypeDefParserRuleCall_0() { return cTypeDefParserRuleCall_0; }

		//FuncDef
		public RuleCall getFuncDefParserRuleCall_1() { return cFuncDefParserRuleCall_1; }

		//VarDef
		public RuleCall getVarDefParserRuleCall_2() { return cVarDefParserRuleCall_2; }

		//InitBlock
		public RuleCall getInitBlockParserRuleCall_3() { return cInitBlockParserRuleCall_3; }

		//NativeFunc
		public RuleCall getNativeFuncParserRuleCall_4() { return cNativeFuncParserRuleCall_4; }
	}

	public class InitBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameInitKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyStatementsParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cNLTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//InitBlock:
		//	name="init" "{" NL body=Statements "}" NL;
		public ParserRule getRule() { return rule; }

		//name="init" "{" NL body=Statements "}" NL
		public Group getGroup() { return cGroup; }

		//name="init"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"init"
		public Keyword getNameInitKeyword_0_0() { return cNameInitKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//NL
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }

		//body=Statements
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//Statements
		public RuleCall getBodyStatementsParserRuleCall_3_0() { return cBodyStatementsParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//NL
		public RuleCall getNLTerminalRuleCall_5() { return cNLTerminalRuleCall_5; }
	}

	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNativeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeDef:
		//	NativeType | ClassDef;
		public ParserRule getRule() { return rule; }

		//NativeType | ClassDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//NativeType
		public RuleCall getNativeTypeParserRuleCall_0() { return cNativeTypeParserRuleCall_0; }

		//ClassDef
		public RuleCall getClassDefParserRuleCall_1() { return cClassDefParserRuleCall_1; }
	}

	public class NativeFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NativeFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNativeFuncAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNativeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersParameterDefParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersParameterDefParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cReturnsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTypeTypeExprParserRuleCall_6_1_0 = (RuleCall)cTypeAssignment_6_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//NativeFunc returns FuncDef:
		//	{NativeFunc} "native" name=ID "(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" ("returns"
		//	type=TypeExpr)? NL;
		public ParserRule getRule() { return rule; }

		//{NativeFunc} "native" name=ID "(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" ("returns"
		//type=TypeExpr)? NL
		public Group getGroup() { return cGroup; }

		//{NativeFunc}
		public Action getNativeFuncAction_0() { return cNativeFuncAction_0; }

		//"native"
		public Keyword getNativeKeyword_1() { return cNativeKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(parameters+=ParameterDef ("," parameters+=ParameterDef)*)?
		public Group getGroup_4() { return cGroup_4; }

		//parameters+=ParameterDef
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }

		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_4_0_0() { return cParametersParameterDefParserRuleCall_4_0_0; }

		//("," parameters+=ParameterDef)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//parameters+=ParameterDef
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }

		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_4_1_1_0() { return cParametersParameterDefParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//("returns" type=TypeExpr)?
		public Group getGroup_6() { return cGroup_6; }

		//"returns"
		public Keyword getReturnsKeyword_6_0() { return cReturnsKeyword_6_0; }

		//type=TypeExpr
		public Assignment getTypeAssignment_6_1() { return cTypeAssignment_6_1; }

		//TypeExpr
		public RuleCall getTypeTypeExprParserRuleCall_6_1_0() { return cTypeTypeExprParserRuleCall_6_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_7() { return cNLTerminalRuleCall_7; }
	}

	public class NativeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NativeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNativeTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNativetypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperNameTypeExprParserRuleCall_3_1_0 = (RuleCall)cSuperNameAssignment_3_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//NativeType returns TypeDef:
		//	{NativeType} "nativetype" name=ID ("extends" superName=TypeExpr)? NL;
		public ParserRule getRule() { return rule; }

		//{NativeType} "nativetype" name=ID ("extends" superName=TypeExpr)? NL
		public Group getGroup() { return cGroup; }

		//{NativeType}
		public Action getNativeTypeAction_0() { return cNativeTypeAction_0; }

		//"nativetype"
		public Keyword getNativetypeKeyword_1() { return cNativetypeKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" superName=TypeExpr)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superName=TypeExpr
		public Assignment getSuperNameAssignment_3_1() { return cSuperNameAssignment_3_1; }

		//TypeExpr
		public RuleCall getSuperNameTypeExprParserRuleCall_3_1_0() { return cSuperNameTypeExprParserRuleCall_3_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_4() { return cNLTerminalRuleCall_4; }
	}

	public class ClassDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cUnmanagedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cUnmanagedUnmanagedKeyword_1_0 = (Keyword)cUnmanagedAssignment_1.eContents().get(0);
		private final Keyword cClassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cNLTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final RuleCall cNLTerminalRuleCall_6_0 = (RuleCall)cAlternatives_6.eContents().get(0);
		private final Assignment cMembersAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cMembersClassSlotsParserRuleCall_6_1_0 = (RuleCall)cMembersAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cNLTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		/// * classes and their members * / ClassDef returns TypeDef:
		//	{ClassDef} unmanaged?="unmanaged"? "class" name=ID "{" NL (NL | members+=ClassSlots)* "}" NL;
		public ParserRule getRule() { return rule; }

		//{ClassDef} unmanaged?="unmanaged"? "class" name=ID "{" NL (NL | members+=ClassSlots)* "}" NL
		public Group getGroup() { return cGroup; }

		//{ClassDef}
		public Action getClassDefAction_0() { return cClassDefAction_0; }

		//unmanaged?="unmanaged"?
		public Assignment getUnmanagedAssignment_1() { return cUnmanagedAssignment_1; }

		//"unmanaged"
		public Keyword getUnmanagedUnmanagedKeyword_1_0() { return cUnmanagedUnmanagedKeyword_1_0; }

		//"class"
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//NL
		public RuleCall getNLTerminalRuleCall_5() { return cNLTerminalRuleCall_5; }

		//(NL | members+=ClassSlots)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//NL
		public RuleCall getNLTerminalRuleCall_6_0() { return cNLTerminalRuleCall_6_0; }

		//members+=ClassSlots
		public Assignment getMembersAssignment_6_1() { return cMembersAssignment_6_1; }

		//ClassSlots
		public RuleCall getMembersClassSlotsParserRuleCall_6_1_0() { return cMembersClassSlotsParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//NL
		public RuleCall getNLTerminalRuleCall_8() { return cNLTerminalRuleCall_8; }
	}

	public class ClassSlotsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassSlots");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstructorDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOnDestroyDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClassMemberParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ClassSlots:
		//	ConstructorDef | OnDestroyDef | ClassMember;
		public ParserRule getRule() { return rule; }

		//ConstructorDef | OnDestroyDef | ClassMember
		public Alternatives getAlternatives() { return cAlternatives; }

		//ConstructorDef
		public RuleCall getConstructorDefParserRuleCall_0() { return cConstructorDefParserRuleCall_0; }

		//OnDestroyDef
		public RuleCall getOnDestroyDefParserRuleCall_1() { return cOnDestroyDefParserRuleCall_1; }

		//ClassMember
		public RuleCall getClassMemberParserRuleCall_2() { return cClassMemberParserRuleCall_2; }
	}

	public class ClassMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFuncDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ClassMember:
		//	VarDef | FuncDef;
		public ParserRule getRule() { return rule; }

		//VarDef | FuncDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarDef
		public RuleCall getVarDefParserRuleCall_0() { return cVarDefParserRuleCall_0; }

		//FuncDef
		public RuleCall getFuncDefParserRuleCall_1() { return cFuncDefParserRuleCall_1; }
	}

	public class VarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cConstantAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cConstantValKeyword_1_0_0_0 = (Keyword)cConstantAssignment_1_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypeTypeExprParserRuleCall_1_0_1_0 = (RuleCall)cTypeAssignment_1_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_0_2_0 = (RuleCall)cNameAssignment_1_0_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cEAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cEExprParserRuleCall_1_0_4_0 = (RuleCall)cEAssignment_1_0_4.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cTypeTypeExprParserRuleCall_1_1_0_0 = (RuleCall)cTypeAssignment_1_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cEAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cEExprParserRuleCall_1_1_2_1_0 = (RuleCall)cEAssignment_1_1_2_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//VarDef:
		//	{VarDef} (constant?="val" type=TypeExpr? name=ID "=" e=Expr | type=TypeExpr name=ID ("=" e=Expr)?) NL;
		public ParserRule getRule() { return rule; }

		//{VarDef} (constant?="val" type=TypeExpr? name=ID "=" e=Expr | type=TypeExpr name=ID ("=" e=Expr)?) NL
		public Group getGroup() { return cGroup; }

		//{VarDef}
		public Action getVarDefAction_0() { return cVarDefAction_0; }

		//constant?="val" type=TypeExpr? name=ID "=" e=Expr | type=TypeExpr name=ID ("=" e=Expr)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//constant?="val" type=TypeExpr? name=ID "=" e=Expr
		public Group getGroup_1_0() { return cGroup_1_0; }

		//constant?="val"
		public Assignment getConstantAssignment_1_0_0() { return cConstantAssignment_1_0_0; }

		//"val"
		public Keyword getConstantValKeyword_1_0_0_0() { return cConstantValKeyword_1_0_0_0; }

		//type=TypeExpr?
		public Assignment getTypeAssignment_1_0_1() { return cTypeAssignment_1_0_1; }

		//TypeExpr
		public RuleCall getTypeTypeExprParserRuleCall_1_0_1_0() { return cTypeTypeExprParserRuleCall_1_0_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_0_2() { return cNameAssignment_1_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_2_0() { return cNameIDTerminalRuleCall_1_0_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_3() { return cEqualsSignKeyword_1_0_3; }

		//e=Expr
		public Assignment getEAssignment_1_0_4() { return cEAssignment_1_0_4; }

		//Expr
		public RuleCall getEExprParserRuleCall_1_0_4_0() { return cEExprParserRuleCall_1_0_4_0; }

		//type=TypeExpr name=ID ("=" e=Expr)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//type=TypeExpr
		public Assignment getTypeAssignment_1_1_0() { return cTypeAssignment_1_1_0; }

		//TypeExpr
		public RuleCall getTypeTypeExprParserRuleCall_1_1_0_0() { return cTypeTypeExprParserRuleCall_1_1_0_0; }

		//name=ID
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_1_0() { return cNameIDTerminalRuleCall_1_1_1_0; }

		//("=" e=Expr)?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_2_0() { return cEqualsSignKeyword_1_1_2_0; }

		//e=Expr
		public Assignment getEAssignment_1_1_2_1() { return cEAssignment_1_1_2_1; }

		//Expr
		public RuleCall getEExprParserRuleCall_1_1_2_1_0() { return cEExprParserRuleCall_1_1_2_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }
	}

	public class TypeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameTypeDefCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameTypeDefIDTerminalRuleCall_0_0_1 = (RuleCall)cNameTypeDefCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArrayAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cArrayArrayKeyword_1_0_0 = (Keyword)cArrayAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cSizesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cSizesINTTerminalRuleCall_1_1_1_0 = (RuleCall)cSizesAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//TypeExpr:
		//	name=[TypeDef] (array?="array" ("[" sizes+=INT "]")*)?;
		public ParserRule getRule() { return rule; }

		//name=[TypeDef] (array?="array" ("[" sizes+=INT "]")*)?
		public Group getGroup() { return cGroup; }

		//name=[TypeDef]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[TypeDef]
		public CrossReference getNameTypeDefCrossReference_0_0() { return cNameTypeDefCrossReference_0_0; }

		//ID
		public RuleCall getNameTypeDefIDTerminalRuleCall_0_0_1() { return cNameTypeDefIDTerminalRuleCall_0_0_1; }

		//(array?="array" ("[" sizes+=INT "]")*)?
		public Group getGroup_1() { return cGroup_1; }

		//array?="array"
		public Assignment getArrayAssignment_1_0() { return cArrayAssignment_1_0; }

		//"array"
		public Keyword getArrayArrayKeyword_1_0_0() { return cArrayArrayKeyword_1_0_0; }

		//("[" sizes+=INT "]")*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }

		//sizes+=INT
		public Assignment getSizesAssignment_1_1_1() { return cSizesAssignment_1_1_1; }

		//INT
		public RuleCall getSizesINTTerminalRuleCall_1_1_1_0() { return cSizesINTTerminalRuleCall_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2() { return cRightSquareBracketKeyword_1_1_2; }
	}

	public class ConstructorDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersParameterDefParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersParameterDefParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cNLTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyStatementsParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cNLTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		/// * buildin types are handled by nativetype defs in natives.pscript	
		//
		//   	| {TypeExprBuildin} 
		//
		//			name=(
		//
		//				  'integer' 
		//
		//				| 'real' 
		//
		//				| 'string'
		//
		//				| 'boolean'
		//
		//				| 'handle'
		//
		//				| 'code'
		//
		//			)
		//
		// * / / * functions * / ConstructorDef:
		//	"construct" "(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" "{" NL body=Statements "}" NL;
		public ParserRule getRule() { return rule; }

		//"construct" "(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" "{" NL body=Statements "}" NL
		public Group getGroup() { return cGroup; }

		//"construct"
		public Keyword getConstructKeyword_0() { return cConstructKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameters+=ParameterDef ("," parameters+=ParameterDef)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameters+=ParameterDef
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }

		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_2_0_0() { return cParametersParameterDefParserRuleCall_2_0_0; }

		//("," parameters+=ParameterDef)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameters+=ParameterDef
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_2_1_1_0() { return cParametersParameterDefParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//NL
		public RuleCall getNLTerminalRuleCall_5() { return cNLTerminalRuleCall_5; }

		//body=Statements
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//Statements
		public RuleCall getBodyStatementsParserRuleCall_6_0() { return cBodyStatementsParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//NL
		public RuleCall getNLTerminalRuleCall_8() { return cNLTerminalRuleCall_8; }
	}

	public class OnDestroyDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnDestroyDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnDestroyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyStatementsParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cNLTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//OnDestroyDef:
		//	"onDestroy" "{" NL body=Statements "}" NL;
		public ParserRule getRule() { return rule; }

		//"onDestroy" "{" NL body=Statements "}" NL
		public Group getGroup() { return cGroup; }

		//"onDestroy"
		public Keyword getOnDestroyKeyword_0() { return cOnDestroyKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//NL
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }

		//body=Statements
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//Statements
		public RuleCall getBodyStatementsParserRuleCall_3_0() { return cBodyStatementsParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//NL
		public RuleCall getNLTerminalRuleCall_5() { return cNLTerminalRuleCall_5; }
	}

	public class FuncDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FuncDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterDefParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterDefParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cReturnsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypeTypeExprParserRuleCall_5_1_0 = (RuleCall)cTypeAssignment_5_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cNLTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyStatementsParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final RuleCall cNLTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//FuncDef:
		//	"function" name=ID "(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" ("returns" type=TypeExpr)? "{"
		//	NL body=Statements "}" NL;
		public ParserRule getRule() { return rule; }

		//"function" name=ID "(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" ("returns" type=TypeExpr)? "{" NL
		//body=Statements "}" NL
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=ParameterDef ("," parameters+=ParameterDef)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=ParameterDef
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_3_0_0() { return cParametersParameterDefParserRuleCall_3_0_0; }

		//("," parameters+=ParameterDef)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=ParameterDef
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_3_1_1_0() { return cParametersParameterDefParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//("returns" type=TypeExpr)?
		public Group getGroup_5() { return cGroup_5; }

		//"returns"
		public Keyword getReturnsKeyword_5_0() { return cReturnsKeyword_5_0; }

		//type=TypeExpr
		public Assignment getTypeAssignment_5_1() { return cTypeAssignment_5_1; }

		//TypeExpr
		public RuleCall getTypeTypeExprParserRuleCall_5_1_0() { return cTypeTypeExprParserRuleCall_5_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//NL
		public RuleCall getNLTerminalRuleCall_7() { return cNLTerminalRuleCall_7; }

		//body=Statements
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }

		//Statements
		public RuleCall getBodyStatementsParserRuleCall_8_0() { return cBodyStatementsParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//NL
		public RuleCall getNLTerminalRuleCall_10() { return cNLTerminalRuleCall_10; }
	}

	public class ParameterDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeExprParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ParameterDef returns VarDef:
		//	{ParameterDef} type=TypeExpr name=ID;
		public ParserRule getRule() { return rule; }

		//{ParameterDef} type=TypeExpr name=ID
		public Group getGroup() { return cGroup; }

		//{ParameterDef}
		public Action getParameterDefAction_0() { return cParameterDefAction_0; }

		//type=TypeExpr
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeExpr
		public RuleCall getTypeTypeExprParserRuleCall_1_0() { return cTypeTypeExprParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class StatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_1_0 = (RuleCall)cStatementsAssignment_1_1.eContents().get(0);
		
		//Statements:
		//	{Statements} (NL | statements+=Statement)*;
		public ParserRule getRule() { return rule; }

		//{Statements} (NL | statements+=Statement)*
		public Group getGroup() { return cGroup; }

		//{Statements}
		public Action getStatementsAction_0() { return cStatementsAction_0; }

		//(NL | statements+=Statement)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//NL
		public RuleCall getNLTerminalRuleCall_1_0() { return cNLTerminalRuleCall_1_0; }

		//statements+=Statement
		public Assignment getStatementsAssignment_1_1() { return cStatementsAssignment_1_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_1_0() { return cStatementsStatementParserRuleCall_1_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStmtIfParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStmtWhileParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLocalVarDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStmtSetOrCallOrVarDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStmtReturnParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStmtDestroyParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStmtChangeRefCountParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		////| StmtLoop | StmtExitwhen
		//
		//Statement:
		//	StmtIf | StmtWhile | LocalVarDef | StmtSetOrCallOrVarDef | StmtReturn | StmtDestroy | StmtChangeRefCount;
		public ParserRule getRule() { return rule; }

		//StmtIf | StmtWhile | LocalVarDef | StmtSetOrCallOrVarDef | StmtReturn | StmtDestroy | StmtChangeRefCount
		public Alternatives getAlternatives() { return cAlternatives; }

		//StmtIf
		public RuleCall getStmtIfParserRuleCall_0() { return cStmtIfParserRuleCall_0; }

		//StmtWhile
		public RuleCall getStmtWhileParserRuleCall_1() { return cStmtWhileParserRuleCall_1; }

		//LocalVarDef
		public RuleCall getLocalVarDefParserRuleCall_2() { return cLocalVarDefParserRuleCall_2; }

		//StmtSetOrCallOrVarDef
		public RuleCall getStmtSetOrCallOrVarDefParserRuleCall_3() { return cStmtSetOrCallOrVarDefParserRuleCall_3; }

		//StmtReturn
		public RuleCall getStmtReturnParserRuleCall_4() { return cStmtReturnParserRuleCall_4; }

		//StmtDestroy
		public RuleCall getStmtDestroyParserRuleCall_5() { return cStmtDestroyParserRuleCall_5; }

		//StmtChangeRefCount
		public RuleCall getStmtChangeRefCountParserRuleCall_6() { return cStmtChangeRefCountParserRuleCall_6; }
	}

	public class StmtChangeRefCountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtChangeRefCount");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIncreaseAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cIncreaseIncrefKeyword_0_0_0 = (Keyword)cIncreaseAssignment_0_0.eContents().get(0);
		private final Assignment cDecreaseAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cDecreaseDecrefKeyword_0_1_0 = (Keyword)cDecreaseAssignment_0_1.eContents().get(0);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjExprParserRuleCall_1_0 = (RuleCall)cObjAssignment_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//StmtChangeRefCount:
		//	(increase?="incref" | decrease?="decref") obj=Expr NL;
		public ParserRule getRule() { return rule; }

		//(increase?="incref" | decrease?="decref") obj=Expr NL
		public Group getGroup() { return cGroup; }

		//increase?="incref" | decrease?="decref"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//increase?="incref"
		public Assignment getIncreaseAssignment_0_0() { return cIncreaseAssignment_0_0; }

		//"incref"
		public Keyword getIncreaseIncrefKeyword_0_0_0() { return cIncreaseIncrefKeyword_0_0_0; }

		//decrease?="decref"
		public Assignment getDecreaseAssignment_0_1() { return cDecreaseAssignment_0_1; }

		//"decref"
		public Keyword getDecreaseDecrefKeyword_0_1_0() { return cDecreaseDecrefKeyword_0_1_0; }

		//obj=Expr
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }

		//Expr
		public RuleCall getObjExprParserRuleCall_1_0() { return cObjExprParserRuleCall_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }
	}

	public class StmtDestroyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtDestroy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDestroyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cObjExprParserRuleCall_1_0 = (RuleCall)cObjAssignment_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//StmtDestroy:
		//	"destroy" obj=Expr NL;
		public ParserRule getRule() { return rule; }

		//"destroy" obj=Expr NL
		public Group getGroup() { return cGroup; }

		//"destroy"
		public Keyword getDestroyKeyword_0() { return cDestroyKeyword_0; }

		//obj=Expr
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }

		//Expr
		public RuleCall getObjExprParserRuleCall_1_0() { return cObjExprParserRuleCall_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }
	}

	public class StmtReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStmtReturnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEExprParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		/// * maybe later:
		//
		//StmtExitwhen:
		//
		//	'exitwhen' e=Expr NL
		//;
		//
		//
		//StmtLoop:
		//
		//	'loop' NL
		//
		//		body=Statements
		//
		//	'endloop' NL
		//;
		// * / StmtReturn:
		//	{StmtReturn} "return" e=Expr? NL;
		public ParserRule getRule() { return rule; }

		//{StmtReturn} "return" e=Expr? NL
		public Group getGroup() { return cGroup; }

		//{StmtReturn}
		public Action getStmtReturnAction_0() { return cStmtReturnAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//e=Expr?
		public Assignment getEAssignment_2() { return cEAssignment_2; }

		//Expr
		public RuleCall getEExprParserRuleCall_2_0() { return cEExprParserRuleCall_2_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }
	}

	public class StmtIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cThenBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBlockStatementsParserRuleCall_4_0 = (RuleCall)cThenBlockAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		private final Assignment cElseBlockAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cElseBlockStatementsParserRuleCall_6_3_0 = (RuleCall)cElseBlockAssignment_6_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final RuleCall cNLTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//StmtIf:
		//	"if" cond=Expr "{" NL thenBlock=Statements "}" ("else" "{" NL elseBlock=Statements "}")? NL;
		public ParserRule getRule() { return rule; }

		//"if" cond=Expr "{" NL thenBlock=Statements "}" ("else" "{" NL elseBlock=Statements "}")? NL
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//cond=Expr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }

		//Expr
		public RuleCall getCondExprParserRuleCall_1_0() { return cCondExprParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//NL
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }

		//thenBlock=Statements
		public Assignment getThenBlockAssignment_4() { return cThenBlockAssignment_4; }

		//Statements
		public RuleCall getThenBlockStatementsParserRuleCall_4_0() { return cThenBlockStatementsParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }

		//("else" "{" NL elseBlock=Statements "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//NL
		public RuleCall getNLTerminalRuleCall_6_2() { return cNLTerminalRuleCall_6_2; }

		//elseBlock=Statements
		public Assignment getElseBlockAssignment_6_3() { return cElseBlockAssignment_6_3; }

		//Statements
		public RuleCall getElseBlockStatementsParserRuleCall_6_3_0() { return cElseBlockStatementsParserRuleCall_6_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }

		//NL
		public RuleCall getNLTerminalRuleCall_7() { return cNLTerminalRuleCall_7; }
	}

	public class StmtWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyStatementsParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cNLTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//StmtWhile:
		//	"while" cond=Expr "{" NL body=Statements "}" NL;
		public ParserRule getRule() { return rule; }

		//"while" cond=Expr "{" NL body=Statements "}" NL
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//cond=Expr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }

		//Expr
		public RuleCall getCondExprParserRuleCall_1_0() { return cCondExprParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//NL
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }

		//body=Statements
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//Statements
		public RuleCall getBodyStatementsParserRuleCall_4_0() { return cBodyStatementsParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }

		//NL
		public RuleCall getNLTerminalRuleCall_6() { return cNLTerminalRuleCall_6; }
	}

	public class LocalVarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVarDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVarDefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cConstantAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cConstantValKeyword_0_1_0 = (Keyword)cConstantAssignment_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTypeTypeExprParserRuleCall_0_2_0 = (RuleCall)cTypeAssignment_0_2.eContents().get(0);
		private final Assignment cNameAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_0_3_0 = (RuleCall)cNameAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cEqualsSignKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cEAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cEExprParserRuleCall_0_4_1_0 = (RuleCall)cEAssignment_0_4_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_0_5 = (RuleCall)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVarDefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeExprParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cEAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cEExprParserRuleCall_1_3_1_0 = (RuleCall)cEAssignment_1_3_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		
		//// TODO requires backtracking
		//
		//LocalVarDef returns VarDef:
		//	{VarDef} constant?="val" type=TypeExpr? name=ID ("=" e=Expr)? NL | {VarDef} type=TypeExpr name=ID ("=" e=Expr)? NL;
		public ParserRule getRule() { return rule; }

		//{VarDef} constant?="val" type=TypeExpr? name=ID ("=" e=Expr)? NL | {VarDef} type=TypeExpr name=ID ("=" e=Expr)? NL
		public Alternatives getAlternatives() { return cAlternatives; }

		//{VarDef} constant?="val" type=TypeExpr? name=ID ("=" e=Expr)? NL
		public Group getGroup_0() { return cGroup_0; }

		//{VarDef}
		public Action getVarDefAction_0_0() { return cVarDefAction_0_0; }

		//constant?="val"
		public Assignment getConstantAssignment_0_1() { return cConstantAssignment_0_1; }

		//"val"
		public Keyword getConstantValKeyword_0_1_0() { return cConstantValKeyword_0_1_0; }

		//type=TypeExpr?
		public Assignment getTypeAssignment_0_2() { return cTypeAssignment_0_2; }

		//TypeExpr
		public RuleCall getTypeTypeExprParserRuleCall_0_2_0() { return cTypeTypeExprParserRuleCall_0_2_0; }

		//name=ID
		public Assignment getNameAssignment_0_3() { return cNameAssignment_0_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_3_0() { return cNameIDTerminalRuleCall_0_3_0; }

		//("=" e=Expr)?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//"="
		public Keyword getEqualsSignKeyword_0_4_0() { return cEqualsSignKeyword_0_4_0; }

		//e=Expr
		public Assignment getEAssignment_0_4_1() { return cEAssignment_0_4_1; }

		//Expr
		public RuleCall getEExprParserRuleCall_0_4_1_0() { return cEExprParserRuleCall_0_4_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_0_5() { return cNLTerminalRuleCall_0_5; }

		//{VarDef} type=TypeExpr name=ID ("=" e=Expr)? NL
		public Group getGroup_1() { return cGroup_1; }

		//{VarDef}
		public Action getVarDefAction_1_0() { return cVarDefAction_1_0; }

		//type=TypeExpr
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//TypeExpr
		public RuleCall getTypeTypeExprParserRuleCall_1_1_0() { return cTypeTypeExprParserRuleCall_1_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }

		//("=" e=Expr)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"="
		public Keyword getEqualsSignKeyword_1_3_0() { return cEqualsSignKeyword_1_3_0; }

		//e=Expr
		public Assignment getEAssignment_1_3_1() { return cEAssignment_1_3_1; }

		//Expr
		public RuleCall getEExprParserRuleCall_1_3_1_0() { return cEExprParserRuleCall_1_3_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_1_4() { return cNLTerminalRuleCall_1_4; }
	}

	public class StmtSetOrCallOrVarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtSetOrCallOrVarDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStmtCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEExprParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cStmtSetLeftAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignmentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOpAssignmentOpAssignmentParserRuleCall_2_1_0 = (RuleCall)cOpAssignmentAssignment_2_1.eContents().get(0);
		private final Assignment cRightAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRightExprParserRuleCall_2_2_0 = (RuleCall)cRightAssignment_2_2.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//StmtSetOrCallOrVarDef:
		//	{StmtCall} e=Expr ({StmtSet.left=current} opAssignment=OpAssignment right=Expr)? NL;
		public ParserRule getRule() { return rule; }

		//{StmtCall} e=Expr ({StmtSet.left=current} opAssignment=OpAssignment right=Expr)? NL
		public Group getGroup() { return cGroup; }

		//{StmtCall}
		public Action getStmtCallAction_0() { return cStmtCallAction_0; }

		//e=Expr
		public Assignment getEAssignment_1() { return cEAssignment_1; }

		//Expr
		public RuleCall getEExprParserRuleCall_1_0() { return cEExprParserRuleCall_1_0; }

		//({StmtSet.left=current} opAssignment=OpAssignment right=Expr)?
		public Group getGroup_2() { return cGroup_2; }

		//{StmtSet.left=current}
		public Action getStmtSetLeftAction_2_0() { return cStmtSetLeftAction_2_0; }

		//opAssignment=OpAssignment
		public Assignment getOpAssignmentAssignment_2_1() { return cOpAssignmentAssignment_2_1; }

		//OpAssignment
		public RuleCall getOpAssignmentOpAssignmentParserRuleCall_2_1_0() { return cOpAssignmentOpAssignmentParserRuleCall_2_1_0; }

		//right=Expr
		public Assignment getRightAssignment_2_2() { return cRightAssignment_2_2; }

		//Expr
		public RuleCall getRightExprParserRuleCall_2_2_0() { return cRightExprParserRuleCall_2_2_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }
	}

	public class OpAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOpAssignAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOpPlusAssignAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOpMinusAssignAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//OpAssignment:
		//	{OpAssign} "=" | {OpPlusAssign} "+=" | {OpMinusAssign} "-=";
		public ParserRule getRule() { return rule; }

		//{OpAssign} "=" | {OpPlusAssign} "+=" | {OpMinusAssign} "-="
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OpAssign} "="
		public Group getGroup_0() { return cGroup_0; }

		//{OpAssign}
		public Action getOpAssignAction_0_0() { return cOpAssignAction_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//{OpPlusAssign} "+="
		public Group getGroup_1() { return cGroup_1; }

		//{OpPlusAssign}
		public Action getOpPlusAssignAction_1_0() { return cOpPlusAssignAction_1_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1_1() { return cPlusSignEqualsSignKeyword_1_1; }

		//{OpMinusAssign} "-="
		public Group getGroup_2() { return cGroup_2; }

		//{OpMinusAssign}
		public Action getOpMinusAssignAction_2_0() { return cOpMinusAssignAction_2_0; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_2_1() { return cHyphenMinusEqualsSignKeyword_2_1; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final RuleCall cExprOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// * expressions * / / * operator precedence (weakest first):
		//
		//or
		//
		//and
		//
		//== !=				// 
		//
		//<= >= < >			// comparisons
		//
		//+ -
		//
		// * / % mod div		// mod and div work on integers, / and % for reals
		//
		//
		//
		//
		//
		//+ -					// unary
		//
		//not					// unary
		//
		//
		//
		//.					// member
		//
		// * / Expr:
		//	ExprOr;
		public ParserRule getRule() { return rule; }

		//ExprOr
		public RuleCall getExprOrParserRuleCall() { return cExprOrParserRuleCall; }
	}

	public class ExprOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpOrKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// TODO this is not really an expression, it should only be used at top level
		//
		//ExprOr returns Expr:
		//	ExprAnd ({ExprOr.left=current} op="or" right=ExprAnd)*;
		public ParserRule getRule() { return rule; }

		//ExprAnd ({ExprOr.left=current} op="or" right=ExprAnd)*
		public Group getGroup() { return cGroup; }

		//ExprAnd
		public RuleCall getExprAndParserRuleCall_0() { return cExprAndParserRuleCall_0; }

		//({ExprOr.left=current} op="or" right=ExprAnd)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprOr.left=current}
		public Action getExprOrLeftAction_1_0() { return cExprOrLeftAction_1_0; }

		//op="or"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"or"
		public Keyword getOpOrKeyword_1_1_0() { return cOpOrKeyword_1_1_0; }

		//right=ExprAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprAnd
		public RuleCall getRightExprAndParserRuleCall_1_2_0() { return cRightExprAndParserRuleCall_1_2_0; }
	}

	public class ExprAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAndKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprAnd returns Expr:
		//	ExprEquality ({ExprAnd.left=current} op="and" right=ExprEquality)*;
		public ParserRule getRule() { return rule; }

		//ExprEquality ({ExprAnd.left=current} op="and" right=ExprEquality)*
		public Group getGroup() { return cGroup; }

		//ExprEquality
		public RuleCall getExprEqualityParserRuleCall_0() { return cExprEqualityParserRuleCall_0; }

		//({ExprAnd.left=current} op="and" right=ExprEquality)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprAnd.left=current}
		public Action getExprAndLeftAction_1_0() { return cExprAndLeftAction_1_0; }

		//op="and"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"and"
		public Keyword getOpAndKeyword_1_1_0() { return cOpAndKeyword_1_1_0; }

		//right=ExprEquality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprEquality
		public RuleCall getRightExprEqualityParserRuleCall_1_2_0() { return cRightExprEqualityParserRuleCall_1_2_0; }
	}

	public class ExprEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprEquality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOpEqualityParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprEquality returns Expr:
		//	ExprComparison ({ExprEquality.left=current} op=OpEquality right=ExprComparison)*;
		public ParserRule getRule() { return rule; }

		//ExprComparison ({ExprEquality.left=current} op=OpEquality right=ExprComparison)*
		public Group getGroup() { return cGroup; }

		//ExprComparison
		public RuleCall getExprComparisonParserRuleCall_0() { return cExprComparisonParserRuleCall_0; }

		//({ExprEquality.left=current} op=OpEquality right=ExprComparison)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprEquality.left=current}
		public Action getExprEqualityLeftAction_1_0() { return cExprEqualityLeftAction_1_0; }

		//op=OpEquality
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OpEquality
		public RuleCall getOpOpEqualityParserRuleCall_1_1_0() { return cOpOpEqualityParserRuleCall_1_1_0; }

		//right=ExprComparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprComparison
		public RuleCall getRightExprComparisonParserRuleCall_1_2_0() { return cRightExprComparisonParserRuleCall_1_2_0; }
	}

	public class OpEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOpEqualsAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOpUnequalsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//OpEquality:
		//	{OpEquals} "==" | {OpUnequals} "!=";
		public ParserRule getRule() { return rule; }

		//{OpEquals} "==" | {OpUnequals} "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OpEquals} "=="
		public Group getGroup_0() { return cGroup_0; }

		//{OpEquals}
		public Action getOpEqualsAction_0_0() { return cOpEqualsAction_0_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0_1() { return cEqualsSignEqualsSignKeyword_0_1; }

		//{OpUnequals} "!="
		public Group getGroup_1() { return cGroup_1; }

		//{OpUnequals}
		public Action getOpUnequalsAction_1_0() { return cOpUnequalsAction_1_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_1() { return cExclamationMarkEqualsSignKeyword_1_1; }
	}

	public class ExprComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprComparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprAdditiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOpComparisonParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprAdditiveParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprComparison returns Expr:
		//	ExprAdditive ({ExprComparison.left=current} op=OpComparison right=ExprAdditive)*;
		public ParserRule getRule() { return rule; }

		//ExprAdditive ({ExprComparison.left=current} op=OpComparison right=ExprAdditive)*
		public Group getGroup() { return cGroup; }

		//ExprAdditive
		public RuleCall getExprAdditiveParserRuleCall_0() { return cExprAdditiveParserRuleCall_0; }

		//({ExprComparison.left=current} op=OpComparison right=ExprAdditive)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprComparison.left=current}
		public Action getExprComparisonLeftAction_1_0() { return cExprComparisonLeftAction_1_0; }

		//op=OpComparison
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OpComparison
		public RuleCall getOpOpComparisonParserRuleCall_1_1_0() { return cOpOpComparisonParserRuleCall_1_1_0; }

		//right=ExprAdditive
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprAdditive
		public RuleCall getRightExprAdditiveParserRuleCall_1_2_0() { return cRightExprAdditiveParserRuleCall_1_2_0; }
	}

	public class OpComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpComparison");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOpLessEqAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOpLessAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOpGreaterEqAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cOpGreaterAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//OpComparison:
		//	{OpLessEq} "<=" | {OpLess} "<" | {OpGreaterEq} ">=" | {OpGreater} ">";
		public ParserRule getRule() { return rule; }

		//{OpLessEq} "<=" | {OpLess} "<" | {OpGreaterEq} ">=" | {OpGreater} ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OpLessEq} "<="
		public Group getGroup_0() { return cGroup_0; }

		//{OpLessEq}
		public Action getOpLessEqAction_0_0() { return cOpLessEqAction_0_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_0_1() { return cLessThanSignEqualsSignKeyword_0_1; }

		//{OpLess} "<"
		public Group getGroup_1() { return cGroup_1; }

		//{OpLess}
		public Action getOpLessAction_1_0() { return cOpLessAction_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }

		//{OpGreaterEq} ">="
		public Group getGroup_2() { return cGroup_2; }

		//{OpGreaterEq}
		public Action getOpGreaterEqAction_2_0() { return cOpGreaterEqAction_2_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_2_1() { return cGreaterThanSignEqualsSignKeyword_2_1; }

		//{OpGreater} ">"
		public Group getGroup_3() { return cGroup_3; }

		//{OpGreater}
		public Action getOpGreaterAction_3_0() { return cOpGreaterAction_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_1() { return cGreaterThanSignKeyword_3_1; }
	}

	public class ExprAdditiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAdditive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprMultParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprAdditiveLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOpAdditiveParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprMultParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprAdditive returns Expr:
		//	ExprMult ({ExprAdditive.left=current} op=OpAdditive right=ExprMult)*;
		public ParserRule getRule() { return rule; }

		//ExprMult ({ExprAdditive.left=current} op=OpAdditive right=ExprMult)*
		public Group getGroup() { return cGroup; }

		//ExprMult
		public RuleCall getExprMultParserRuleCall_0() { return cExprMultParserRuleCall_0; }

		//({ExprAdditive.left=current} op=OpAdditive right=ExprMult)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprAdditive.left=current}
		public Action getExprAdditiveLeftAction_1_0() { return cExprAdditiveLeftAction_1_0; }

		//op=OpAdditive
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OpAdditive
		public RuleCall getOpOpAdditiveParserRuleCall_1_1_0() { return cOpOpAdditiveParserRuleCall_1_1_0; }

		//right=ExprMult
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprMult
		public RuleCall getRightExprMultParserRuleCall_1_2_0() { return cRightExprMultParserRuleCall_1_2_0; }
	}

	public class OpAdditiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAdditive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOpPlusAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOpMinusAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//OpAdditive:
		//	{OpPlus} "+" | {OpMinus} "-";
		public ParserRule getRule() { return rule; }

		//{OpPlus} "+" | {OpMinus} "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OpPlus} "+"
		public Group getGroup_0() { return cGroup_0; }

		//{OpPlus}
		public Action getOpPlusAction_0_0() { return cOpPlusAction_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }

		//{OpMinus} "-"
		public Group getGroup_1() { return cGroup_1; }

		//{OpMinus}
		public Action getOpMinusAction_1_0() { return cOpMinusAction_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
	}

	public class ExprMultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprMult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprSignParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprMultLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOpMultiplicativeParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprSignParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprMult returns Expr:
		//	ExprSign ({ExprMult.left=current} op=OpMultiplicative right=ExprSign)*;
		public ParserRule getRule() { return rule; }

		//ExprSign ({ExprMult.left=current} op=OpMultiplicative right=ExprSign)*
		public Group getGroup() { return cGroup; }

		//ExprSign
		public RuleCall getExprSignParserRuleCall_0() { return cExprSignParserRuleCall_0; }

		//({ExprMult.left=current} op=OpMultiplicative right=ExprSign)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprMult.left=current}
		public Action getExprMultLeftAction_1_0() { return cExprMultLeftAction_1_0; }

		//op=OpMultiplicative
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OpMultiplicative
		public RuleCall getOpOpMultiplicativeParserRuleCall_1_1_0() { return cOpOpMultiplicativeParserRuleCall_1_1_0; }

		//right=ExprSign
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprSign
		public RuleCall getRightExprSignParserRuleCall_1_2_0() { return cRightExprSignParserRuleCall_1_2_0; }
	}

	public class OpMultiplicativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMultiplicative");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOpMultAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOpDivRealAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOpModRealAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cOpModIntAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cModKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cOpDivIntAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cDivKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//OpMultiplicative:
		//	{OpMult} "*" | {OpDivReal} "/" | {OpModReal} "%" | {OpModInt} "mod" | {OpDivInt} "div";
		public ParserRule getRule() { return rule; }

		//{OpMult} "*" | {OpDivReal} "/" | {OpModReal} "%" | {OpModInt} "mod" | {OpDivInt} "div"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OpMult} "*"
		public Group getGroup_0() { return cGroup_0; }

		//{OpMult}
		public Action getOpMultAction_0_0() { return cOpMultAction_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_0_1() { return cAsteriskKeyword_0_1; }

		//{OpDivReal} "/"
		public Group getGroup_1() { return cGroup_1; }

		//{OpDivReal}
		public Action getOpDivRealAction_1_0() { return cOpDivRealAction_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }

		//{OpModReal} "%"
		public Group getGroup_2() { return cGroup_2; }

		//{OpModReal}
		public Action getOpModRealAction_2_0() { return cOpModRealAction_2_0; }

		//"%"
		public Keyword getPercentSignKeyword_2_1() { return cPercentSignKeyword_2_1; }

		//{OpModInt} "mod"
		public Group getGroup_3() { return cGroup_3; }

		//{OpModInt}
		public Action getOpModIntAction_3_0() { return cOpModIntAction_3_0; }

		//"mod"
		public Keyword getModKeyword_3_1() { return cModKeyword_3_1; }

		//{OpDivInt} "div"
		public Group getGroup_4() { return cGroup_4; }

		//{OpDivInt}
		public Action getOpDivIntAction_4_0() { return cOpDivIntAction_4_0; }

		//"div"
		public Keyword getDivKeyword_4_1() { return cDivKeyword_4_1; }
	}

	public class ExprSignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprSign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExprSignAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOpOpAdditiveParserRuleCall_0_1_0 = (RuleCall)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cRightAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRightExprNotParserRuleCall_0_2_0 = (RuleCall)cRightAssignment_0_2.eContents().get(0);
		private final RuleCall cExprNotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExprSign returns Expr:
		//	{ExprSign} op=OpAdditive right=ExprNot | ExprNot;
		public ParserRule getRule() { return rule; }

		//{ExprSign} op=OpAdditive right=ExprNot | ExprNot
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ExprSign} op=OpAdditive right=ExprNot
		public Group getGroup_0() { return cGroup_0; }

		//{ExprSign}
		public Action getExprSignAction_0_0() { return cExprSignAction_0_0; }

		//op=OpAdditive
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//OpAdditive
		public RuleCall getOpOpAdditiveParserRuleCall_0_1_0() { return cOpOpAdditiveParserRuleCall_0_1_0; }

		//right=ExprNot
		public Assignment getRightAssignment_0_2() { return cRightAssignment_0_2; }

		//ExprNot
		public RuleCall getRightExprNotParserRuleCall_0_2_0() { return cRightExprNotParserRuleCall_0_2_0; }

		//ExprNot
		public RuleCall getExprNotParserRuleCall_1() { return cExprNotParserRuleCall_1; }
	}

	public class ExprNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExprNotAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRightAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRightExprMemberParserRuleCall_0_2_0 = (RuleCall)cRightAssignment_0_2.eContents().get(0);
		private final RuleCall cExprMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExprNot returns Expr:
		//	{ExprNot} "not" right=ExprMember | ExprMember;
		public ParserRule getRule() { return rule; }

		//{ExprNot} "not" right=ExprMember | ExprMember
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ExprNot} "not" right=ExprMember
		public Group getGroup_0() { return cGroup_0; }

		//{ExprNot}
		public Action getExprNotAction_0_0() { return cExprNotAction_0_0; }

		//"not"
		public Keyword getNotKeyword_0_1() { return cNotKeyword_0_1; }

		//right=ExprMember
		public Assignment getRightAssignment_0_2() { return cRightAssignment_0_2; }

		//ExprMember
		public RuleCall getRightExprMemberParserRuleCall_0_2_0() { return cRightExprMemberParserRuleCall_0_2_0; }

		//ExprMember
		public RuleCall getExprMemberParserRuleCall_1() { return cExprMemberParserRuleCall_1; }
	}

	public class ExprMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprSingleParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprMemberLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cMessageAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cMessageExprMemberRightParserRuleCall_1_2_0 = (RuleCall)cMessageAssignment_1_2.eContents().get(0);
		
		////ExprCustomOperator returns Expr:
		//
		////	ExprMember ({ExprCustomOperator.left=current} op=OPERATOR right=Expr)*
		//
		////; 
		//
		//ExprMember returns Expr:
		//	ExprSingle ({ExprMember.left=current} "." message=ExprMemberRight)*;
		public ParserRule getRule() { return rule; }

		//ExprSingle ({ExprMember.left=current} "." message=ExprMemberRight)*
		public Group getGroup() { return cGroup; }

		//ExprSingle
		public RuleCall getExprSingleParserRuleCall_0() { return cExprSingleParserRuleCall_0; }

		//({ExprMember.left=current} "." message=ExprMemberRight)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprMember.left=current}
		public Action getExprMemberLeftAction_1_0() { return cExprMemberLeftAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//message=ExprMemberRight
		public Assignment getMessageAssignment_1_2() { return cMessageAssignment_1_2; }

		//ExprMemberRight
		public RuleCall getMessageExprMemberRightParserRuleCall_1_2_0() { return cMessageExprMemberRightParserRuleCall_1_2_0; }
	}

	public class ExprMemberRightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprMemberRight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameValClassMemberCrossReference_0_0 = (CrossReference)cNameValAssignment_0.eContents().get(0);
		private final RuleCall cNameValClassMemberIDTerminalRuleCall_0_0_1 = (RuleCall)cNameValClassMemberCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cParamsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cParamsExprParserRuleCall_1_1_0_0 = (RuleCall)cParamsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cParamsExprParserRuleCall_1_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		////	  {ExprMemberVar}   nameVal=[VarDef]
		////	| {ExprMemberMethod} nameVal=[FuncDef] parameters=ExprList
		//
		////	| {ExprMemberMethod} nameVal=[FuncDef] '(' ')'
		//ExprMemberRight:
		//	nameVal=[ClassMember] ("(" (params+=Expr ("," params+=Expr)*)? ")")?;
		public ParserRule getRule() { return rule; }

		//nameVal=[ClassMember] ("(" (params+=Expr ("," params+=Expr)*)? ")")?
		public Group getGroup() { return cGroup; }

		//nameVal=[ClassMember]
		public Assignment getNameValAssignment_0() { return cNameValAssignment_0; }

		//[ClassMember]
		public CrossReference getNameValClassMemberCrossReference_0_0() { return cNameValClassMemberCrossReference_0_0; }

		//ID
		public RuleCall getNameValClassMemberIDTerminalRuleCall_0_0_1() { return cNameValClassMemberIDTerminalRuleCall_0_0_1; }

		//("(" (params+=Expr ("," params+=Expr)*)? ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//(params+=Expr ("," params+=Expr)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//params+=Expr
		public Assignment getParamsAssignment_1_1_0() { return cParamsAssignment_1_1_0; }

		//Expr
		public RuleCall getParamsExprParserRuleCall_1_1_0_0() { return cParamsExprParserRuleCall_1_1_0_0; }

		//("," params+=Expr)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//params+=Expr
		public Assignment getParamsAssignment_1_1_1_1() { return cParamsAssignment_1_1_1_1; }

		//Expr
		public RuleCall getParamsExprParserRuleCall_1_1_1_1_0() { return cParamsExprParserRuleCall_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class ExprSingleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprSingle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprAtomicParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExprIntValAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cIntValAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIntValINTTerminalRuleCall_2_1_0 = (RuleCall)cIntValAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cExprNumValAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cNumValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNumValNumberParserRuleCall_3_1_0 = (RuleCall)cNumValAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cExprStrvalAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cStrValAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStrValSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cStrValAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cExprBoolValAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cBoolValAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Alternatives cBoolValAlternatives_5_1_0 = (Alternatives)cBoolValAssignment_5_1.eContents().get(0);
		private final Keyword cBoolValTrueKeyword_5_1_0_0 = (Keyword)cBoolValAlternatives_5_1_0.eContents().get(0);
		private final Keyword cBoolValFalseKeyword_5_1_0_1 = (Keyword)cBoolValAlternatives_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cExprFuncRefAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cFunctionKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cNameValAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cNameValFuncDefCrossReference_6_2_0 = (CrossReference)cNameValAssignment_6_2.eContents().get(0);
		private final RuleCall cNameValFuncDefIDTerminalRuleCall_6_2_0_1 = (RuleCall)cNameValFuncDefCrossReference_6_2_0.eContents().get(1);
		
		////	| {ExprBuildinFunction} 'buildin' name=ID (parameters=ExprList | '(' ')')
		//
		////	| {ExprBuildinOperator} 'buildin' '(' left=Expr op=OPERATOR right=Expr ')'	
		//
		////	| buildin?='buildin' name=ID parameters=ExprList
		//
		////	| buildin?='buildin' name=ID '(' ')'
		//
		////	| buildin?='buildin' '(' left=Expr op=OPERATOR right=Expr ')' // build in operators
		//
		//ExprSingle returns Expr:
		//	ExprAtomic | "(" Expr ")" | {ExprIntVal} intVal=INT | {ExprNumVal} numVal=Number | {ExprStrval} strVal=STRING |
		//	{ExprBoolVal} boolVal=("true" | "false") | {ExprFuncRef} "function" nameVal=[FuncDef];
		public ParserRule getRule() { return rule; }

		//ExprAtomic | "(" Expr ")" | {ExprIntVal} intVal=INT | {ExprNumVal} numVal=Number | {ExprStrval} strVal=STRING |
		//{ExprBoolVal} boolVal=("true" | "false") | {ExprFuncRef} "function" nameVal=[FuncDef]
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExprAtomic
		public RuleCall getExprAtomicParserRuleCall_0() { return cExprAtomicParserRuleCall_0; }

		//"(" Expr ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Expr
		public RuleCall getExprParserRuleCall_1_1() { return cExprParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//{ExprIntVal} intVal=INT
		public Group getGroup_2() { return cGroup_2; }

		//{ExprIntVal}
		public Action getExprIntValAction_2_0() { return cExprIntValAction_2_0; }

		//intVal=INT
		public Assignment getIntValAssignment_2_1() { return cIntValAssignment_2_1; }

		//INT
		public RuleCall getIntValINTTerminalRuleCall_2_1_0() { return cIntValINTTerminalRuleCall_2_1_0; }

		//{ExprNumVal} numVal=Number
		public Group getGroup_3() { return cGroup_3; }

		//{ExprNumVal}
		public Action getExprNumValAction_3_0() { return cExprNumValAction_3_0; }

		//numVal=Number
		public Assignment getNumValAssignment_3_1() { return cNumValAssignment_3_1; }

		//Number
		public RuleCall getNumValNumberParserRuleCall_3_1_0() { return cNumValNumberParserRuleCall_3_1_0; }

		//{ExprStrval} strVal=STRING
		public Group getGroup_4() { return cGroup_4; }

		//{ExprStrval}
		public Action getExprStrvalAction_4_0() { return cExprStrvalAction_4_0; }

		//strVal=STRING
		public Assignment getStrValAssignment_4_1() { return cStrValAssignment_4_1; }

		//STRING
		public RuleCall getStrValSTRINGTerminalRuleCall_4_1_0() { return cStrValSTRINGTerminalRuleCall_4_1_0; }

		//{ExprBoolVal} boolVal=("true" | "false")
		public Group getGroup_5() { return cGroup_5; }

		//{ExprBoolVal}
		public Action getExprBoolValAction_5_0() { return cExprBoolValAction_5_0; }

		//boolVal=("true" | "false")
		public Assignment getBoolValAssignment_5_1() { return cBoolValAssignment_5_1; }

		//"true" | "false"
		public Alternatives getBoolValAlternatives_5_1_0() { return cBoolValAlternatives_5_1_0; }

		//"true"
		public Keyword getBoolValTrueKeyword_5_1_0_0() { return cBoolValTrueKeyword_5_1_0_0; }

		//"false"
		public Keyword getBoolValFalseKeyword_5_1_0_1() { return cBoolValFalseKeyword_5_1_0_1; }

		//{ExprFuncRef} "function" nameVal=[FuncDef]
		public Group getGroup_6() { return cGroup_6; }

		//{ExprFuncRef}
		public Action getExprFuncRefAction_6_0() { return cExprFuncRefAction_6_0; }

		//"function"
		public Keyword getFunctionKeyword_6_1() { return cFunctionKeyword_6_1; }

		//nameVal=[FuncDef]
		public Assignment getNameValAssignment_6_2() { return cNameValAssignment_6_2; }

		//[FuncDef]
		public CrossReference getNameValFuncDefCrossReference_6_2_0() { return cNameValFuncDefCrossReference_6_2_0; }

		//ID
		public RuleCall getNameValFuncDefIDTerminalRuleCall_6_2_0_1() { return cNameValFuncDefIDTerminalRuleCall_6_2_0_1; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Number:
		//	INT "." INT;
		public ParserRule getRule() { return rule; }

		//INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class ExprAtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAtomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprFunctionCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExprIdentifierAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cNameValVarDefCrossReference_1_1_0 = (CrossReference)cNameValAssignment_1_1.eContents().get(0);
		private final RuleCall cNameValVarDefIDTerminalRuleCall_1_1_0_1 = (RuleCall)cNameValVarDefCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArrayIndizesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArrayIndizesExprParserRuleCall_1_2_1_0 = (RuleCall)cArrayIndizesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExprNewObjectAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cNewKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cClassDefAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cClassDefClassDefCrossReference_2_2_0 = (CrossReference)cClassDefAssignment_2_2.eContents().get(0);
		private final RuleCall cClassDefClassDefIDTerminalRuleCall_2_2_0_1 = (RuleCall)cClassDefClassDefCrossReference_2_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Assignment cParamsAssignment_2_4_0 = (Assignment)cGroup_2_4.eContents().get(0);
		private final RuleCall cParamsExprParserRuleCall_2_4_0_0 = (RuleCall)cParamsAssignment_2_4_0.eContents().get(0);
		private final Group cGroup_2_4_1 = (Group)cGroup_2_4.eContents().get(1);
		private final Keyword cCommaKeyword_2_4_1_0 = (Keyword)cGroup_2_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_4_1_1 = (Assignment)cGroup_2_4_1.eContents().get(1);
		private final RuleCall cParamsExprParserRuleCall_2_4_1_1_0 = (RuleCall)cParamsAssignment_2_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cExprThisAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cThisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//ExprAtomic returns Expr:
		//	ExprFunctionCall | {ExprIdentifier} nameVal=[VarDef] ("[" arrayIndizes+=Expr "]")* | {ExprNewObject} "new"
		//	classDef=[ClassDef] "(" (params+=Expr ("," params+=Expr)*)? ")" | {ExprThis} "this";
		public ParserRule getRule() { return rule; }

		//ExprFunctionCall | {ExprIdentifier} nameVal=[VarDef] ("[" arrayIndizes+=Expr "]")* | {ExprNewObject} "new"
		//classDef=[ClassDef] "(" (params+=Expr ("," params+=Expr)*)? ")" | {ExprThis} "this"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExprFunctionCall
		public RuleCall getExprFunctionCallParserRuleCall_0() { return cExprFunctionCallParserRuleCall_0; }

		//{ExprIdentifier} nameVal=[VarDef] ("[" arrayIndizes+=Expr "]")*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprIdentifier}
		public Action getExprIdentifierAction_1_0() { return cExprIdentifierAction_1_0; }

		//nameVal=[VarDef]
		public Assignment getNameValAssignment_1_1() { return cNameValAssignment_1_1; }

		//[VarDef]
		public CrossReference getNameValVarDefCrossReference_1_1_0() { return cNameValVarDefCrossReference_1_1_0; }

		//ID
		public RuleCall getNameValVarDefIDTerminalRuleCall_1_1_0_1() { return cNameValVarDefIDTerminalRuleCall_1_1_0_1; }

		//("[" arrayIndizes+=Expr "]")*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }

		//arrayIndizes+=Expr
		public Assignment getArrayIndizesAssignment_1_2_1() { return cArrayIndizesAssignment_1_2_1; }

		//Expr
		public RuleCall getArrayIndizesExprParserRuleCall_1_2_1_0() { return cArrayIndizesExprParserRuleCall_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_2() { return cRightSquareBracketKeyword_1_2_2; }

		//{ExprNewObject} "new" classDef=[ClassDef] "(" (params+=Expr ("," params+=Expr)*)? ")"
		public Group getGroup_2() { return cGroup_2; }

		//{ExprNewObject}
		public Action getExprNewObjectAction_2_0() { return cExprNewObjectAction_2_0; }

		//"new"
		public Keyword getNewKeyword_2_1() { return cNewKeyword_2_1; }

		//classDef=[ClassDef]
		public Assignment getClassDefAssignment_2_2() { return cClassDefAssignment_2_2; }

		//[ClassDef]
		public CrossReference getClassDefClassDefCrossReference_2_2_0() { return cClassDefClassDefCrossReference_2_2_0; }

		//ID
		public RuleCall getClassDefClassDefIDTerminalRuleCall_2_2_0_1() { return cClassDefClassDefIDTerminalRuleCall_2_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_3() { return cLeftParenthesisKeyword_2_3; }

		//(params+=Expr ("," params+=Expr)*)?
		public Group getGroup_2_4() { return cGroup_2_4; }

		//params+=Expr
		public Assignment getParamsAssignment_2_4_0() { return cParamsAssignment_2_4_0; }

		//Expr
		public RuleCall getParamsExprParserRuleCall_2_4_0_0() { return cParamsExprParserRuleCall_2_4_0_0; }

		//("," params+=Expr)*
		public Group getGroup_2_4_1() { return cGroup_2_4_1; }

		//","
		public Keyword getCommaKeyword_2_4_1_0() { return cCommaKeyword_2_4_1_0; }

		//params+=Expr
		public Assignment getParamsAssignment_2_4_1_1() { return cParamsAssignment_2_4_1_1; }

		//Expr
		public RuleCall getParamsExprParserRuleCall_2_4_1_1_0() { return cParamsExprParserRuleCall_2_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }

		//{ExprThis} "this"
		public Group getGroup_3() { return cGroup_3; }

		//{ExprThis}
		public Action getExprThisAction_3_0() { return cExprThisAction_3_0; }

		//"this"
		public Keyword getThisKeyword_3_1() { return cThisKeyword_3_1; }
	}

	public class ExprFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExprFunctioncallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameValFuncDefCrossReference_1_0 = (CrossReference)cNameValAssignment_1.eContents().get(0);
		private final RuleCall cNameValFuncDefIDTerminalRuleCall_1_0_1 = (RuleCall)cNameValFuncDefCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsExprParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsExprParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExprFunctionCall returns Expr:
		//	{ExprFunctioncall} nameVal=[FuncDef] "(" (params+=Expr ("," params+=Expr)*)? ")";
		public ParserRule getRule() { return rule; }

		//{ExprFunctioncall} nameVal=[FuncDef] "(" (params+=Expr ("," params+=Expr)*)? ")"
		public Group getGroup() { return cGroup; }

		//{ExprFunctioncall}
		public Action getExprFunctioncallAction_0() { return cExprFunctioncallAction_0; }

		//nameVal=[FuncDef]
		public Assignment getNameValAssignment_1() { return cNameValAssignment_1; }

		//[FuncDef]
		public CrossReference getNameValFuncDefCrossReference_1_0() { return cNameValFuncDefCrossReference_1_0; }

		//ID
		public RuleCall getNameValFuncDefIDTerminalRuleCall_1_0_1() { return cNameValFuncDefIDTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=Expr ("," params+=Expr)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=Expr
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//Expr
		public RuleCall getParamsExprParserRuleCall_3_0_0() { return cParamsExprParserRuleCall_3_0_0; }

		//("," params+=Expr)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=Expr
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//Expr
		public RuleCall getParamsExprParserRuleCall_3_1_1_0() { return cParamsExprParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private ProgramElements pProgram;
	private PackageDeclarationElements pPackageDeclaration;
	private ImportElements pImport;
	private ImportStringElements pImportString;
	private EntityElements pEntity;
	private InitBlockElements pInitBlock;
	private TypeDefElements pTypeDef;
	private NativeFuncElements pNativeFunc;
	private NativeTypeElements pNativeType;
	private ClassDefElements pClassDef;
	private ClassSlotsElements pClassSlots;
	private ClassMemberElements pClassMember;
	private VarDefElements pVarDef;
	private TypeExprElements pTypeExpr;
	private ConstructorDefElements pConstructorDef;
	private OnDestroyDefElements pOnDestroyDef;
	private FuncDefElements pFuncDef;
	private ParameterDefElements pParameterDef;
	private StatementsElements pStatements;
	private StatementElements pStatement;
	private StmtChangeRefCountElements pStmtChangeRefCount;
	private StmtDestroyElements pStmtDestroy;
	private StmtReturnElements pStmtReturn;
	private StmtIfElements pStmtIf;
	private StmtWhileElements pStmtWhile;
	private LocalVarDefElements pLocalVarDef;
	private StmtSetOrCallOrVarDefElements pStmtSetOrCallOrVarDef;
	private OpAssignmentElements pOpAssignment;
	private ExprElements pExpr;
	private ExprOrElements pExprOr;
	private ExprAndElements pExprAnd;
	private ExprEqualityElements pExprEquality;
	private OpEqualityElements pOpEquality;
	private ExprComparisonElements pExprComparison;
	private OpComparisonElements pOpComparison;
	private ExprAdditiveElements pExprAdditive;
	private OpAdditiveElements pOpAdditive;
	private ExprMultElements pExprMult;
	private OpMultiplicativeElements pOpMultiplicative;
	private ExprSignElements pExprSign;
	private ExprNotElements pExprNot;
	private ExprMemberElements pExprMember;
	private ExprMemberRightElements pExprMemberRight;
	private ExprSingleElements pExprSingle;
	private NumberElements pNumber;
	private ExprAtomicElements pExprAtomic;
	private ExprFunctionCallElements pExprFunctionCall;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tNL;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public PscriptGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Program:
	//	NL* packages+=PackageDeclaration packages+=PackageDeclaration* NL*;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//PackageDeclaration:
	//	{PackageDeclaration} "package" name=ID "{" NL (NL* imports+=Import)* NL* (elements+=Entity NL*)* "}" NL;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return (pPackageDeclaration != null) ? pPackageDeclaration : (pPackageDeclaration = new PackageDeclarationElements());
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=ImportString NL;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//ImportString:
	//	ID "." ("*" | ID);
	public ImportStringElements getImportStringAccess() {
		return (pImportString != null) ? pImportString : (pImportString = new ImportStringElements());
	}
	
	public ParserRule getImportStringRule() {
		return getImportStringAccess().getRule();
	}

	//Entity:
	//	TypeDef | FuncDef | VarDef | InitBlock | NativeFunc;
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//InitBlock:
	//	name="init" "{" NL body=Statements "}" NL;
	public InitBlockElements getInitBlockAccess() {
		return (pInitBlock != null) ? pInitBlock : (pInitBlock = new InitBlockElements());
	}
	
	public ParserRule getInitBlockRule() {
		return getInitBlockAccess().getRule();
	}

	//TypeDef:
	//	NativeType | ClassDef;
	public TypeDefElements getTypeDefAccess() {
		return (pTypeDef != null) ? pTypeDef : (pTypeDef = new TypeDefElements());
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}

	//NativeFunc returns FuncDef:
	//	{NativeFunc} "native" name=ID "(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" ("returns"
	//	type=TypeExpr)? NL;
	public NativeFuncElements getNativeFuncAccess() {
		return (pNativeFunc != null) ? pNativeFunc : (pNativeFunc = new NativeFuncElements());
	}
	
	public ParserRule getNativeFuncRule() {
		return getNativeFuncAccess().getRule();
	}

	//NativeType returns TypeDef:
	//	{NativeType} "nativetype" name=ID ("extends" superName=TypeExpr)? NL;
	public NativeTypeElements getNativeTypeAccess() {
		return (pNativeType != null) ? pNativeType : (pNativeType = new NativeTypeElements());
	}
	
	public ParserRule getNativeTypeRule() {
		return getNativeTypeAccess().getRule();
	}

	/// * classes and their members * / ClassDef returns TypeDef:
	//	{ClassDef} unmanaged?="unmanaged"? "class" name=ID "{" NL (NL | members+=ClassSlots)* "}" NL;
	public ClassDefElements getClassDefAccess() {
		return (pClassDef != null) ? pClassDef : (pClassDef = new ClassDefElements());
	}
	
	public ParserRule getClassDefRule() {
		return getClassDefAccess().getRule();
	}

	//ClassSlots:
	//	ConstructorDef | OnDestroyDef | ClassMember;
	public ClassSlotsElements getClassSlotsAccess() {
		return (pClassSlots != null) ? pClassSlots : (pClassSlots = new ClassSlotsElements());
	}
	
	public ParserRule getClassSlotsRule() {
		return getClassSlotsAccess().getRule();
	}

	//ClassMember:
	//	VarDef | FuncDef;
	public ClassMemberElements getClassMemberAccess() {
		return (pClassMember != null) ? pClassMember : (pClassMember = new ClassMemberElements());
	}
	
	public ParserRule getClassMemberRule() {
		return getClassMemberAccess().getRule();
	}

	//VarDef:
	//	{VarDef} (constant?="val" type=TypeExpr? name=ID "=" e=Expr | type=TypeExpr name=ID ("=" e=Expr)?) NL;
	public VarDefElements getVarDefAccess() {
		return (pVarDef != null) ? pVarDef : (pVarDef = new VarDefElements());
	}
	
	public ParserRule getVarDefRule() {
		return getVarDefAccess().getRule();
	}

	//TypeExpr:
	//	name=[TypeDef] (array?="array" ("[" sizes+=INT "]")*)?;
	public TypeExprElements getTypeExprAccess() {
		return (pTypeExpr != null) ? pTypeExpr : (pTypeExpr = new TypeExprElements());
	}
	
	public ParserRule getTypeExprRule() {
		return getTypeExprAccess().getRule();
	}

	/// * buildin types are handled by nativetype defs in natives.pscript	
	//
	//   	| {TypeExprBuildin} 
	//
	//			name=(
	//
	//				  'integer' 
	//
	//				| 'real' 
	//
	//				| 'string'
	//
	//				| 'boolean'
	//
	//				| 'handle'
	//
	//				| 'code'
	//
	//			)
	//
	// * / / * functions * / ConstructorDef:
	//	"construct" "(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" "{" NL body=Statements "}" NL;
	public ConstructorDefElements getConstructorDefAccess() {
		return (pConstructorDef != null) ? pConstructorDef : (pConstructorDef = new ConstructorDefElements());
	}
	
	public ParserRule getConstructorDefRule() {
		return getConstructorDefAccess().getRule();
	}

	//OnDestroyDef:
	//	"onDestroy" "{" NL body=Statements "}" NL;
	public OnDestroyDefElements getOnDestroyDefAccess() {
		return (pOnDestroyDef != null) ? pOnDestroyDef : (pOnDestroyDef = new OnDestroyDefElements());
	}
	
	public ParserRule getOnDestroyDefRule() {
		return getOnDestroyDefAccess().getRule();
	}

	//FuncDef:
	//	"function" name=ID "(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" ("returns" type=TypeExpr)? "{"
	//	NL body=Statements "}" NL;
	public FuncDefElements getFuncDefAccess() {
		return (pFuncDef != null) ? pFuncDef : (pFuncDef = new FuncDefElements());
	}
	
	public ParserRule getFuncDefRule() {
		return getFuncDefAccess().getRule();
	}

	//ParameterDef returns VarDef:
	//	{ParameterDef} type=TypeExpr name=ID;
	public ParameterDefElements getParameterDefAccess() {
		return (pParameterDef != null) ? pParameterDef : (pParameterDef = new ParameterDefElements());
	}
	
	public ParserRule getParameterDefRule() {
		return getParameterDefAccess().getRule();
	}

	//Statements:
	//	{Statements} (NL | statements+=Statement)*;
	public StatementsElements getStatementsAccess() {
		return (pStatements != null) ? pStatements : (pStatements = new StatementsElements());
	}
	
	public ParserRule getStatementsRule() {
		return getStatementsAccess().getRule();
	}

	////| StmtLoop | StmtExitwhen
	//
	//Statement:
	//	StmtIf | StmtWhile | LocalVarDef | StmtSetOrCallOrVarDef | StmtReturn | StmtDestroy | StmtChangeRefCount;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//StmtChangeRefCount:
	//	(increase?="incref" | decrease?="decref") obj=Expr NL;
	public StmtChangeRefCountElements getStmtChangeRefCountAccess() {
		return (pStmtChangeRefCount != null) ? pStmtChangeRefCount : (pStmtChangeRefCount = new StmtChangeRefCountElements());
	}
	
	public ParserRule getStmtChangeRefCountRule() {
		return getStmtChangeRefCountAccess().getRule();
	}

	//StmtDestroy:
	//	"destroy" obj=Expr NL;
	public StmtDestroyElements getStmtDestroyAccess() {
		return (pStmtDestroy != null) ? pStmtDestroy : (pStmtDestroy = new StmtDestroyElements());
	}
	
	public ParserRule getStmtDestroyRule() {
		return getStmtDestroyAccess().getRule();
	}

	/// * maybe later:
	//
	//StmtExitwhen:
	//
	//	'exitwhen' e=Expr NL
	//;
	//
	//
	//StmtLoop:
	//
	//	'loop' NL
	//
	//		body=Statements
	//
	//	'endloop' NL
	//;
	// * / StmtReturn:
	//	{StmtReturn} "return" e=Expr? NL;
	public StmtReturnElements getStmtReturnAccess() {
		return (pStmtReturn != null) ? pStmtReturn : (pStmtReturn = new StmtReturnElements());
	}
	
	public ParserRule getStmtReturnRule() {
		return getStmtReturnAccess().getRule();
	}

	//StmtIf:
	//	"if" cond=Expr "{" NL thenBlock=Statements "}" ("else" "{" NL elseBlock=Statements "}")? NL;
	public StmtIfElements getStmtIfAccess() {
		return (pStmtIf != null) ? pStmtIf : (pStmtIf = new StmtIfElements());
	}
	
	public ParserRule getStmtIfRule() {
		return getStmtIfAccess().getRule();
	}

	//StmtWhile:
	//	"while" cond=Expr "{" NL body=Statements "}" NL;
	public StmtWhileElements getStmtWhileAccess() {
		return (pStmtWhile != null) ? pStmtWhile : (pStmtWhile = new StmtWhileElements());
	}
	
	public ParserRule getStmtWhileRule() {
		return getStmtWhileAccess().getRule();
	}

	//// TODO requires backtracking
	//
	//LocalVarDef returns VarDef:
	//	{VarDef} constant?="val" type=TypeExpr? name=ID ("=" e=Expr)? NL | {VarDef} type=TypeExpr name=ID ("=" e=Expr)? NL;
	public LocalVarDefElements getLocalVarDefAccess() {
		return (pLocalVarDef != null) ? pLocalVarDef : (pLocalVarDef = new LocalVarDefElements());
	}
	
	public ParserRule getLocalVarDefRule() {
		return getLocalVarDefAccess().getRule();
	}

	//StmtSetOrCallOrVarDef:
	//	{StmtCall} e=Expr ({StmtSet.left=current} opAssignment=OpAssignment right=Expr)? NL;
	public StmtSetOrCallOrVarDefElements getStmtSetOrCallOrVarDefAccess() {
		return (pStmtSetOrCallOrVarDef != null) ? pStmtSetOrCallOrVarDef : (pStmtSetOrCallOrVarDef = new StmtSetOrCallOrVarDefElements());
	}
	
	public ParserRule getStmtSetOrCallOrVarDefRule() {
		return getStmtSetOrCallOrVarDefAccess().getRule();
	}

	//OpAssignment:
	//	{OpAssign} "=" | {OpPlusAssign} "+=" | {OpMinusAssign} "-=";
	public OpAssignmentElements getOpAssignmentAccess() {
		return (pOpAssignment != null) ? pOpAssignment : (pOpAssignment = new OpAssignmentElements());
	}
	
	public ParserRule getOpAssignmentRule() {
		return getOpAssignmentAccess().getRule();
	}

	/// * expressions * / / * operator precedence (weakest first):
	//
	//or
	//
	//and
	//
	//== !=				// 
	//
	//<= >= < >			// comparisons
	//
	//+ -
	//
	// * / % mod div		// mod and div work on integers, / and % for reals
	//
	//
	//
	//
	//
	//+ -					// unary
	//
	//not					// unary
	//
	//
	//
	//.					// member
	//
	// * / Expr:
	//	ExprOr;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//// TODO this is not really an expression, it should only be used at top level
	//
	//ExprOr returns Expr:
	//	ExprAnd ({ExprOr.left=current} op="or" right=ExprAnd)*;
	public ExprOrElements getExprOrAccess() {
		return (pExprOr != null) ? pExprOr : (pExprOr = new ExprOrElements());
	}
	
	public ParserRule getExprOrRule() {
		return getExprOrAccess().getRule();
	}

	//ExprAnd returns Expr:
	//	ExprEquality ({ExprAnd.left=current} op="and" right=ExprEquality)*;
	public ExprAndElements getExprAndAccess() {
		return (pExprAnd != null) ? pExprAnd : (pExprAnd = new ExprAndElements());
	}
	
	public ParserRule getExprAndRule() {
		return getExprAndAccess().getRule();
	}

	//ExprEquality returns Expr:
	//	ExprComparison ({ExprEquality.left=current} op=OpEquality right=ExprComparison)*;
	public ExprEqualityElements getExprEqualityAccess() {
		return (pExprEquality != null) ? pExprEquality : (pExprEquality = new ExprEqualityElements());
	}
	
	public ParserRule getExprEqualityRule() {
		return getExprEqualityAccess().getRule();
	}

	//OpEquality:
	//	{OpEquals} "==" | {OpUnequals} "!=";
	public OpEqualityElements getOpEqualityAccess() {
		return (pOpEquality != null) ? pOpEquality : (pOpEquality = new OpEqualityElements());
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//ExprComparison returns Expr:
	//	ExprAdditive ({ExprComparison.left=current} op=OpComparison right=ExprAdditive)*;
	public ExprComparisonElements getExprComparisonAccess() {
		return (pExprComparison != null) ? pExprComparison : (pExprComparison = new ExprComparisonElements());
	}
	
	public ParserRule getExprComparisonRule() {
		return getExprComparisonAccess().getRule();
	}

	//OpComparison:
	//	{OpLessEq} "<=" | {OpLess} "<" | {OpGreaterEq} ">=" | {OpGreater} ">";
	public OpComparisonElements getOpComparisonAccess() {
		return (pOpComparison != null) ? pOpComparison : (pOpComparison = new OpComparisonElements());
	}
	
	public ParserRule getOpComparisonRule() {
		return getOpComparisonAccess().getRule();
	}

	//ExprAdditive returns Expr:
	//	ExprMult ({ExprAdditive.left=current} op=OpAdditive right=ExprMult)*;
	public ExprAdditiveElements getExprAdditiveAccess() {
		return (pExprAdditive != null) ? pExprAdditive : (pExprAdditive = new ExprAdditiveElements());
	}
	
	public ParserRule getExprAdditiveRule() {
		return getExprAdditiveAccess().getRule();
	}

	//OpAdditive:
	//	{OpPlus} "+" | {OpMinus} "-";
	public OpAdditiveElements getOpAdditiveAccess() {
		return (pOpAdditive != null) ? pOpAdditive : (pOpAdditive = new OpAdditiveElements());
	}
	
	public ParserRule getOpAdditiveRule() {
		return getOpAdditiveAccess().getRule();
	}

	//ExprMult returns Expr:
	//	ExprSign ({ExprMult.left=current} op=OpMultiplicative right=ExprSign)*;
	public ExprMultElements getExprMultAccess() {
		return (pExprMult != null) ? pExprMult : (pExprMult = new ExprMultElements());
	}
	
	public ParserRule getExprMultRule() {
		return getExprMultAccess().getRule();
	}

	//OpMultiplicative:
	//	{OpMult} "*" | {OpDivReal} "/" | {OpModReal} "%" | {OpModInt} "mod" | {OpDivInt} "div";
	public OpMultiplicativeElements getOpMultiplicativeAccess() {
		return (pOpMultiplicative != null) ? pOpMultiplicative : (pOpMultiplicative = new OpMultiplicativeElements());
	}
	
	public ParserRule getOpMultiplicativeRule() {
		return getOpMultiplicativeAccess().getRule();
	}

	//ExprSign returns Expr:
	//	{ExprSign} op=OpAdditive right=ExprNot | ExprNot;
	public ExprSignElements getExprSignAccess() {
		return (pExprSign != null) ? pExprSign : (pExprSign = new ExprSignElements());
	}
	
	public ParserRule getExprSignRule() {
		return getExprSignAccess().getRule();
	}

	//ExprNot returns Expr:
	//	{ExprNot} "not" right=ExprMember | ExprMember;
	public ExprNotElements getExprNotAccess() {
		return (pExprNot != null) ? pExprNot : (pExprNot = new ExprNotElements());
	}
	
	public ParserRule getExprNotRule() {
		return getExprNotAccess().getRule();
	}

	////ExprCustomOperator returns Expr:
	//
	////	ExprMember ({ExprCustomOperator.left=current} op=OPERATOR right=Expr)*
	//
	////; 
	//
	//ExprMember returns Expr:
	//	ExprSingle ({ExprMember.left=current} "." message=ExprMemberRight)*;
	public ExprMemberElements getExprMemberAccess() {
		return (pExprMember != null) ? pExprMember : (pExprMember = new ExprMemberElements());
	}
	
	public ParserRule getExprMemberRule() {
		return getExprMemberAccess().getRule();
	}

	////	  {ExprMemberVar}   nameVal=[VarDef]
	////	| {ExprMemberMethod} nameVal=[FuncDef] parameters=ExprList
	//
	////	| {ExprMemberMethod} nameVal=[FuncDef] '(' ')'
	//ExprMemberRight:
	//	nameVal=[ClassMember] ("(" (params+=Expr ("," params+=Expr)*)? ")")?;
	public ExprMemberRightElements getExprMemberRightAccess() {
		return (pExprMemberRight != null) ? pExprMemberRight : (pExprMemberRight = new ExprMemberRightElements());
	}
	
	public ParserRule getExprMemberRightRule() {
		return getExprMemberRightAccess().getRule();
	}

	////	| {ExprBuildinFunction} 'buildin' name=ID (parameters=ExprList | '(' ')')
	//
	////	| {ExprBuildinOperator} 'buildin' '(' left=Expr op=OPERATOR right=Expr ')'	
	//
	////	| buildin?='buildin' name=ID parameters=ExprList
	//
	////	| buildin?='buildin' name=ID '(' ')'
	//
	////	| buildin?='buildin' '(' left=Expr op=OPERATOR right=Expr ')' // build in operators
	//
	//ExprSingle returns Expr:
	//	ExprAtomic | "(" Expr ")" | {ExprIntVal} intVal=INT | {ExprNumVal} numVal=Number | {ExprStrval} strVal=STRING |
	//	{ExprBoolVal} boolVal=("true" | "false") | {ExprFuncRef} "function" nameVal=[FuncDef];
	public ExprSingleElements getExprSingleAccess() {
		return (pExprSingle != null) ? pExprSingle : (pExprSingle = new ExprSingleElements());
	}
	
	public ParserRule getExprSingleRule() {
		return getExprSingleAccess().getRule();
	}

	//Number:
	//	INT "." INT;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//ExprAtomic returns Expr:
	//	ExprFunctionCall | {ExprIdentifier} nameVal=[VarDef] ("[" arrayIndizes+=Expr "]")* | {ExprNewObject} "new"
	//	classDef=[ClassDef] "(" (params+=Expr ("," params+=Expr)*)? ")" | {ExprThis} "this";
	public ExprAtomicElements getExprAtomicAccess() {
		return (pExprAtomic != null) ? pExprAtomic : (pExprAtomic = new ExprAtomicElements());
	}
	
	public ParserRule getExprAtomicRule() {
		return getExprAtomicAccess().getRule();
	}

	//ExprFunctionCall returns Expr:
	//	{ExprFunctioncall} nameVal=[FuncDef] "(" (params+=Expr ("," params+=Expr)*)? ")";
	public ExprFunctionCallElements getExprFunctionCallAccess() {
		return (pExprFunctionCall != null) ? pExprFunctionCall : (pExprFunctionCall = new ExprFunctionCallElements());
	}
	
	public ParserRule getExprFunctionCallRule() {
		return getExprFunctionCallAccess().getRule();
	}

	//// Pseudo rules to add common super types:
	//
	//// Terminals:
	//
	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//// TODO special ints (hex, oct, ascii)
	//
	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//// multiline comments changed to consume whitespace to make the javadoc work		
	//
	//terminal ML_COMMENT:
	//	"/ *"->"* /" (" " | "\t" | "\n" | "\r")*;
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")*;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	("\\\n\r" | "\\\n" | "\\\r" | "\\\r\n" | " " | "\t")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal NL:
	//	"\n\r" | "\n" | "\r" | "\r\n";
	public TerminalRule getNLRule() {
		return (tNL != null) ? tNL : (tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NL"));
	} 

	////terminal OPERATOR : ('+'|'-'|'*'|'/'|'%'|'$'|'<'|'>'|'='|'~'|'!'|'^'|'|'|'&'|':')+;
	//
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
