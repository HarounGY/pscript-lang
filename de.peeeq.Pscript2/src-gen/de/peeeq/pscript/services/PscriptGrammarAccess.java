/*
* generated by Xtext
*/

package de.peeeq.pscript.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class PscriptGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cPackagesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackagesPackageDeclarationParserRuleCall_1_0 = (RuleCall)cPackagesAssignment_1.eContents().get(0);
		private final Assignment cPackagesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPackagesPackageDeclarationParserRuleCall_2_0 = (RuleCall)cPackagesAssignment_2.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Program:
		//	NL* packages+=PackageDeclaration packages+=PackageDeclaration* NL*;
		public ParserRule getRule() { return rule; }

		//NL* packages+=PackageDeclaration packages+=PackageDeclaration* NL*
		public Group getGroup() { return cGroup; }

		//NL*
		public RuleCall getNLTerminalRuleCall_0() { return cNLTerminalRuleCall_0; }

		//packages+=PackageDeclaration
		public Assignment getPackagesAssignment_1() { return cPackagesAssignment_1; }

		//PackageDeclaration
		public RuleCall getPackagesPackageDeclarationParserRuleCall_1_0() { return cPackagesPackageDeclarationParserRuleCall_1_0; }

		//packages+=PackageDeclaration*
		public Assignment getPackagesAssignment_2() { return cPackagesAssignment_2; }

		//PackageDeclaration
		public RuleCall getPackagesPackageDeclarationParserRuleCall_2_0() { return cPackagesPackageDeclarationParserRuleCall_2_0; }

		//NL*
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPackageDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cNLTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cImportsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_3_1_0 = (RuleCall)cImportsAssignment_3_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cElementsEntityParserRuleCall_5_0_0 = (RuleCall)cElementsAssignment_5_0.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cEndpackageKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cNLTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//PackageDeclaration:
		//	{PackageDeclaration} "package" name=ID (NL* imports+=Import)* NL* (elements+=Entity NL*)* "endpackage" NL*;
		public ParserRule getRule() { return rule; }

		//{PackageDeclaration} "package" name=ID (NL* imports+=Import)* NL* (elements+=Entity NL*)* "endpackage" NL*
		public Group getGroup() { return cGroup; }

		//{PackageDeclaration}
		public Action getPackageDeclarationAction_0() { return cPackageDeclarationAction_0; }

		//"package"
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(NL* imports+=Import)*
		public Group getGroup_3() { return cGroup_3; }

		//NL*
		public RuleCall getNLTerminalRuleCall_3_0() { return cNLTerminalRuleCall_3_0; }

		//imports+=Import
		public Assignment getImportsAssignment_3_1() { return cImportsAssignment_3_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_3_1_0() { return cImportsImportParserRuleCall_3_1_0; }

		//NL*
		public RuleCall getNLTerminalRuleCall_4() { return cNLTerminalRuleCall_4; }

		//(elements+=Entity NL*)*
		public Group getGroup_5() { return cGroup_5; }

		//elements+=Entity
		public Assignment getElementsAssignment_5_0() { return cElementsAssignment_5_0; }

		//Entity
		public RuleCall getElementsEntityParserRuleCall_5_0_0() { return cElementsEntityParserRuleCall_5_0_0; }

		//NL*
		public RuleCall getNLTerminalRuleCall_5_1() { return cNLTerminalRuleCall_5_1; }

		//"endpackage"
		public Keyword getEndpackageKeyword_6() { return cEndpackageKeyword_6; }

		//NL*
		public RuleCall getNLTerminalRuleCall_7() { return cNLTerminalRuleCall_7; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceImportStringParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Import:
		//	"import" importedNamespace=ImportString NL;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=ImportString NL
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=ImportString
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//ImportString
		public RuleCall getImportedNamespaceImportStringParserRuleCall_1_0() { return cImportedNamespaceImportStringParserRuleCall_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }
	}

	public class ImportStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cAsteriskKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//ImportString:
		//	ID "." ("*" | ID);
		public ParserRule getRule() { return rule; }

		//ID "." ("*" | ID)
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//"*" | ID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"*"
		public Keyword getAsteriskKeyword_2_0() { return cAsteriskKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFuncDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInitBlockParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNativeFuncParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Entity:
		//	TypeDef | FuncDef | VarDef | InitBlock | NativeFunc;
		public ParserRule getRule() { return rule; }

		//TypeDef | FuncDef | VarDef | InitBlock | NativeFunc
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDef
		public RuleCall getTypeDefParserRuleCall_0() { return cTypeDefParserRuleCall_0; }

		//FuncDef
		public RuleCall getFuncDefParserRuleCall_1() { return cFuncDefParserRuleCall_1; }

		//VarDef
		public RuleCall getVarDefParserRuleCall_2() { return cVarDefParserRuleCall_2; }

		//InitBlock
		public RuleCall getInitBlockParserRuleCall_3() { return cInitBlockParserRuleCall_3; }

		//NativeFunc
		public RuleCall getNativeFuncParserRuleCall_4() { return cNativeFuncParserRuleCall_4; }
	}

	public class InitBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameInitKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyStatementsParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cEndinitKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InitBlock:
		//	name="init" body=Statements "endinit";
		public ParserRule getRule() { return rule; }

		//name="init" body=Statements "endinit"
		public Group getGroup() { return cGroup; }

		//name="init"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"init"
		public Keyword getNameInitKeyword_0_0() { return cNameInitKeyword_0_0; }

		//body=Statements
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//Statements
		public RuleCall getBodyStatementsParserRuleCall_1_0() { return cBodyStatementsParserRuleCall_1_0; }

		//"endinit"
		public Keyword getEndinitKeyword_2() { return cEndinitKeyword_2; }
	}

	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNativeTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeDef:
		//	NativeType | ClassDef;
		public ParserRule getRule() { return rule; }

		//NativeType | ClassDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//NativeType
		public RuleCall getNativeTypeParserRuleCall_0() { return cNativeTypeParserRuleCall_0; }

		//ClassDef
		public RuleCall getClassDefParserRuleCall_1() { return cClassDefParserRuleCall_1; }
	}

	public class NativeFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NativeFunc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNativeFuncAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNativeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cGroup_4_0.eContents().get(1);
		private final Assignment cParametersAssignment_4_0_1_0 = (Assignment)cGroup_4_0_1.eContents().get(0);
		private final RuleCall cParametersParameterDefParserRuleCall_4_0_1_0_0 = (RuleCall)cParametersAssignment_4_0_1_0.eContents().get(0);
		private final Group cGroup_4_0_1_1 = (Group)cGroup_4_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_0_1_1_0 = (Keyword)cGroup_4_0_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_0_1_1_1 = (Assignment)cGroup_4_0_1_1.eContents().get(1);
		private final RuleCall cParametersParameterDefParserRuleCall_4_0_1_1_1_0 = (RuleCall)cParametersAssignment_4_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cTakesKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Keyword cNothingKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cAlternatives_4.eContents().get(2);
		private final Keyword cTakesKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cParametersAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cParametersParameterDefParserRuleCall_4_2_1_0 = (RuleCall)cParametersAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_4_2_2 = (Group)cGroup_4_2.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_2_0 = (Keyword)cGroup_4_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_4_2_2_1 = (Assignment)cGroup_4_2_2.eContents().get(1);
		private final RuleCall cParametersParameterDefParserRuleCall_4_2_2_1_0 = (RuleCall)cParametersAssignment_4_2_2_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cReturnsKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cTypeAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cTypeTypeExprParserRuleCall_5_0_1_0 = (RuleCall)cTypeAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cReturnsKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cNothingKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//NativeFunc returns FuncDef:
		//	{NativeFunc} "constant"? "native" name=ID ("(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" |
		//	"takes" "nothing" | "takes" parameters+=ParameterDef ("," parameters+=ParameterDef)*) ("returns" type=TypeExpr |
		//	("returns" "nothing")?) NL;
		public ParserRule getRule() { return rule; }

		//{NativeFunc} "constant"? "native" name=ID ("(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" | "takes"
		//"nothing" | "takes" parameters+=ParameterDef ("," parameters+=ParameterDef)*) ("returns" type=TypeExpr | ("returns"
		//"nothing")?) NL
		public Group getGroup() { return cGroup; }

		//{NativeFunc}
		public Action getNativeFuncAction_0() { return cNativeFuncAction_0; }

		//"constant"?
		public Keyword getConstantKeyword_1() { return cConstantKeyword_1; }

		//"native"
		public Keyword getNativeKeyword_2() { return cNativeKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" | "takes" "nothing" | "takes"
		//parameters+=ParameterDef ("," parameters+=ParameterDef)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")"
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0_0() { return cLeftParenthesisKeyword_4_0_0; }

		//(parameters+=ParameterDef ("," parameters+=ParameterDef)*)?
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }

		//parameters+=ParameterDef
		public Assignment getParametersAssignment_4_0_1_0() { return cParametersAssignment_4_0_1_0; }

		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_4_0_1_0_0() { return cParametersParameterDefParserRuleCall_4_0_1_0_0; }

		//("," parameters+=ParameterDef)*
		public Group getGroup_4_0_1_1() { return cGroup_4_0_1_1; }

		//","
		public Keyword getCommaKeyword_4_0_1_1_0() { return cCommaKeyword_4_0_1_1_0; }

		//parameters+=ParameterDef
		public Assignment getParametersAssignment_4_0_1_1_1() { return cParametersAssignment_4_0_1_1_1; }

		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_4_0_1_1_1_0() { return cParametersParameterDefParserRuleCall_4_0_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_0_2() { return cRightParenthesisKeyword_4_0_2; }

		//"takes" "nothing"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"takes"
		public Keyword getTakesKeyword_4_1_0() { return cTakesKeyword_4_1_0; }

		//"nothing"
		public Keyword getNothingKeyword_4_1_1() { return cNothingKeyword_4_1_1; }

		//"takes" parameters+=ParameterDef ("," parameters+=ParameterDef)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"takes"
		public Keyword getTakesKeyword_4_2_0() { return cTakesKeyword_4_2_0; }

		//parameters+=ParameterDef
		public Assignment getParametersAssignment_4_2_1() { return cParametersAssignment_4_2_1; }

		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_4_2_1_0() { return cParametersParameterDefParserRuleCall_4_2_1_0; }

		//("," parameters+=ParameterDef)*
		public Group getGroup_4_2_2() { return cGroup_4_2_2; }

		//","
		public Keyword getCommaKeyword_4_2_2_0() { return cCommaKeyword_4_2_2_0; }

		//parameters+=ParameterDef
		public Assignment getParametersAssignment_4_2_2_1() { return cParametersAssignment_4_2_2_1; }

		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_4_2_2_1_0() { return cParametersParameterDefParserRuleCall_4_2_2_1_0; }

		//"returns" type=TypeExpr | ("returns" "nothing")?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"returns" type=TypeExpr
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"returns"
		public Keyword getReturnsKeyword_5_0_0() { return cReturnsKeyword_5_0_0; }

		//type=TypeExpr
		public Assignment getTypeAssignment_5_0_1() { return cTypeAssignment_5_0_1; }

		//TypeExpr
		public RuleCall getTypeTypeExprParserRuleCall_5_0_1_0() { return cTypeTypeExprParserRuleCall_5_0_1_0; }

		//("returns" "nothing")?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"returns"
		public Keyword getReturnsKeyword_5_1_0() { return cReturnsKeyword_5_1_0; }

		//"nothing"
		public Keyword getNothingKeyword_5_1_1() { return cNothingKeyword_5_1_1; }

		//NL
		public RuleCall getNLTerminalRuleCall_6() { return cNLTerminalRuleCall_6; }
	}

	public class NativeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NativeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNativeTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperNameTypeExprParserRuleCall_3_1_0 = (RuleCall)cSuperNameAssignment_3_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//NativeType returns TypeDef:
		//	{NativeType} "type" name=ID ("extends" superName=TypeExpr)? NL;
		public ParserRule getRule() { return rule; }

		//{NativeType} "type" name=ID ("extends" superName=TypeExpr)? NL
		public Group getGroup() { return cGroup; }

		//{NativeType}
		public Action getNativeTypeAction_0() { return cNativeTypeAction_0; }

		//"type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" superName=TypeExpr)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superName=TypeExpr
		public Assignment getSuperNameAssignment_3_1() { return cSuperNameAssignment_3_1; }

		//TypeExpr
		public RuleCall getSuperNameTypeExprParserRuleCall_3_1_0() { return cSuperNameTypeExprParserRuleCall_3_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_4() { return cNLTerminalRuleCall_4; }
	}

	public class ClassDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final RuleCall cNLTerminalRuleCall_4_0 = (RuleCall)cAlternatives_4.eContents().get(0);
		private final Assignment cMembersAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cMembersClassMemberParserRuleCall_4_1_0 = (RuleCall)cMembersAssignment_4_1.eContents().get(0);
		private final Keyword cEndclassKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cNLTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		/// * classes and their members * / ClassDef returns TypeDef:
		//	{ClassDef} "class" name=ID NL (NL | members+=ClassMember)* "endclass" NL;
		public ParserRule getRule() { return rule; }

		//{ClassDef} "class" name=ID NL (NL | members+=ClassMember)* "endclass" NL
		public Group getGroup() { return cGroup; }

		//{ClassDef}
		public Action getClassDefAction_0() { return cClassDefAction_0; }

		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }

		//(NL | members+=ClassMember)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//NL
		public RuleCall getNLTerminalRuleCall_4_0() { return cNLTerminalRuleCall_4_0; }

		//members+=ClassMember
		public Assignment getMembersAssignment_4_1() { return cMembersAssignment_4_1; }

		//ClassMember
		public RuleCall getMembersClassMemberParserRuleCall_4_1_0() { return cMembersClassMemberParserRuleCall_4_1_0; }

		//"endclass"
		public Keyword getEndclassKeyword_5() { return cEndclassKeyword_5; }

		//NL
		public RuleCall getNLTerminalRuleCall_6() { return cNLTerminalRuleCall_6; }
	}

	public class ClassMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFuncDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ClassMember:
		//	VarDef | FuncDef;
		public ParserRule getRule() { return rule; }

		//VarDef | FuncDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarDef
		public RuleCall getVarDefParserRuleCall_0() { return cVarDefParserRuleCall_0; }

		//FuncDef
		public RuleCall getFuncDefParserRuleCall_1() { return cFuncDefParserRuleCall_1; }
	}

	public class VarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cConstantAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cConstantValKeyword_1_0_0_0 = (Keyword)cConstantAssignment_1_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypeTypeExprParserRuleCall_1_0_1_0 = (RuleCall)cTypeAssignment_1_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_0_2_0 = (RuleCall)cNameAssignment_1_0_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cEAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cEExprParserRuleCall_1_0_4_0 = (RuleCall)cEAssignment_1_0_4.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cConstantAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cConstantConstantKeyword_1_1_0_0 = (Keyword)cConstantAssignment_1_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypeTypeExprParserRuleCall_1_1_1_0 = (RuleCall)cTypeAssignment_1_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_1_2_0 = (RuleCall)cNameAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cEAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cEExprParserRuleCall_1_1_3_1_0 = (RuleCall)cEAssignment_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cGlobKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cNameAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_2_1_0 = (RuleCall)cNameAssignment_1_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cEAssignment_1_2_3 = (Assignment)cGroup_1_2.eContents().get(3);
		private final RuleCall cEExprParserRuleCall_1_2_3_0 = (RuleCall)cEAssignment_1_2_3.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//VarDef:
		//	{VarDef} (constant?="val" type=TypeExpr? name=ID "=" e=Expr | constant?="constant"? type=TypeExpr name=ID ("="
		//	e=Expr)? | "glob" name=ID "=" e=Expr) NL;
		public ParserRule getRule() { return rule; }

		//{VarDef} (constant?="val" type=TypeExpr? name=ID "=" e=Expr | constant?="constant"? type=TypeExpr name=ID ("=" e=Expr)?
		//| "glob" name=ID "=" e=Expr) NL
		public Group getGroup() { return cGroup; }

		//{VarDef}
		public Action getVarDefAction_0() { return cVarDefAction_0; }

		//constant?="val" type=TypeExpr? name=ID "=" e=Expr | constant?="constant"? type=TypeExpr name=ID ("=" e=Expr)? | "glob"
		//name=ID "=" e=Expr
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//constant?="val" type=TypeExpr? name=ID "=" e=Expr
		public Group getGroup_1_0() { return cGroup_1_0; }

		//constant?="val"
		public Assignment getConstantAssignment_1_0_0() { return cConstantAssignment_1_0_0; }

		//"val"
		public Keyword getConstantValKeyword_1_0_0_0() { return cConstantValKeyword_1_0_0_0; }

		//type=TypeExpr?
		public Assignment getTypeAssignment_1_0_1() { return cTypeAssignment_1_0_1; }

		//TypeExpr
		public RuleCall getTypeTypeExprParserRuleCall_1_0_1_0() { return cTypeTypeExprParserRuleCall_1_0_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_0_2() { return cNameAssignment_1_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_2_0() { return cNameIDTerminalRuleCall_1_0_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_3() { return cEqualsSignKeyword_1_0_3; }

		//e=Expr
		public Assignment getEAssignment_1_0_4() { return cEAssignment_1_0_4; }

		//Expr
		public RuleCall getEExprParserRuleCall_1_0_4_0() { return cEExprParserRuleCall_1_0_4_0; }

		//constant?="constant"? type=TypeExpr name=ID ("=" e=Expr)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//constant?="constant"?
		public Assignment getConstantAssignment_1_1_0() { return cConstantAssignment_1_1_0; }

		//"constant"
		public Keyword getConstantConstantKeyword_1_1_0_0() { return cConstantConstantKeyword_1_1_0_0; }

		//type=TypeExpr
		public Assignment getTypeAssignment_1_1_1() { return cTypeAssignment_1_1_1; }

		//TypeExpr
		public RuleCall getTypeTypeExprParserRuleCall_1_1_1_0() { return cTypeTypeExprParserRuleCall_1_1_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1_2() { return cNameAssignment_1_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_2_0() { return cNameIDTerminalRuleCall_1_1_2_0; }

		//("=" e=Expr)?
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//"="
		public Keyword getEqualsSignKeyword_1_1_3_0() { return cEqualsSignKeyword_1_1_3_0; }

		//e=Expr
		public Assignment getEAssignment_1_1_3_1() { return cEAssignment_1_1_3_1; }

		//Expr
		public RuleCall getEExprParserRuleCall_1_1_3_1_0() { return cEExprParserRuleCall_1_1_3_1_0; }

		//"glob" name=ID "=" e=Expr
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"glob"
		public Keyword getGlobKeyword_1_2_0() { return cGlobKeyword_1_2_0; }

		//name=ID
		public Assignment getNameAssignment_1_2_1() { return cNameAssignment_1_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_1_0() { return cNameIDTerminalRuleCall_1_2_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2_2() { return cEqualsSignKeyword_1_2_2; }

		//e=Expr
		public Assignment getEAssignment_1_2_3() { return cEAssignment_1_2_3; }

		//Expr
		public RuleCall getEExprParserRuleCall_1_2_3_0() { return cEExprParserRuleCall_1_2_3_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }
	}

	public class TypeExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypeExprRefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cNameTypeDefCrossReference_0_1_0 = (CrossReference)cNameAssignment_0_1.eContents().get(0);
		private final RuleCall cNameTypeDefIDTerminalRuleCall_0_1_0_1 = (RuleCall)cNameTypeDefCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTypeExprBuildinAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_1_0 = (Alternatives)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cNameIntegerKeyword_1_1_0_0 = (Keyword)cNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cNameRealKeyword_1_1_0_1 = (Keyword)cNameAlternatives_1_1_0.eContents().get(1);
		private final Keyword cNameStringKeyword_1_1_0_2 = (Keyword)cNameAlternatives_1_1_0.eContents().get(2);
		private final Keyword cNameBooleanKeyword_1_1_0_3 = (Keyword)cNameAlternatives_1_1_0.eContents().get(3);
		private final Keyword cNameHandleKeyword_1_1_0_4 = (Keyword)cNameAlternatives_1_1_0.eContents().get(4);
		private final Keyword cNameCodeKeyword_1_1_0_5 = (Keyword)cNameAlternatives_1_1_0.eContents().get(5);
		
		//TypeExpr:
		//	{TypeExprRef} name=[TypeDef] | {TypeExprBuildin} name=("integer" | "real" | "string" | "boolean" | "handle" | "code");
		public ParserRule getRule() { return rule; }

		//{TypeExprRef} name=[TypeDef] | {TypeExprBuildin} name=("integer" | "real" | "string" | "boolean" | "handle" | "code")
		public Alternatives getAlternatives() { return cAlternatives; }

		//{TypeExprRef} name=[TypeDef]
		public Group getGroup_0() { return cGroup_0; }

		//{TypeExprRef}
		public Action getTypeExprRefAction_0_0() { return cTypeExprRefAction_0_0; }

		//name=[TypeDef]
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//[TypeDef]
		public CrossReference getNameTypeDefCrossReference_0_1_0() { return cNameTypeDefCrossReference_0_1_0; }

		//ID
		public RuleCall getNameTypeDefIDTerminalRuleCall_0_1_0_1() { return cNameTypeDefIDTerminalRuleCall_0_1_0_1; }

		//{TypeExprBuildin} name=("integer" | "real" | "string" | "boolean" | "handle" | "code")
		public Group getGroup_1() { return cGroup_1; }

		//{TypeExprBuildin}
		public Action getTypeExprBuildinAction_1_0() { return cTypeExprBuildinAction_1_0; }

		//name=("integer" | "real" | "string" | "boolean" | "handle" | "code")
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//"integer" | "real" | "string" | "boolean" | "handle" | "code"
		public Alternatives getNameAlternatives_1_1_0() { return cNameAlternatives_1_1_0; }

		//"integer"
		public Keyword getNameIntegerKeyword_1_1_0_0() { return cNameIntegerKeyword_1_1_0_0; }

		//"real"
		public Keyword getNameRealKeyword_1_1_0_1() { return cNameRealKeyword_1_1_0_1; }

		//"string"
		public Keyword getNameStringKeyword_1_1_0_2() { return cNameStringKeyword_1_1_0_2; }

		//"boolean"
		public Keyword getNameBooleanKeyword_1_1_0_3() { return cNameBooleanKeyword_1_1_0_3; }

		//"handle"
		public Keyword getNameHandleKeyword_1_1_0_4() { return cNameHandleKeyword_1_1_0_4; }

		//"code"
		public Keyword getNameCodeKeyword_1_1_0_5() { return cNameCodeKeyword_1_1_0_5; }
	}

	public class FuncDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FuncDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Assignment cParametersAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cParametersParameterDefParserRuleCall_2_0_1_0_0 = (RuleCall)cParametersAssignment_2_0_1_0.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_1_0 = (Keyword)cGroup_2_0_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final RuleCall cParametersParameterDefParserRuleCall_2_0_1_1_1_0 = (RuleCall)cParametersAssignment_2_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cTakesKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cNothingKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Keyword cTakesKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersParameterDefParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_2_2 = (Group)cGroup_2_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_2_0 = (Keyword)cGroup_2_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_2_1 = (Assignment)cGroup_2_2_2.eContents().get(1);
		private final RuleCall cParametersParameterDefParserRuleCall_2_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cReturnsKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTypeAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTypeTypeExprParserRuleCall_3_0_1_0 = (RuleCall)cTypeAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cReturnsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cNothingKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyStatementsParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Keyword cEndfunctionKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// * functions * / FuncDef:
		//	"function" name=ID ("(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" | "takes" "nothing" | "takes"
		//	parameters+=ParameterDef ("," parameters+=ParameterDef)*) ("returns" type=TypeExpr | ("returns" "nothing")?) NL
		//	body=Statements "endfunction";
		public ParserRule getRule() { return rule; }

		//"function" name=ID ("(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" | "takes" "nothing" | "takes"
		//parameters+=ParameterDef ("," parameters+=ParameterDef)*) ("returns" type=TypeExpr | ("returns" "nothing")?) NL
		//body=Statements "endfunction"
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" | "takes" "nothing" | "takes"
		//parameters+=ParameterDef ("," parameters+=ParameterDef)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }

		//(parameters+=ParameterDef ("," parameters+=ParameterDef)*)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }

		//parameters+=ParameterDef
		public Assignment getParametersAssignment_2_0_1_0() { return cParametersAssignment_2_0_1_0; }

		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_2_0_1_0_0() { return cParametersParameterDefParserRuleCall_2_0_1_0_0; }

		//("," parameters+=ParameterDef)*
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }

		//","
		public Keyword getCommaKeyword_2_0_1_1_0() { return cCommaKeyword_2_0_1_1_0; }

		//parameters+=ParameterDef
		public Assignment getParametersAssignment_2_0_1_1_1() { return cParametersAssignment_2_0_1_1_1; }

		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_2_0_1_1_1_0() { return cParametersParameterDefParserRuleCall_2_0_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_0_2() { return cRightParenthesisKeyword_2_0_2; }

		//"takes" "nothing"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"takes"
		public Keyword getTakesKeyword_2_1_0() { return cTakesKeyword_2_1_0; }

		//"nothing"
		public Keyword getNothingKeyword_2_1_1() { return cNothingKeyword_2_1_1; }

		//"takes" parameters+=ParameterDef ("," parameters+=ParameterDef)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"takes"
		public Keyword getTakesKeyword_2_2_0() { return cTakesKeyword_2_2_0; }

		//parameters+=ParameterDef
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }

		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_2_2_1_0() { return cParametersParameterDefParserRuleCall_2_2_1_0; }

		//("," parameters+=ParameterDef)*
		public Group getGroup_2_2_2() { return cGroup_2_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_2_0() { return cCommaKeyword_2_2_2_0; }

		//parameters+=ParameterDef
		public Assignment getParametersAssignment_2_2_2_1() { return cParametersAssignment_2_2_2_1; }

		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_2_2_2_1_0() { return cParametersParameterDefParserRuleCall_2_2_2_1_0; }

		//"returns" type=TypeExpr | ("returns" "nothing")?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"returns" type=TypeExpr
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"returns"
		public Keyword getReturnsKeyword_3_0_0() { return cReturnsKeyword_3_0_0; }

		//type=TypeExpr
		public Assignment getTypeAssignment_3_0_1() { return cTypeAssignment_3_0_1; }

		//TypeExpr
		public RuleCall getTypeTypeExprParserRuleCall_3_0_1_0() { return cTypeTypeExprParserRuleCall_3_0_1_0; }

		//("returns" "nothing")?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"returns"
		public Keyword getReturnsKeyword_3_1_0() { return cReturnsKeyword_3_1_0; }

		//"nothing"
		public Keyword getNothingKeyword_3_1_1() { return cNothingKeyword_3_1_1; }

		//NL
		public RuleCall getNLTerminalRuleCall_4() { return cNLTerminalRuleCall_4; }

		//body=Statements
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//Statements
		public RuleCall getBodyStatementsParserRuleCall_5_0() { return cBodyStatementsParserRuleCall_5_0; }

		//"endfunction"
		public Keyword getEndfunctionKeyword_6() { return cEndfunctionKeyword_6; }
	}

	public class ParameterDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeExprParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ParameterDef returns VarDef:
		//	{ParameterDef} type=TypeExpr name=ID;
		public ParserRule getRule() { return rule; }

		//{ParameterDef} type=TypeExpr name=ID
		public Group getGroup() { return cGroup; }

		//{ParameterDef}
		public Action getParameterDefAction_0() { return cParameterDefAction_0; }

		//type=TypeExpr
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeExpr
		public RuleCall getTypeTypeExprParserRuleCall_1_0() { return cTypeTypeExprParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class StatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cNLTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_1_0 = (RuleCall)cStatementsAssignment_1_1.eContents().get(0);
		
		//Statements:
		//	{Statements} (NL | statements+=Statement)*;
		public ParserRule getRule() { return rule; }

		//{Statements} (NL | statements+=Statement)*
		public Group getGroup() { return cGroup; }

		//{Statements}
		public Action getStatementsAction_0() { return cStatementsAction_0; }

		//(NL | statements+=Statement)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//NL
		public RuleCall getNLTerminalRuleCall_1_0() { return cNLTerminalRuleCall_1_0; }

		//statements+=Statement
		public Assignment getStatementsAssignment_1_1() { return cStatementsAssignment_1_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_1_0() { return cStatementsStatementParserRuleCall_1_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStmtIfParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStmtWhileParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLocalVarDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStmtSetOrCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStmtReturnParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStmtLoopParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStmtExitwhenParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Statement:
		//	StmtIf | StmtWhile | LocalVarDef | StmtSetOrCall | StmtReturn | StmtLoop | StmtExitwhen;
		public ParserRule getRule() { return rule; }

		//StmtIf | StmtWhile | LocalVarDef | StmtSetOrCall | StmtReturn | StmtLoop | StmtExitwhen
		public Alternatives getAlternatives() { return cAlternatives; }

		//StmtIf
		public RuleCall getStmtIfParserRuleCall_0() { return cStmtIfParserRuleCall_0; }

		//StmtWhile
		public RuleCall getStmtWhileParserRuleCall_1() { return cStmtWhileParserRuleCall_1; }

		//LocalVarDef
		public RuleCall getLocalVarDefParserRuleCall_2() { return cLocalVarDefParserRuleCall_2; }

		//StmtSetOrCall
		public RuleCall getStmtSetOrCallParserRuleCall_3() { return cStmtSetOrCallParserRuleCall_3; }

		//StmtReturn
		public RuleCall getStmtReturnParserRuleCall_4() { return cStmtReturnParserRuleCall_4; }

		//StmtLoop
		public RuleCall getStmtLoopParserRuleCall_5() { return cStmtLoopParserRuleCall_5; }

		//StmtExitwhen
		public RuleCall getStmtExitwhenParserRuleCall_6() { return cStmtExitwhenParserRuleCall_6; }
	}

	public class LocalVarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVarDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLocalKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cConstantAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cConstantValKeyword_1_1_0 = (Keyword)cConstantAssignment_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeExprParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEExprParserRuleCall_4_1_0 = (RuleCall)cEAssignment_4_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//LocalVarDef returns VarDef:
		//	{VarDef} ("local" | constant?="val") type=TypeExpr? name=ID ("=" e=Expr)? NL;
		public ParserRule getRule() { return rule; }

		//{VarDef} ("local" | constant?="val") type=TypeExpr? name=ID ("=" e=Expr)? NL
		public Group getGroup() { return cGroup; }

		//{VarDef}
		public Action getVarDefAction_0() { return cVarDefAction_0; }

		//"local" | constant?="val"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"local"
		public Keyword getLocalKeyword_1_0() { return cLocalKeyword_1_0; }

		//constant?="val"
		public Assignment getConstantAssignment_1_1() { return cConstantAssignment_1_1; }

		//"val"
		public Keyword getConstantValKeyword_1_1_0() { return cConstantValKeyword_1_1_0; }

		//type=TypeExpr?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypeExpr
		public RuleCall getTypeTypeExprParserRuleCall_2_0() { return cTypeTypeExprParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//("=" e=Expr)?
		public Group getGroup_4() { return cGroup_4; }

		//"="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//e=Expr
		public Assignment getEAssignment_4_1() { return cEAssignment_4_1; }

		//Expr
		public RuleCall getEExprParserRuleCall_4_1_0() { return cEExprParserRuleCall_4_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_5() { return cNLTerminalRuleCall_5; }
	}

	public class StmtExitwhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtExitwhen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExitwhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEExprParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//StmtExitwhen:
		//	"exitwhen" e=Expr NL;
		public ParserRule getRule() { return rule; }

		//"exitwhen" e=Expr NL
		public Group getGroup() { return cGroup; }

		//"exitwhen"
		public Keyword getExitwhenKeyword_0() { return cExitwhenKeyword_0; }

		//e=Expr
		public Assignment getEAssignment_1() { return cEAssignment_1; }

		//Expr
		public RuleCall getEExprParserRuleCall_1_0() { return cEExprParserRuleCall_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }
	}

	public class StmtLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyStatementsParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cEndloopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cNLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//StmtLoop:
		//	"loop" NL body=Statements "endloop" NL;
		public ParserRule getRule() { return rule; }

		//"loop" NL body=Statements "endloop" NL
		public Group getGroup() { return cGroup; }

		//"loop"
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_1() { return cNLTerminalRuleCall_1; }

		//body=Statements
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//Statements
		public RuleCall getBodyStatementsParserRuleCall_2_0() { return cBodyStatementsParserRuleCall_2_0; }

		//"endloop"
		public Keyword getEndloopKeyword_3() { return cEndloopKeyword_3; }

		//NL
		public RuleCall getNLTerminalRuleCall_4() { return cNLTerminalRuleCall_4; }
	}

	public class StmtReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtReturn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStmtReturnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEExprParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//StmtReturn:
		//	{StmtReturn} "return" e=Expr? NL;
		public ParserRule getRule() { return rule; }

		//{StmtReturn} "return" e=Expr? NL
		public Group getGroup() { return cGroup; }

		//{StmtReturn}
		public Action getStmtReturnAction_0() { return cStmtReturnAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//e=Expr?
		public Assignment getEAssignment_2() { return cEAssignment_2; }

		//Expr
		public RuleCall getEExprParserRuleCall_2_0() { return cEExprParserRuleCall_2_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }
	}

	public class StmtIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cNLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cThenBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBlockStatementsParserRuleCall_4_0 = (RuleCall)cThenBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseifKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseIfCondsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseIfCondsExprParserRuleCall_5_1_0 = (RuleCall)cElseIfCondsAssignment_5_1.eContents().get(0);
		private final Keyword cThenKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final RuleCall cNLTerminalRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		private final Assignment cElseIfBlocksAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cElseIfBlocksStatementsParserRuleCall_5_4_0 = (RuleCall)cElseIfBlocksAssignment_5_4.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Assignment cElseBlockAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cElseBlockStatementsParserRuleCall_6_2_0 = (RuleCall)cElseBlockAssignment_6_2.eContents().get(0);
		private final Keyword cEndifKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cNLTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//StmtIf:
		//	"if" cond=Expr "then"? NL thenBlock=Statements ("elseif" elseIfConds+=Expr "then"? NL elseIfBlocks+=Statements)*
		//	("else" NL elseBlock=Statements)? "endif" NL;
		public ParserRule getRule() { return rule; }

		//"if" cond=Expr "then"? NL thenBlock=Statements ("elseif" elseIfConds+=Expr "then"? NL elseIfBlocks+=Statements)* ("else"
		//NL elseBlock=Statements)? "endif" NL
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//cond=Expr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }

		//Expr
		public RuleCall getCondExprParserRuleCall_1_0() { return cCondExprParserRuleCall_1_0; }

		//"then"?
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//NL
		public RuleCall getNLTerminalRuleCall_3() { return cNLTerminalRuleCall_3; }

		//thenBlock=Statements
		public Assignment getThenBlockAssignment_4() { return cThenBlockAssignment_4; }

		//Statements
		public RuleCall getThenBlockStatementsParserRuleCall_4_0() { return cThenBlockStatementsParserRuleCall_4_0; }

		//("elseif" elseIfConds+=Expr "then"? NL elseIfBlocks+=Statements)*
		public Group getGroup_5() { return cGroup_5; }

		//"elseif"
		public Keyword getElseifKeyword_5_0() { return cElseifKeyword_5_0; }

		//elseIfConds+=Expr
		public Assignment getElseIfCondsAssignment_5_1() { return cElseIfCondsAssignment_5_1; }

		//Expr
		public RuleCall getElseIfCondsExprParserRuleCall_5_1_0() { return cElseIfCondsExprParserRuleCall_5_1_0; }

		//"then"?
		public Keyword getThenKeyword_5_2() { return cThenKeyword_5_2; }

		//NL
		public RuleCall getNLTerminalRuleCall_5_3() { return cNLTerminalRuleCall_5_3; }

		//elseIfBlocks+=Statements
		public Assignment getElseIfBlocksAssignment_5_4() { return cElseIfBlocksAssignment_5_4; }

		//Statements
		public RuleCall getElseIfBlocksStatementsParserRuleCall_5_4_0() { return cElseIfBlocksStatementsParserRuleCall_5_4_0; }

		//("else" NL elseBlock=Statements)?
		public Group getGroup_6() { return cGroup_6; }

		//"else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_6_1() { return cNLTerminalRuleCall_6_1; }

		//elseBlock=Statements
		public Assignment getElseBlockAssignment_6_2() { return cElseBlockAssignment_6_2; }

		//Statements
		public RuleCall getElseBlockStatementsParserRuleCall_6_2_0() { return cElseBlockStatementsParserRuleCall_6_2_0; }

		//"endif"
		public Keyword getEndifKeyword_7() { return cEndifKeyword_7; }

		//NL
		public RuleCall getNLTerminalRuleCall_8() { return cNLTerminalRuleCall_8; }
	}

	public class StmtWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExprParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyStatementsParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cEndwhileKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cNLTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//StmtWhile:
		//	"while" cond=Expr NL body=Statements "endwhile" NL;
		public ParserRule getRule() { return rule; }

		//"while" cond=Expr NL body=Statements "endwhile" NL
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//cond=Expr
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }

		//Expr
		public RuleCall getCondExprParserRuleCall_1_0() { return cCondExprParserRuleCall_1_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_2() { return cNLTerminalRuleCall_2; }

		//body=Statements
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//Statements
		public RuleCall getBodyStatementsParserRuleCall_3_0() { return cBodyStatementsParserRuleCall_3_0; }

		//"endwhile"
		public Keyword getEndwhileKeyword_4() { return cEndwhileKeyword_4; }

		//NL
		public RuleCall getNLTerminalRuleCall_5() { return cNLTerminalRuleCall_5; }
	}

	public class StmtSetOrCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StmtSetOrCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStmtCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cCallKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSetKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEExprParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Action cStmtSetLeftAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cOpAssignmentAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOpAssignmentOpAssignmentParserRuleCall_3_1_0 = (RuleCall)cOpAssignmentAssignment_3_1.eContents().get(0);
		private final Assignment cRightAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cRightExprParserRuleCall_3_2_0 = (RuleCall)cRightAssignment_3_2.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//StmtSetOrCall:
		//	{StmtCall} ("call" | "set")? e=Expr ({StmtSet.left=current} opAssignment=OpAssignment right=Expr)? NL;
		public ParserRule getRule() { return rule; }

		//{StmtCall} ("call" | "set")? e=Expr ({StmtSet.left=current} opAssignment=OpAssignment right=Expr)? NL
		public Group getGroup() { return cGroup; }

		//{StmtCall}
		public Action getStmtCallAction_0() { return cStmtCallAction_0; }

		//("call" | "set")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"call"
		public Keyword getCallKeyword_1_0() { return cCallKeyword_1_0; }

		//"set"
		public Keyword getSetKeyword_1_1() { return cSetKeyword_1_1; }

		//e=Expr
		public Assignment getEAssignment_2() { return cEAssignment_2; }

		//Expr
		public RuleCall getEExprParserRuleCall_2_0() { return cEExprParserRuleCall_2_0; }

		//({StmtSet.left=current} opAssignment=OpAssignment right=Expr)?
		public Group getGroup_3() { return cGroup_3; }

		//{StmtSet.left=current}
		public Action getStmtSetLeftAction_3_0() { return cStmtSetLeftAction_3_0; }

		//opAssignment=OpAssignment
		public Assignment getOpAssignmentAssignment_3_1() { return cOpAssignmentAssignment_3_1; }

		//OpAssignment
		public RuleCall getOpAssignmentOpAssignmentParserRuleCall_3_1_0() { return cOpAssignmentOpAssignmentParserRuleCall_3_1_0; }

		//right=Expr
		public Assignment getRightAssignment_3_2() { return cRightAssignment_3_2; }

		//Expr
		public RuleCall getRightExprParserRuleCall_3_2_0() { return cRightExprParserRuleCall_3_2_0; }

		//NL
		public RuleCall getNLTerminalRuleCall_4() { return cNLTerminalRuleCall_4; }
	}

	public class OpAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOpAssignAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOpPlusAssignAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOpMinusAssignAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//OpAssignment:
		//	{OpAssign} "=" | {OpPlusAssign} "+=" | {OpMinusAssign} "-=";
		public ParserRule getRule() { return rule; }

		//{OpAssign} "=" | {OpPlusAssign} "+=" | {OpMinusAssign} "-="
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OpAssign} "="
		public Group getGroup_0() { return cGroup_0; }

		//{OpAssign}
		public Action getOpAssignAction_0_0() { return cOpAssignAction_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//{OpPlusAssign} "+="
		public Group getGroup_1() { return cGroup_1; }

		//{OpPlusAssign}
		public Action getOpPlusAssignAction_1_0() { return cOpPlusAssignAction_1_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1_1() { return cPlusSignEqualsSignKeyword_1_1; }

		//{OpMinusAssign} "-="
		public Group getGroup_2() { return cGroup_2; }

		//{OpMinusAssign}
		public Action getOpMinusAssignAction_2_0() { return cOpMinusAssignAction_2_0; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_2_1() { return cHyphenMinusEqualsSignKeyword_2_1; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final RuleCall cExprOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// * expressions * / / * operator precedence (weakest first):
		//
		//or
		//
		//and
		//
		//== !=				// 
		//
		//<= >= < >			// comparisons
		//
		//+ -
		//
		// * / % mod div		// mod and div work on integers, / and % for reals
		//
		//
		//
		//
		//
		//+ -					// unary
		//
		//not					// unary
		//
		//
		//
		//.					// member
		//
		// * / Expr:
		//	ExprOr;
		public ParserRule getRule() { return rule; }

		//ExprOr
		public RuleCall getExprOrParserRuleCall() { return cExprOrParserRuleCall; }
	}

	public class ExprOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpOrKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// TODO this is not really an expression, it should only be used at top level
		//
		//ExprOr returns Expr:
		//	ExprAnd ({ExprOr.left=current} op="or" right=ExprAnd)*;
		public ParserRule getRule() { return rule; }

		//ExprAnd ({ExprOr.left=current} op="or" right=ExprAnd)*
		public Group getGroup() { return cGroup; }

		//ExprAnd
		public RuleCall getExprAndParserRuleCall_0() { return cExprAndParserRuleCall_0; }

		//({ExprOr.left=current} op="or" right=ExprAnd)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprOr.left=current}
		public Action getExprOrLeftAction_1_0() { return cExprOrLeftAction_1_0; }

		//op="or"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"or"
		public Keyword getOpOrKeyword_1_1_0() { return cOpOrKeyword_1_1_0; }

		//right=ExprAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprAnd
		public RuleCall getRightExprAndParserRuleCall_1_2_0() { return cRightExprAndParserRuleCall_1_2_0; }
	}

	public class ExprAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAndKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprAnd returns Expr:
		//	ExprEquality ({ExprAnd.left=current} op="and" right=ExprEquality)*;
		public ParserRule getRule() { return rule; }

		//ExprEquality ({ExprAnd.left=current} op="and" right=ExprEquality)*
		public Group getGroup() { return cGroup; }

		//ExprEquality
		public RuleCall getExprEqualityParserRuleCall_0() { return cExprEqualityParserRuleCall_0; }

		//({ExprAnd.left=current} op="and" right=ExprEquality)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprAnd.left=current}
		public Action getExprAndLeftAction_1_0() { return cExprAndLeftAction_1_0; }

		//op="and"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"and"
		public Keyword getOpAndKeyword_1_1_0() { return cOpAndKeyword_1_1_0; }

		//right=ExprEquality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprEquality
		public RuleCall getRightExprEqualityParserRuleCall_1_2_0() { return cRightExprEqualityParserRuleCall_1_2_0; }
	}

	public class ExprEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprEquality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOpEqualityParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprEquality returns Expr:
		//	ExprComparison ({ExprEquality.left=current} op=OpEquality right=ExprComparison)*;
		public ParserRule getRule() { return rule; }

		//ExprComparison ({ExprEquality.left=current} op=OpEquality right=ExprComparison)*
		public Group getGroup() { return cGroup; }

		//ExprComparison
		public RuleCall getExprComparisonParserRuleCall_0() { return cExprComparisonParserRuleCall_0; }

		//({ExprEquality.left=current} op=OpEquality right=ExprComparison)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprEquality.left=current}
		public Action getExprEqualityLeftAction_1_0() { return cExprEqualityLeftAction_1_0; }

		//op=OpEquality
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OpEquality
		public RuleCall getOpOpEqualityParserRuleCall_1_1_0() { return cOpOpEqualityParserRuleCall_1_1_0; }

		//right=ExprComparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprComparison
		public RuleCall getRightExprComparisonParserRuleCall_1_2_0() { return cRightExprComparisonParserRuleCall_1_2_0; }
	}

	public class OpEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOpEqualsAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOpUnequalsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//OpEquality:
		//	{OpEquals} "==" | {OpUnequals} "!=";
		public ParserRule getRule() { return rule; }

		//{OpEquals} "==" | {OpUnequals} "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OpEquals} "=="
		public Group getGroup_0() { return cGroup_0; }

		//{OpEquals}
		public Action getOpEqualsAction_0_0() { return cOpEqualsAction_0_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0_1() { return cEqualsSignEqualsSignKeyword_0_1; }

		//{OpUnequals} "!="
		public Group getGroup_1() { return cGroup_1; }

		//{OpUnequals}
		public Action getOpUnequalsAction_1_0() { return cOpUnequalsAction_1_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_1() { return cExclamationMarkEqualsSignKeyword_1_1; }
	}

	public class ExprComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprComparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprAdditiveParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOpComparisonParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprAdditiveParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprComparison returns Expr:
		//	ExprAdditive ({ExprComparison.left=current} op=OpComparison right=ExprAdditive)*;
		public ParserRule getRule() { return rule; }

		//ExprAdditive ({ExprComparison.left=current} op=OpComparison right=ExprAdditive)*
		public Group getGroup() { return cGroup; }

		//ExprAdditive
		public RuleCall getExprAdditiveParserRuleCall_0() { return cExprAdditiveParserRuleCall_0; }

		//({ExprComparison.left=current} op=OpComparison right=ExprAdditive)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprComparison.left=current}
		public Action getExprComparisonLeftAction_1_0() { return cExprComparisonLeftAction_1_0; }

		//op=OpComparison
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OpComparison
		public RuleCall getOpOpComparisonParserRuleCall_1_1_0() { return cOpOpComparisonParserRuleCall_1_1_0; }

		//right=ExprAdditive
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprAdditive
		public RuleCall getRightExprAdditiveParserRuleCall_1_2_0() { return cRightExprAdditiveParserRuleCall_1_2_0; }
	}

	public class OpComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpComparison");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOpLessEqAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOpLessAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOpGreaterEqAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cOpGreaterAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//OpComparison:
		//	{OpLessEq} "<=" | {OpLess} "<" | {OpGreaterEq} ">=" | {OpGreater} ">";
		public ParserRule getRule() { return rule; }

		//{OpLessEq} "<=" | {OpLess} "<" | {OpGreaterEq} ">=" | {OpGreater} ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OpLessEq} "<="
		public Group getGroup_0() { return cGroup_0; }

		//{OpLessEq}
		public Action getOpLessEqAction_0_0() { return cOpLessEqAction_0_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_0_1() { return cLessThanSignEqualsSignKeyword_0_1; }

		//{OpLess} "<"
		public Group getGroup_1() { return cGroup_1; }

		//{OpLess}
		public Action getOpLessAction_1_0() { return cOpLessAction_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }

		//{OpGreaterEq} ">="
		public Group getGroup_2() { return cGroup_2; }

		//{OpGreaterEq}
		public Action getOpGreaterEqAction_2_0() { return cOpGreaterEqAction_2_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_2_1() { return cGreaterThanSignEqualsSignKeyword_2_1; }

		//{OpGreater} ">"
		public Group getGroup_3() { return cGroup_3; }

		//{OpGreater}
		public Action getOpGreaterAction_3_0() { return cOpGreaterAction_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_1() { return cGreaterThanSignKeyword_3_1; }
	}

	public class ExprAdditiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAdditive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprMultParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprAdditiveLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOpAdditiveParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprMultParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprAdditive returns Expr:
		//	ExprMult ({ExprAdditive.left=current} op=OpAdditive right=ExprMult)*;
		public ParserRule getRule() { return rule; }

		//ExprMult ({ExprAdditive.left=current} op=OpAdditive right=ExprMult)*
		public Group getGroup() { return cGroup; }

		//ExprMult
		public RuleCall getExprMultParserRuleCall_0() { return cExprMultParserRuleCall_0; }

		//({ExprAdditive.left=current} op=OpAdditive right=ExprMult)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprAdditive.left=current}
		public Action getExprAdditiveLeftAction_1_0() { return cExprAdditiveLeftAction_1_0; }

		//op=OpAdditive
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OpAdditive
		public RuleCall getOpOpAdditiveParserRuleCall_1_1_0() { return cOpOpAdditiveParserRuleCall_1_1_0; }

		//right=ExprMult
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprMult
		public RuleCall getRightExprMultParserRuleCall_1_2_0() { return cRightExprMultParserRuleCall_1_2_0; }
	}

	public class OpAdditiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAdditive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOpPlusAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOpMinusAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//OpAdditive:
		//	{OpPlus} "+" | {OpMinus} "-";
		public ParserRule getRule() { return rule; }

		//{OpPlus} "+" | {OpMinus} "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OpPlus} "+"
		public Group getGroup_0() { return cGroup_0; }

		//{OpPlus}
		public Action getOpPlusAction_0_0() { return cOpPlusAction_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }

		//{OpMinus} "-"
		public Group getGroup_1() { return cGroup_1; }

		//{OpMinus}
		public Action getOpMinusAction_1_0() { return cOpMinusAction_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
	}

	public class ExprMultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprMult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprSignParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprMultLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOpMultiplicativeParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprSignParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ExprMult returns Expr:
		//	ExprSign ({ExprMult.left=current} op=OpMultiplicative right=ExprSign)*;
		public ParserRule getRule() { return rule; }

		//ExprSign ({ExprMult.left=current} op=OpMultiplicative right=ExprSign)*
		public Group getGroup() { return cGroup; }

		//ExprSign
		public RuleCall getExprSignParserRuleCall_0() { return cExprSignParserRuleCall_0; }

		//({ExprMult.left=current} op=OpMultiplicative right=ExprSign)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprMult.left=current}
		public Action getExprMultLeftAction_1_0() { return cExprMultLeftAction_1_0; }

		//op=OpMultiplicative
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//OpMultiplicative
		public RuleCall getOpOpMultiplicativeParserRuleCall_1_1_0() { return cOpOpMultiplicativeParserRuleCall_1_1_0; }

		//right=ExprSign
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprSign
		public RuleCall getRightExprSignParserRuleCall_1_2_0() { return cRightExprSignParserRuleCall_1_2_0; }
	}

	public class OpMultiplicativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMultiplicative");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOpMultAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOpDivRealAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOpModRealAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cPercentSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cOpModIntAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cModKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cOpModRealAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cDivKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//OpMultiplicative:
		//	{OpMult} "*" | {OpDivReal} "/" | {OpModReal} "%" | {OpModInt} "mod" | {OpModReal} "div";
		public ParserRule getRule() { return rule; }

		//{OpMult} "*" | {OpDivReal} "/" | {OpModReal} "%" | {OpModInt} "mod" | {OpModReal} "div"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OpMult} "*"
		public Group getGroup_0() { return cGroup_0; }

		//{OpMult}
		public Action getOpMultAction_0_0() { return cOpMultAction_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_0_1() { return cAsteriskKeyword_0_1; }

		//{OpDivReal} "/"
		public Group getGroup_1() { return cGroup_1; }

		//{OpDivReal}
		public Action getOpDivRealAction_1_0() { return cOpDivRealAction_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }

		//{OpModReal} "%"
		public Group getGroup_2() { return cGroup_2; }

		//{OpModReal}
		public Action getOpModRealAction_2_0() { return cOpModRealAction_2_0; }

		//"%"
		public Keyword getPercentSignKeyword_2_1() { return cPercentSignKeyword_2_1; }

		//{OpModInt} "mod"
		public Group getGroup_3() { return cGroup_3; }

		//{OpModInt}
		public Action getOpModIntAction_3_0() { return cOpModIntAction_3_0; }

		//"mod"
		public Keyword getModKeyword_3_1() { return cModKeyword_3_1; }

		//{OpModReal} "div"
		public Group getGroup_4() { return cGroup_4; }

		//{OpModReal}
		public Action getOpModRealAction_4_0() { return cOpModRealAction_4_0; }

		//"div"
		public Keyword getDivKeyword_4_1() { return cDivKeyword_4_1; }
	}

	public class ExprSignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprSign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExprSignAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOpOpAdditiveParserRuleCall_0_1_0 = (RuleCall)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cRightAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRightExprNotParserRuleCall_0_2_0 = (RuleCall)cRightAssignment_0_2.eContents().get(0);
		private final RuleCall cExprNotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExprSign returns Expr:
		//	{ExprSign} op=OpAdditive right=ExprNot | ExprNot;
		public ParserRule getRule() { return rule; }

		//{ExprSign} op=OpAdditive right=ExprNot | ExprNot
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ExprSign} op=OpAdditive right=ExprNot
		public Group getGroup_0() { return cGroup_0; }

		//{ExprSign}
		public Action getExprSignAction_0_0() { return cExprSignAction_0_0; }

		//op=OpAdditive
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//OpAdditive
		public RuleCall getOpOpAdditiveParserRuleCall_0_1_0() { return cOpOpAdditiveParserRuleCall_0_1_0; }

		//right=ExprNot
		public Assignment getRightAssignment_0_2() { return cRightAssignment_0_2; }

		//ExprNot
		public RuleCall getRightExprNotParserRuleCall_0_2_0() { return cRightExprNotParserRuleCall_0_2_0; }

		//ExprNot
		public RuleCall getExprNotParserRuleCall_1() { return cExprNotParserRuleCall_1; }
	}

	public class ExprNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExprNotAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRightAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRightExprMemberParserRuleCall_0_2_0 = (RuleCall)cRightAssignment_0_2.eContents().get(0);
		private final RuleCall cExprMemberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExprNot returns Expr:
		//	{ExprNot} "not" right=ExprMember | ExprMember;
		public ParserRule getRule() { return rule; }

		//{ExprNot} "not" right=ExprMember | ExprMember
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ExprNot} "not" right=ExprMember
		public Group getGroup_0() { return cGroup_0; }

		//{ExprNot}
		public Action getExprNotAction_0_0() { return cExprNotAction_0_0; }

		//"not"
		public Keyword getNotKeyword_0_1() { return cNotKeyword_0_1; }

		//right=ExprMember
		public Assignment getRightAssignment_0_2() { return cRightAssignment_0_2; }

		//ExprMember
		public RuleCall getRightExprMemberParserRuleCall_0_2_0() { return cRightExprMemberParserRuleCall_0_2_0; }

		//ExprMember
		public RuleCall getExprMemberParserRuleCall_1() { return cExprMemberParserRuleCall_1; }
	}

	public class ExprMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprSingleParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExprMemberLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExprAtomicParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////ExprCustomOperator returns Expr:
		//
		////	ExprMember ({ExprCustomOperator.left=current} op=OPERATOR right=Expr)*
		//
		////; 
		//
		//ExprMember returns Expr:
		//	ExprSingle ({ExprMember.left=current} "." right=ExprAtomic)*;
		public ParserRule getRule() { return rule; }

		//ExprSingle ({ExprMember.left=current} "." right=ExprAtomic)*
		public Group getGroup() { return cGroup; }

		//ExprSingle
		public RuleCall getExprSingleParserRuleCall_0() { return cExprSingleParserRuleCall_0; }

		//({ExprMember.left=current} "." right=ExprAtomic)*
		public Group getGroup_1() { return cGroup_1; }

		//{ExprMember.left=current}
		public Action getExprMemberLeftAction_1_0() { return cExprMemberLeftAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//right=ExprAtomic
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ExprAtomic
		public RuleCall getRightExprAtomicParserRuleCall_1_2_0() { return cRightExprAtomicParserRuleCall_1_2_0; }
	}

	public class ExprSingleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprSingle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprAtomicParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExprIntValAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cIntValAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIntValINTTerminalRuleCall_2_1_0 = (RuleCall)cIntValAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cExprNumValAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cNumValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNumValNumberParserRuleCall_3_1_0 = (RuleCall)cNumValAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cExprStrvalAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cStrValAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStrValSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cStrValAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cExprBoolValAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cBoolValAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Alternatives cBoolValAlternatives_5_1_0 = (Alternatives)cBoolValAssignment_5_1.eContents().get(0);
		private final Keyword cBoolValTrueKeyword_5_1_0_0 = (Keyword)cBoolValAlternatives_5_1_0.eContents().get(0);
		private final Keyword cBoolValFalseKeyword_5_1_0_1 = (Keyword)cBoolValAlternatives_5_1_0.eContents().get(1);
		
		////	| {ExprBuildinFunction} 'buildin' name=ID (parameters=ExprList | '(' ')')
		//
		////	| {ExprBuildinOperator} 'buildin' '(' left=Expr op=OPERATOR right=Expr ')'	
		//
		////	| buildin?='buildin' name=ID parameters=ExprList
		//
		////	| buildin?='buildin' name=ID '(' ')'
		//
		////	| buildin?='buildin' '(' left=Expr op=OPERATOR right=Expr ')' // build in operators
		//
		//ExprSingle returns Expr:
		//	ExprAtomic | "(" Expr ")" | {ExprIntVal} intVal=INT | {ExprNumVal} numVal=Number | {ExprStrval} strVal=STRING |
		//	{ExprBoolVal} boolVal=("true" | "false");
		public ParserRule getRule() { return rule; }

		//ExprAtomic | "(" Expr ")" | {ExprIntVal} intVal=INT | {ExprNumVal} numVal=Number | {ExprStrval} strVal=STRING |
		//{ExprBoolVal} boolVal=("true" | "false")
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExprAtomic
		public RuleCall getExprAtomicParserRuleCall_0() { return cExprAtomicParserRuleCall_0; }

		//"(" Expr ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Expr
		public RuleCall getExprParserRuleCall_1_1() { return cExprParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//{ExprIntVal} intVal=INT
		public Group getGroup_2() { return cGroup_2; }

		//{ExprIntVal}
		public Action getExprIntValAction_2_0() { return cExprIntValAction_2_0; }

		//intVal=INT
		public Assignment getIntValAssignment_2_1() { return cIntValAssignment_2_1; }

		//INT
		public RuleCall getIntValINTTerminalRuleCall_2_1_0() { return cIntValINTTerminalRuleCall_2_1_0; }

		//{ExprNumVal} numVal=Number
		public Group getGroup_3() { return cGroup_3; }

		//{ExprNumVal}
		public Action getExprNumValAction_3_0() { return cExprNumValAction_3_0; }

		//numVal=Number
		public Assignment getNumValAssignment_3_1() { return cNumValAssignment_3_1; }

		//Number
		public RuleCall getNumValNumberParserRuleCall_3_1_0() { return cNumValNumberParserRuleCall_3_1_0; }

		//{ExprStrval} strVal=STRING
		public Group getGroup_4() { return cGroup_4; }

		//{ExprStrval}
		public Action getExprStrvalAction_4_0() { return cExprStrvalAction_4_0; }

		//strVal=STRING
		public Assignment getStrValAssignment_4_1() { return cStrValAssignment_4_1; }

		//STRING
		public RuleCall getStrValSTRINGTerminalRuleCall_4_1_0() { return cStrValSTRINGTerminalRuleCall_4_1_0; }

		//{ExprBoolVal} boolVal=("true" | "false")
		public Group getGroup_5() { return cGroup_5; }

		//{ExprBoolVal}
		public Action getExprBoolValAction_5_0() { return cExprBoolValAction_5_0; }

		//boolVal=("true" | "false")
		public Assignment getBoolValAssignment_5_1() { return cBoolValAssignment_5_1; }

		//"true" | "false"
		public Alternatives getBoolValAlternatives_5_1_0() { return cBoolValAlternatives_5_1_0; }

		//"true"
		public Keyword getBoolValTrueKeyword_5_1_0_0() { return cBoolValTrueKeyword_5_1_0_0; }

		//"false"
		public Keyword getBoolValFalseKeyword_5_1_0_1() { return cBoolValFalseKeyword_5_1_0_1; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Number:
		//	INT "." INT;
		public ParserRule getRule() { return rule; }

		//INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class ExprAtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprAtomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprFunctionCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExprFuncRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFunctionKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameValAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cNameValFuncDefCrossReference_1_2_0 = (CrossReference)cNameValAssignment_1_2.eContents().get(0);
		private final RuleCall cNameValFuncDefIDTerminalRuleCall_1_2_0_1 = (RuleCall)cNameValFuncDefCrossReference_1_2_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExprIdentifierAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameValAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cNameValVarDefCrossReference_2_1_0 = (CrossReference)cNameValAssignment_2_1.eContents().get(0);
		private final RuleCall cNameValVarDefIDTerminalRuleCall_2_1_0_1 = (RuleCall)cNameValVarDefCrossReference_2_1_0.eContents().get(1);
		
		//ExprAtomic returns Expr:
		//	ExprFunctionCall | {ExprFuncRef} "function" nameVal=[FuncDef] | {ExprIdentifier} nameVal=[VarDef];
		public ParserRule getRule() { return rule; }

		//ExprFunctionCall | {ExprFuncRef} "function" nameVal=[FuncDef] | {ExprIdentifier} nameVal=[VarDef]
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExprFunctionCall
		public RuleCall getExprFunctionCallParserRuleCall_0() { return cExprFunctionCallParserRuleCall_0; }

		//{ExprFuncRef} "function" nameVal=[FuncDef]
		public Group getGroup_1() { return cGroup_1; }

		//{ExprFuncRef}
		public Action getExprFuncRefAction_1_0() { return cExprFuncRefAction_1_0; }

		//"function"
		public Keyword getFunctionKeyword_1_1() { return cFunctionKeyword_1_1; }

		//nameVal=[FuncDef]
		public Assignment getNameValAssignment_1_2() { return cNameValAssignment_1_2; }

		//[FuncDef]
		public CrossReference getNameValFuncDefCrossReference_1_2_0() { return cNameValFuncDefCrossReference_1_2_0; }

		//ID
		public RuleCall getNameValFuncDefIDTerminalRuleCall_1_2_0_1() { return cNameValFuncDefIDTerminalRuleCall_1_2_0_1; }

		//{ExprIdentifier} nameVal=[VarDef]
		public Group getGroup_2() { return cGroup_2; }

		//{ExprIdentifier}
		public Action getExprIdentifierAction_2_0() { return cExprIdentifierAction_2_0; }

		//nameVal=[VarDef]
		public Assignment getNameValAssignment_2_1() { return cNameValAssignment_2_1; }

		//[VarDef]
		public CrossReference getNameValVarDefCrossReference_2_1_0() { return cNameValVarDefCrossReference_2_1_0; }

		//ID
		public RuleCall getNameValVarDefIDTerminalRuleCall_2_1_0_1() { return cNameValVarDefIDTerminalRuleCall_2_1_0_1; }
	}

	public class ExprFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprFunctionCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExprFunctioncallAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameValAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cNameValFuncDefCrossReference_0_1_0 = (CrossReference)cNameValAssignment_0_1.eContents().get(0);
		private final RuleCall cNameValFuncDefIDTerminalRuleCall_0_1_0_1 = (RuleCall)cNameValFuncDefCrossReference_0_1_0.eContents().get(1);
		private final Assignment cParametersAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cParametersExprListParserRuleCall_0_2_0 = (RuleCall)cParametersAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExprFunctioncallAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cNameValFuncDefCrossReference_1_1_0 = (CrossReference)cNameValAssignment_1_1.eContents().get(0);
		private final RuleCall cNameValFuncDefIDTerminalRuleCall_1_1_0_1 = (RuleCall)cNameValFuncDefCrossReference_1_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ExprFunctionCall returns Expr:
		//	{ExprFunctioncall} nameVal=[FuncDef] parameters=ExprList | {ExprFunctioncall} nameVal=[FuncDef] "(" ")";
		public ParserRule getRule() { return rule; }

		//{ExprFunctioncall} nameVal=[FuncDef] parameters=ExprList | {ExprFunctioncall} nameVal=[FuncDef] "(" ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ExprFunctioncall} nameVal=[FuncDef] parameters=ExprList
		public Group getGroup_0() { return cGroup_0; }

		//{ExprFunctioncall}
		public Action getExprFunctioncallAction_0_0() { return cExprFunctioncallAction_0_0; }

		//nameVal=[FuncDef]
		public Assignment getNameValAssignment_0_1() { return cNameValAssignment_0_1; }

		//[FuncDef]
		public CrossReference getNameValFuncDefCrossReference_0_1_0() { return cNameValFuncDefCrossReference_0_1_0; }

		//ID
		public RuleCall getNameValFuncDefIDTerminalRuleCall_0_1_0_1() { return cNameValFuncDefIDTerminalRuleCall_0_1_0_1; }

		//parameters=ExprList
		public Assignment getParametersAssignment_0_2() { return cParametersAssignment_0_2; }

		//ExprList
		public RuleCall getParametersExprListParserRuleCall_0_2_0() { return cParametersExprListParserRuleCall_0_2_0; }

		//{ExprFunctioncall} nameVal=[FuncDef] "(" ")"
		public Group getGroup_1() { return cGroup_1; }

		//{ExprFunctioncall}
		public Action getExprFunctioncallAction_1_0() { return cExprFunctioncallAction_1_0; }

		//nameVal=[FuncDef]
		public Assignment getNameValAssignment_1_1() { return cNameValAssignment_1_1; }

		//[FuncDef]
		public CrossReference getNameValFuncDefCrossReference_1_1_0() { return cNameValFuncDefCrossReference_1_1_0; }

		//ID
		public RuleCall getNameValFuncDefIDTerminalRuleCall_1_1_0_1() { return cNameValFuncDefIDTerminalRuleCall_1_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class ExprListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsExprParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsExprParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExprList:
		//	"(" params+=Expr ("," params+=Expr)* ")";
		public ParserRule getRule() { return rule; }

		//"(" params+=Expr ("," params+=Expr)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//params+=Expr
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }

		//Expr
		public RuleCall getParamsExprParserRuleCall_1_0() { return cParamsExprParserRuleCall_1_0; }

		//("," params+=Expr)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//params+=Expr
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//Expr
		public RuleCall getParamsExprParserRuleCall_2_1_0() { return cParamsExprParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private ProgramElements pProgram;
	private PackageDeclarationElements pPackageDeclaration;
	private ImportElements pImport;
	private ImportStringElements pImportString;
	private EntityElements pEntity;
	private InitBlockElements pInitBlock;
	private TypeDefElements pTypeDef;
	private NativeFuncElements pNativeFunc;
	private NativeTypeElements pNativeType;
	private ClassDefElements pClassDef;
	private ClassMemberElements pClassMember;
	private VarDefElements pVarDef;
	private TypeExprElements pTypeExpr;
	private FuncDefElements pFuncDef;
	private ParameterDefElements pParameterDef;
	private StatementsElements pStatements;
	private StatementElements pStatement;
	private LocalVarDefElements pLocalVarDef;
	private StmtExitwhenElements pStmtExitwhen;
	private StmtLoopElements pStmtLoop;
	private StmtReturnElements pStmtReturn;
	private StmtIfElements pStmtIf;
	private StmtWhileElements pStmtWhile;
	private StmtSetOrCallElements pStmtSetOrCall;
	private OpAssignmentElements pOpAssignment;
	private ExprElements pExpr;
	private ExprOrElements pExprOr;
	private ExprAndElements pExprAnd;
	private ExprEqualityElements pExprEquality;
	private OpEqualityElements pOpEquality;
	private ExprComparisonElements pExprComparison;
	private OpComparisonElements pOpComparison;
	private ExprAdditiveElements pExprAdditive;
	private OpAdditiveElements pOpAdditive;
	private ExprMultElements pExprMult;
	private OpMultiplicativeElements pOpMultiplicative;
	private ExprSignElements pExprSign;
	private ExprNotElements pExprNot;
	private ExprMemberElements pExprMember;
	private ExprSingleElements pExprSingle;
	private NumberElements pNumber;
	private ExprAtomicElements pExprAtomic;
	private ExprFunctionCallElements pExprFunctionCall;
	private ExprListElements pExprList;
	private TerminalRule tID;
	private TerminalRule tINT;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tNL;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public PscriptGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Program:
	//	NL* packages+=PackageDeclaration packages+=PackageDeclaration* NL*;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//PackageDeclaration:
	//	{PackageDeclaration} "package" name=ID (NL* imports+=Import)* NL* (elements+=Entity NL*)* "endpackage" NL*;
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return (pPackageDeclaration != null) ? pPackageDeclaration : (pPackageDeclaration = new PackageDeclarationElements());
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=ImportString NL;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//ImportString:
	//	ID "." ("*" | ID);
	public ImportStringElements getImportStringAccess() {
		return (pImportString != null) ? pImportString : (pImportString = new ImportStringElements());
	}
	
	public ParserRule getImportStringRule() {
		return getImportStringAccess().getRule();
	}

	//Entity:
	//	TypeDef | FuncDef | VarDef | InitBlock | NativeFunc;
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//InitBlock:
	//	name="init" body=Statements "endinit";
	public InitBlockElements getInitBlockAccess() {
		return (pInitBlock != null) ? pInitBlock : (pInitBlock = new InitBlockElements());
	}
	
	public ParserRule getInitBlockRule() {
		return getInitBlockAccess().getRule();
	}

	//TypeDef:
	//	NativeType | ClassDef;
	public TypeDefElements getTypeDefAccess() {
		return (pTypeDef != null) ? pTypeDef : (pTypeDef = new TypeDefElements());
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}

	//NativeFunc returns FuncDef:
	//	{NativeFunc} "constant"? "native" name=ID ("(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" |
	//	"takes" "nothing" | "takes" parameters+=ParameterDef ("," parameters+=ParameterDef)*) ("returns" type=TypeExpr |
	//	("returns" "nothing")?) NL;
	public NativeFuncElements getNativeFuncAccess() {
		return (pNativeFunc != null) ? pNativeFunc : (pNativeFunc = new NativeFuncElements());
	}
	
	public ParserRule getNativeFuncRule() {
		return getNativeFuncAccess().getRule();
	}

	//NativeType returns TypeDef:
	//	{NativeType} "type" name=ID ("extends" superName=TypeExpr)? NL;
	public NativeTypeElements getNativeTypeAccess() {
		return (pNativeType != null) ? pNativeType : (pNativeType = new NativeTypeElements());
	}
	
	public ParserRule getNativeTypeRule() {
		return getNativeTypeAccess().getRule();
	}

	/// * classes and their members * / ClassDef returns TypeDef:
	//	{ClassDef} "class" name=ID NL (NL | members+=ClassMember)* "endclass" NL;
	public ClassDefElements getClassDefAccess() {
		return (pClassDef != null) ? pClassDef : (pClassDef = new ClassDefElements());
	}
	
	public ParserRule getClassDefRule() {
		return getClassDefAccess().getRule();
	}

	//ClassMember:
	//	VarDef | FuncDef;
	public ClassMemberElements getClassMemberAccess() {
		return (pClassMember != null) ? pClassMember : (pClassMember = new ClassMemberElements());
	}
	
	public ParserRule getClassMemberRule() {
		return getClassMemberAccess().getRule();
	}

	//VarDef:
	//	{VarDef} (constant?="val" type=TypeExpr? name=ID "=" e=Expr | constant?="constant"? type=TypeExpr name=ID ("="
	//	e=Expr)? | "glob" name=ID "=" e=Expr) NL;
	public VarDefElements getVarDefAccess() {
		return (pVarDef != null) ? pVarDef : (pVarDef = new VarDefElements());
	}
	
	public ParserRule getVarDefRule() {
		return getVarDefAccess().getRule();
	}

	//TypeExpr:
	//	{TypeExprRef} name=[TypeDef] | {TypeExprBuildin} name=("integer" | "real" | "string" | "boolean" | "handle" | "code");
	public TypeExprElements getTypeExprAccess() {
		return (pTypeExpr != null) ? pTypeExpr : (pTypeExpr = new TypeExprElements());
	}
	
	public ParserRule getTypeExprRule() {
		return getTypeExprAccess().getRule();
	}

	/// * functions * / FuncDef:
	//	"function" name=ID ("(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" | "takes" "nothing" | "takes"
	//	parameters+=ParameterDef ("," parameters+=ParameterDef)*) ("returns" type=TypeExpr | ("returns" "nothing")?) NL
	//	body=Statements "endfunction";
	public FuncDefElements getFuncDefAccess() {
		return (pFuncDef != null) ? pFuncDef : (pFuncDef = new FuncDefElements());
	}
	
	public ParserRule getFuncDefRule() {
		return getFuncDefAccess().getRule();
	}

	//ParameterDef returns VarDef:
	//	{ParameterDef} type=TypeExpr name=ID;
	public ParameterDefElements getParameterDefAccess() {
		return (pParameterDef != null) ? pParameterDef : (pParameterDef = new ParameterDefElements());
	}
	
	public ParserRule getParameterDefRule() {
		return getParameterDefAccess().getRule();
	}

	//Statements:
	//	{Statements} (NL | statements+=Statement)*;
	public StatementsElements getStatementsAccess() {
		return (pStatements != null) ? pStatements : (pStatements = new StatementsElements());
	}
	
	public ParserRule getStatementsRule() {
		return getStatementsAccess().getRule();
	}

	//Statement:
	//	StmtIf | StmtWhile | LocalVarDef | StmtSetOrCall | StmtReturn | StmtLoop | StmtExitwhen;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//LocalVarDef returns VarDef:
	//	{VarDef} ("local" | constant?="val") type=TypeExpr? name=ID ("=" e=Expr)? NL;
	public LocalVarDefElements getLocalVarDefAccess() {
		return (pLocalVarDef != null) ? pLocalVarDef : (pLocalVarDef = new LocalVarDefElements());
	}
	
	public ParserRule getLocalVarDefRule() {
		return getLocalVarDefAccess().getRule();
	}

	//StmtExitwhen:
	//	"exitwhen" e=Expr NL;
	public StmtExitwhenElements getStmtExitwhenAccess() {
		return (pStmtExitwhen != null) ? pStmtExitwhen : (pStmtExitwhen = new StmtExitwhenElements());
	}
	
	public ParserRule getStmtExitwhenRule() {
		return getStmtExitwhenAccess().getRule();
	}

	//StmtLoop:
	//	"loop" NL body=Statements "endloop" NL;
	public StmtLoopElements getStmtLoopAccess() {
		return (pStmtLoop != null) ? pStmtLoop : (pStmtLoop = new StmtLoopElements());
	}
	
	public ParserRule getStmtLoopRule() {
		return getStmtLoopAccess().getRule();
	}

	//StmtReturn:
	//	{StmtReturn} "return" e=Expr? NL;
	public StmtReturnElements getStmtReturnAccess() {
		return (pStmtReturn != null) ? pStmtReturn : (pStmtReturn = new StmtReturnElements());
	}
	
	public ParserRule getStmtReturnRule() {
		return getStmtReturnAccess().getRule();
	}

	//StmtIf:
	//	"if" cond=Expr "then"? NL thenBlock=Statements ("elseif" elseIfConds+=Expr "then"? NL elseIfBlocks+=Statements)*
	//	("else" NL elseBlock=Statements)? "endif" NL;
	public StmtIfElements getStmtIfAccess() {
		return (pStmtIf != null) ? pStmtIf : (pStmtIf = new StmtIfElements());
	}
	
	public ParserRule getStmtIfRule() {
		return getStmtIfAccess().getRule();
	}

	//StmtWhile:
	//	"while" cond=Expr NL body=Statements "endwhile" NL;
	public StmtWhileElements getStmtWhileAccess() {
		return (pStmtWhile != null) ? pStmtWhile : (pStmtWhile = new StmtWhileElements());
	}
	
	public ParserRule getStmtWhileRule() {
		return getStmtWhileAccess().getRule();
	}

	//StmtSetOrCall:
	//	{StmtCall} ("call" | "set")? e=Expr ({StmtSet.left=current} opAssignment=OpAssignment right=Expr)? NL;
	public StmtSetOrCallElements getStmtSetOrCallAccess() {
		return (pStmtSetOrCall != null) ? pStmtSetOrCall : (pStmtSetOrCall = new StmtSetOrCallElements());
	}
	
	public ParserRule getStmtSetOrCallRule() {
		return getStmtSetOrCallAccess().getRule();
	}

	//OpAssignment:
	//	{OpAssign} "=" | {OpPlusAssign} "+=" | {OpMinusAssign} "-=";
	public OpAssignmentElements getOpAssignmentAccess() {
		return (pOpAssignment != null) ? pOpAssignment : (pOpAssignment = new OpAssignmentElements());
	}
	
	public ParserRule getOpAssignmentRule() {
		return getOpAssignmentAccess().getRule();
	}

	/// * expressions * / / * operator precedence (weakest first):
	//
	//or
	//
	//and
	//
	//== !=				// 
	//
	//<= >= < >			// comparisons
	//
	//+ -
	//
	// * / % mod div		// mod and div work on integers, / and % for reals
	//
	//
	//
	//
	//
	//+ -					// unary
	//
	//not					// unary
	//
	//
	//
	//.					// member
	//
	// * / Expr:
	//	ExprOr;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//// TODO this is not really an expression, it should only be used at top level
	//
	//ExprOr returns Expr:
	//	ExprAnd ({ExprOr.left=current} op="or" right=ExprAnd)*;
	public ExprOrElements getExprOrAccess() {
		return (pExprOr != null) ? pExprOr : (pExprOr = new ExprOrElements());
	}
	
	public ParserRule getExprOrRule() {
		return getExprOrAccess().getRule();
	}

	//ExprAnd returns Expr:
	//	ExprEquality ({ExprAnd.left=current} op="and" right=ExprEquality)*;
	public ExprAndElements getExprAndAccess() {
		return (pExprAnd != null) ? pExprAnd : (pExprAnd = new ExprAndElements());
	}
	
	public ParserRule getExprAndRule() {
		return getExprAndAccess().getRule();
	}

	//ExprEquality returns Expr:
	//	ExprComparison ({ExprEquality.left=current} op=OpEquality right=ExprComparison)*;
	public ExprEqualityElements getExprEqualityAccess() {
		return (pExprEquality != null) ? pExprEquality : (pExprEquality = new ExprEqualityElements());
	}
	
	public ParserRule getExprEqualityRule() {
		return getExprEqualityAccess().getRule();
	}

	//OpEquality:
	//	{OpEquals} "==" | {OpUnequals} "!=";
	public OpEqualityElements getOpEqualityAccess() {
		return (pOpEquality != null) ? pOpEquality : (pOpEquality = new OpEqualityElements());
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//ExprComparison returns Expr:
	//	ExprAdditive ({ExprComparison.left=current} op=OpComparison right=ExprAdditive)*;
	public ExprComparisonElements getExprComparisonAccess() {
		return (pExprComparison != null) ? pExprComparison : (pExprComparison = new ExprComparisonElements());
	}
	
	public ParserRule getExprComparisonRule() {
		return getExprComparisonAccess().getRule();
	}

	//OpComparison:
	//	{OpLessEq} "<=" | {OpLess} "<" | {OpGreaterEq} ">=" | {OpGreater} ">";
	public OpComparisonElements getOpComparisonAccess() {
		return (pOpComparison != null) ? pOpComparison : (pOpComparison = new OpComparisonElements());
	}
	
	public ParserRule getOpComparisonRule() {
		return getOpComparisonAccess().getRule();
	}

	//ExprAdditive returns Expr:
	//	ExprMult ({ExprAdditive.left=current} op=OpAdditive right=ExprMult)*;
	public ExprAdditiveElements getExprAdditiveAccess() {
		return (pExprAdditive != null) ? pExprAdditive : (pExprAdditive = new ExprAdditiveElements());
	}
	
	public ParserRule getExprAdditiveRule() {
		return getExprAdditiveAccess().getRule();
	}

	//OpAdditive:
	//	{OpPlus} "+" | {OpMinus} "-";
	public OpAdditiveElements getOpAdditiveAccess() {
		return (pOpAdditive != null) ? pOpAdditive : (pOpAdditive = new OpAdditiveElements());
	}
	
	public ParserRule getOpAdditiveRule() {
		return getOpAdditiveAccess().getRule();
	}

	//ExprMult returns Expr:
	//	ExprSign ({ExprMult.left=current} op=OpMultiplicative right=ExprSign)*;
	public ExprMultElements getExprMultAccess() {
		return (pExprMult != null) ? pExprMult : (pExprMult = new ExprMultElements());
	}
	
	public ParserRule getExprMultRule() {
		return getExprMultAccess().getRule();
	}

	//OpMultiplicative:
	//	{OpMult} "*" | {OpDivReal} "/" | {OpModReal} "%" | {OpModInt} "mod" | {OpModReal} "div";
	public OpMultiplicativeElements getOpMultiplicativeAccess() {
		return (pOpMultiplicative != null) ? pOpMultiplicative : (pOpMultiplicative = new OpMultiplicativeElements());
	}
	
	public ParserRule getOpMultiplicativeRule() {
		return getOpMultiplicativeAccess().getRule();
	}

	//ExprSign returns Expr:
	//	{ExprSign} op=OpAdditive right=ExprNot | ExprNot;
	public ExprSignElements getExprSignAccess() {
		return (pExprSign != null) ? pExprSign : (pExprSign = new ExprSignElements());
	}
	
	public ParserRule getExprSignRule() {
		return getExprSignAccess().getRule();
	}

	//ExprNot returns Expr:
	//	{ExprNot} "not" right=ExprMember | ExprMember;
	public ExprNotElements getExprNotAccess() {
		return (pExprNot != null) ? pExprNot : (pExprNot = new ExprNotElements());
	}
	
	public ParserRule getExprNotRule() {
		return getExprNotAccess().getRule();
	}

	////ExprCustomOperator returns Expr:
	//
	////	ExprMember ({ExprCustomOperator.left=current} op=OPERATOR right=Expr)*
	//
	////; 
	//
	//ExprMember returns Expr:
	//	ExprSingle ({ExprMember.left=current} "." right=ExprAtomic)*;
	public ExprMemberElements getExprMemberAccess() {
		return (pExprMember != null) ? pExprMember : (pExprMember = new ExprMemberElements());
	}
	
	public ParserRule getExprMemberRule() {
		return getExprMemberAccess().getRule();
	}

	////	| {ExprBuildinFunction} 'buildin' name=ID (parameters=ExprList | '(' ')')
	//
	////	| {ExprBuildinOperator} 'buildin' '(' left=Expr op=OPERATOR right=Expr ')'	
	//
	////	| buildin?='buildin' name=ID parameters=ExprList
	//
	////	| buildin?='buildin' name=ID '(' ')'
	//
	////	| buildin?='buildin' '(' left=Expr op=OPERATOR right=Expr ')' // build in operators
	//
	//ExprSingle returns Expr:
	//	ExprAtomic | "(" Expr ")" | {ExprIntVal} intVal=INT | {ExprNumVal} numVal=Number | {ExprStrval} strVal=STRING |
	//	{ExprBoolVal} boolVal=("true" | "false");
	public ExprSingleElements getExprSingleAccess() {
		return (pExprSingle != null) ? pExprSingle : (pExprSingle = new ExprSingleElements());
	}
	
	public ParserRule getExprSingleRule() {
		return getExprSingleAccess().getRule();
	}

	//Number:
	//	INT "." INT;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//ExprAtomic returns Expr:
	//	ExprFunctionCall | {ExprFuncRef} "function" nameVal=[FuncDef] | {ExprIdentifier} nameVal=[VarDef];
	public ExprAtomicElements getExprAtomicAccess() {
		return (pExprAtomic != null) ? pExprAtomic : (pExprAtomic = new ExprAtomicElements());
	}
	
	public ParserRule getExprAtomicRule() {
		return getExprAtomicAccess().getRule();
	}

	//ExprFunctionCall returns Expr:
	//	{ExprFunctioncall} nameVal=[FuncDef] parameters=ExprList | {ExprFunctioncall} nameVal=[FuncDef] "(" ")";
	public ExprFunctionCallElements getExprFunctionCallAccess() {
		return (pExprFunctionCall != null) ? pExprFunctionCall : (pExprFunctionCall = new ExprFunctionCallElements());
	}
	
	public ParserRule getExprFunctionCallRule() {
		return getExprFunctionCallAccess().getRule();
	}

	//ExprList:
	//	"(" params+=Expr ("," params+=Expr)* ")";
	public ExprListElements getExprListAccess() {
		return (pExprList != null) ? pExprList : (pExprList = new ExprListElements());
	}
	
	public ParserRule getExprListRule() {
		return getExprListAccess().getRule();
	}

	//// Pseudo rules to add common super types:
	//
	//// Terminals:
	//
	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//// TODO special ints (hex, oct, ascii)
	//
	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//// multiline comments changed to consume whitespace to make the javadoc work		
	//
	//terminal ML_COMMENT:
	//	"/ *"->"* /" (" " | "\t" | "\n" | "\r")*;
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")? | "globals" | "endglobals";
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal NL:
	//	"\n\r" | "\n" | "\r" | "\r\n";
	public TerminalRule getNLRule() {
		return (tNL != null) ? tNL : (tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NL"));
	} 

	////terminal OPERATOR : ('+'|'-'|'*'|'/'|'%'|'$'|'<'|'>'|'='|'~'|'!'|'^'|'|'|'&'|':')+;
	//
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
