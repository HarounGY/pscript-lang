/*
* generated by Xtext
*/
package de.peeeq.pscript.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import de.peeeq.pscript.services.PscriptGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class PscriptParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private PscriptGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Program_Group(this, this, 0, inst);
			case 1: return new PackageDeclaration_Group(this, this, 1, inst);
			case 2: return new Import_Group(this, this, 2, inst);
			case 3: return new Entity_Alternatives(this, this, 3, inst);
			case 4: return new InitBlock_Group(this, this, 4, inst);
			case 5: return new TypeDef_Alternatives(this, this, 5, inst);
			case 6: return new NativeType_Group(this, this, 6, inst);
			case 7: return new ClassDef_Group(this, this, 7, inst);
			case 8: return new ClassMember_Group(this, this, 8, inst);
			case 9: return new VarDef_Group(this, this, 9, inst);
			case 10: return new TypeExpr_Group(this, this, 10, inst);
			case 11: return new FuncDef_Group(this, this, 11, inst);
			case 12: return new ParameterDef_Group(this, this, 12, inst);
			case 13: return new Statements_Group(this, this, 13, inst);
			case 14: return new Statement_Alternatives(this, this, 14, inst);
			case 15: return new StmtReturn_Group(this, this, 15, inst);
			case 16: return new StmtIf_Group(this, this, 16, inst);
			case 17: return new ElseBlock_Alternatives(this, this, 17, inst);
			case 18: return new ElseIfBlock_StatementsAssignment(this, this, 18, inst);
			case 19: return new StmtWhile_Group(this, this, 19, inst);
			case 20: return new StmtExpr_Group(this, this, 20, inst);
			case 21: return new Expr_ExprAssignmentParserRuleCall(this, this, 21, inst);
			case 22: return new ExprAssignment_Group(this, this, 22, inst);
			case 23: return new OpAssignment_Alternatives(this, this, 23, inst);
			case 24: return new ExprOr_Group(this, this, 24, inst);
			case 25: return new ExprAnd_Group(this, this, 25, inst);
			case 26: return new ExprEquality_Group(this, this, 26, inst);
			case 27: return new OpEquality_Alternatives(this, this, 27, inst);
			case 28: return new ExprComparison_Group(this, this, 28, inst);
			case 29: return new OpComparison_Alternatives(this, this, 29, inst);
			case 30: return new ExprAdditive_Group(this, this, 30, inst);
			case 31: return new OpAdditive_Alternatives(this, this, 31, inst);
			case 32: return new ExprMult_Group(this, this, 32, inst);
			case 33: return new OpMultiplicative_Alternatives(this, this, 33, inst);
			case 34: return new ExprSign_Alternatives(this, this, 34, inst);
			case 35: return new ExprNot_Alternatives(this, this, 35, inst);
			case 36: return new ExprMember_Group(this, this, 36, inst);
			case 37: return new ExprSingle_Alternatives(this, this, 37, inst);
			case 38: return new ExprAtomic_Alternatives(this, this, 38, inst);
			case 39: return new ExprList_Group(this, this, 39, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Program ****************
 *
 * Program:
 * 	NL* packages+=PackageDeclaration packages+=PackageDeclaration* NL*;
 *
 **/

// NL* packages+=PackageDeclaration packages+=PackageDeclaration* NL*
protected class Program_Group extends GroupToken {
	
	public Program_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProgramAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Program_PackagesAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Program_PackagesAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProgramRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// packages+=PackageDeclaration
protected class Program_PackagesAssignment_1 extends AssignmentToken  {
	
	public Program_PackagesAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProgramAccess().getPackagesAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PackageDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("packages",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("packages");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPackageDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProgramAccess().getPackagesPackageDeclarationParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// packages+=PackageDeclaration*
protected class Program_PackagesAssignment_2 extends AssignmentToken  {
	
	public Program_PackagesAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProgramAccess().getPackagesAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PackageDeclaration_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("packages",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("packages");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPackageDeclarationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProgramAccess().getPackagesPackageDeclarationParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Program_PackagesAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Program_PackagesAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Program ****************/


/************ begin Rule PackageDeclaration ****************
 *
 * PackageDeclaration:
 * 	{PackageDeclaration} "package" name=ID "{" (NL* imports+=Import)* NL* (elements+=Entity NL*)* "}" NL*;
 *
 **/

// {PackageDeclaration} "package" name=ID "{" (NL* imports+=Import)* NL* (elements+=Entity NL*)* "}" NL*
protected class PackageDeclaration_Group extends GroupToken {
	
	public PackageDeclaration_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPackageDeclarationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PackageDeclaration_RightCurlyBracketKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPackageDeclarationAccess().getPackageDeclarationAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {PackageDeclaration}
protected class PackageDeclaration_PackageDeclarationAction_0 extends ActionToken  {

	public PackageDeclaration_PackageDeclarationAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getPackageDeclarationAccess().getPackageDeclarationAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "package"
protected class PackageDeclaration_PackageKeyword_1 extends KeywordToken  {
	
	public PackageDeclaration_PackageKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPackageDeclarationAccess().getPackageKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PackageDeclaration_PackageDeclarationAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class PackageDeclaration_NameAssignment_2 extends AssignmentToken  {
	
	public PackageDeclaration_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPackageDeclarationAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PackageDeclaration_PackageKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPackageDeclarationAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPackageDeclarationAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class PackageDeclaration_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public PackageDeclaration_LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPackageDeclarationAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PackageDeclaration_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (NL* imports+=Import)*
protected class PackageDeclaration_Group_4 extends GroupToken {
	
	public PackageDeclaration_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPackageDeclarationAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PackageDeclaration_ImportsAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// imports+=Import
protected class PackageDeclaration_ImportsAssignment_4_1 extends AssignmentToken  {
	
	public PackageDeclaration_ImportsAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPackageDeclarationAccess().getImportsAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("imports",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPackageDeclarationAccess().getImportsImportParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PackageDeclaration_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PackageDeclaration_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (elements+=Entity NL*)*
protected class PackageDeclaration_Group_6 extends GroupToken {
	
	public PackageDeclaration_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPackageDeclarationAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PackageDeclaration_ElementsAssignment_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// elements+=Entity
protected class PackageDeclaration_ElementsAssignment_6_0 extends AssignmentToken  {
	
	public PackageDeclaration_ElementsAssignment_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPackageDeclarationAccess().getElementsAssignment_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Entity_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEntityRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPackageDeclarationAccess().getElementsEntityParserRuleCall_6_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PackageDeclaration_Group_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new PackageDeclaration_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new PackageDeclaration_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}"
protected class PackageDeclaration_RightCurlyBracketKeyword_7 extends KeywordToken  {
	
	public PackageDeclaration_RightCurlyBracketKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPackageDeclarationAccess().getRightCurlyBracketKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PackageDeclaration_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new PackageDeclaration_Group_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new PackageDeclaration_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule PackageDeclaration ****************/


/************ begin Rule Import ****************
 *
 * Import:
 * 	"import" importedNamespace=ImportString NL;
 *
 **/

// "import" importedNamespace=ImportString NL
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Import_NLTerminalRuleCall_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImportRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "import"
protected class Import_ImportKeyword_0 extends KeywordToken  {
	
	public Import_ImportKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getImportKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// importedNamespace=ImportString
protected class Import_ImportedNamespaceAssignment_1 extends AssignmentToken  {
	
	public Import_ImportedNamespaceAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getImportedNamespaceAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Import_ImportKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("importedNamespace",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("importedNamespace");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getImportAccess().getImportedNamespaceImportStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getImportAccess().getImportedNamespaceImportStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// NL
protected class Import_NLTerminalRuleCall_2 extends UnassignedTextToken {

	public Import_NLTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getImportAccess().getNLTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Import_ImportedNamespaceAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Import ****************/



/************ begin Rule Entity ****************
 *
 * Entity:
 * 	TypeDef | FuncDef | VarDef | InitBlock;
 *
 **/

// TypeDef | FuncDef | VarDef | InitBlock
protected class Entity_Alternatives extends AlternativesToken {

	public Entity_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEntityAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Entity_TypeDefParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Entity_FuncDefParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Entity_VarDefParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Entity_InitBlockParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getClassDefAccess().getClassDefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFuncDefAccess().getFuncDefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getInitBlockRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNativeTypeAccess().getNativeTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVarDefAccess().getVarDefAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TypeDef
protected class Entity_TypeDefParserRuleCall_0 extends RuleCallToken {
	
	public Entity_TypeDefParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEntityAccess().getTypeDefParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeDef_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getClassDefAccess().getClassDefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNativeTypeAccess().getNativeTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(TypeDef_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FuncDef
protected class Entity_FuncDefParserRuleCall_1 extends RuleCallToken {
	
	public Entity_FuncDefParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEntityAccess().getFuncDefParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FuncDef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFuncDefAccess().getFuncDefAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(FuncDef_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// VarDef
protected class Entity_VarDefParserRuleCall_2 extends RuleCallToken {
	
	public Entity_VarDefParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEntityAccess().getVarDefParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VarDef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVarDefAccess().getVarDefAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(VarDef_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// InitBlock
protected class Entity_InitBlockParserRuleCall_3 extends RuleCallToken {
	
	public Entity_InitBlockParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEntityAccess().getInitBlockParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InitBlock_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInitBlockRule().getType().getClassifier())
			return null;
		if(checkForRecursion(InitBlock_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Entity ****************/


/************ begin Rule InitBlock ****************
 *
 * InitBlock:
 * 	name="init" "{" body=Statements "}";
 *
 **/

// name="init" "{" body=Statements "}"
protected class InitBlock_Group extends GroupToken {
	
	public InitBlock_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInitBlockAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InitBlock_RightCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInitBlockRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name="init"
protected class InitBlock_NameAssignment_0 extends AssignmentToken  {
	
	public InitBlock_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInitBlockAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getInitBlockAccess().getNameInitKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getInitBlockAccess().getNameInitKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class InitBlock_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public InitBlock_LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInitBlockAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InitBlock_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// body=Statements
protected class InitBlock_BodyAssignment_2 extends AssignmentToken  {
	
	public InitBlock_BodyAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInitBlockAccess().getBodyAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statements_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("body",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInitBlockAccess().getBodyStatementsParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InitBlock_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class InitBlock_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public InitBlock_RightCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInitBlockAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InitBlock_BodyAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule InitBlock ****************/


/************ begin Rule TypeDef ****************
 *
 * TypeDef:
 * 	NativeType | ClassDef;
 *
 **/

// NativeType | ClassDef
protected class TypeDef_Alternatives extends AlternativesToken {

	public TypeDef_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTypeDefAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeDef_NativeTypeParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TypeDef_ClassDefParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getClassDefAccess().getClassDefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNativeTypeAccess().getNativeTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NativeType
protected class TypeDef_NativeTypeParserRuleCall_0 extends RuleCallToken {
	
	public TypeDef_NativeTypeParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeDefAccess().getNativeTypeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNativeTypeAccess().getNativeTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(NativeType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ClassDef
protected class TypeDef_ClassDefParserRuleCall_1 extends RuleCallToken {
	
	public TypeDef_ClassDefParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeDefAccess().getClassDefParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassDef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getClassDefAccess().getClassDefAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ClassDef_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TypeDef ****************/


/************ begin Rule NativeType ****************
 *
 * NativeType returns TypeDef:
 * 	{NativeType} "native" "type" name=ID "=" origName=ID ("extends" superName=TypeExpr)? NL;
 *
 **/

// {NativeType} "native" "type" name=ID "=" origName=ID ("extends" superName=TypeExpr)? NL
protected class NativeType_Group extends GroupToken {
	
	public NativeType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNativeTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeType_NLTerminalRuleCall_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNativeTypeAccess().getNativeTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {NativeType}
protected class NativeType_NativeTypeAction_0 extends ActionToken  {

	public NativeType_NativeTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNativeTypeAccess().getNativeTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "native"
protected class NativeType_NativeKeyword_1 extends KeywordToken  {
	
	public NativeType_NativeKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNativeTypeAccess().getNativeKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeType_NativeTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "type"
protected class NativeType_TypeKeyword_2 extends KeywordToken  {
	
	public NativeType_TypeKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNativeTypeAccess().getTypeKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeType_NativeKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class NativeType_NameAssignment_3 extends AssignmentToken  {
	
	public NativeType_NameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNativeTypeAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeType_TypeKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNativeTypeAccess().getNameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNativeTypeAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class NativeType_EqualsSignKeyword_4 extends KeywordToken  {
	
	public NativeType_EqualsSignKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNativeTypeAccess().getEqualsSignKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeType_NameAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// origName=ID
protected class NativeType_OrigNameAssignment_5 extends AssignmentToken  {
	
	public NativeType_OrigNameAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNativeTypeAccess().getOrigNameAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeType_EqualsSignKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("origName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("origName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNativeTypeAccess().getOrigNameIDTerminalRuleCall_5_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNativeTypeAccess().getOrigNameIDTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// ("extends" superName=TypeExpr)?
protected class NativeType_Group_6 extends GroupToken {
	
	public NativeType_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNativeTypeAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeType_SuperNameAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "extends"
protected class NativeType_ExtendsKeyword_6_0 extends KeywordToken  {
	
	public NativeType_ExtendsKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNativeTypeAccess().getExtendsKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeType_OrigNameAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// superName=TypeExpr
protected class NativeType_SuperNameAssignment_6_1 extends AssignmentToken  {
	
	public NativeType_SuperNameAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNativeTypeAccess().getSuperNameAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("superName",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("superName");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNativeTypeAccess().getSuperNameTypeExprParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NativeType_ExtendsKeyword_6_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// NL
protected class NativeType_NLTerminalRuleCall_7 extends UnassignedTextToken {

	public NativeType_NLTerminalRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNativeTypeAccess().getNLTerminalRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NativeType_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NativeType_OrigNameAssignment_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule NativeType ****************/


/************ begin Rule ClassDef ****************
 *
 * / * classes and their members * / ClassDef returns TypeDef:
 * 	{ClassDef} "class" name=ID "{" members+=ClassMember* NL* "}" NL;
 *
 **/

// {ClassDef} "class" name=ID "{" members+=ClassMember* NL* "}" NL
protected class ClassDef_Group extends GroupToken {
	
	public ClassDef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getClassDefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassDef_NLTerminalRuleCall_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getClassDefAccess().getClassDefAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ClassDef}
protected class ClassDef_ClassDefAction_0 extends ActionToken  {

	public ClassDef_ClassDefAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getClassDefAccess().getClassDefAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "class"
protected class ClassDef_ClassKeyword_1 extends KeywordToken  {
	
	public ClassDef_ClassKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClassDefAccess().getClassKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassDef_ClassDefAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class ClassDef_NameAssignment_2 extends AssignmentToken  {
	
	public ClassDef_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassDef_ClassKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getClassDefAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getClassDefAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class ClassDef_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ClassDef_LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClassDefAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassDef_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// members+=ClassMember*
protected class ClassDef_MembersAssignment_4 extends AssignmentToken  {
	
	public ClassDef_MembersAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefAccess().getMembersAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassMember_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("members",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("members");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClassMemberRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassDefAccess().getMembersClassMemberParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassDef_MembersAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ClassDef_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ClassDef_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public ClassDef_RightCurlyBracketKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClassDefAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassDef_MembersAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ClassDef_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// NL
protected class ClassDef_NLTerminalRuleCall_7 extends UnassignedTextToken {

	public ClassDef_NLTerminalRuleCall_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getClassDefAccess().getNLTerminalRuleCall_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassDef_RightCurlyBracketKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ClassDef ****************/


/************ begin Rule ClassMember ****************
 *
 * ClassMember:
 * 	NL* (VarDef | FuncDef);
 *
 **/

// NL* (VarDef | FuncDef)
protected class ClassMember_Group extends GroupToken {
	
	public ClassMember_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getClassMemberAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassMember_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFuncDefAccess().getFuncDefAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVarDefAccess().getVarDefAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// VarDef | FuncDef
protected class ClassMember_Alternatives_1 extends AlternativesToken {

	public ClassMember_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getClassMemberAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassMember_VarDefParserRuleCall_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ClassMember_FuncDefParserRuleCall_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// VarDef
protected class ClassMember_VarDefParserRuleCall_1_0 extends RuleCallToken {
	
	public ClassMember_VarDefParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getClassMemberAccess().getVarDefParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VarDef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVarDefAccess().getVarDefAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(VarDef_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// FuncDef
protected class ClassMember_FuncDefParserRuleCall_1_1 extends RuleCallToken {
	
	public ClassMember_FuncDefParserRuleCall_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getClassMemberAccess().getFuncDefParserRuleCall_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FuncDef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFuncDefAccess().getFuncDefAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(FuncDef_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}



/************ end Rule ClassMember ****************/


/************ begin Rule VarDef ****************
 *
 * VarDef:
 * 	{VarDef} ("var" | constant?="val") name=ID (":" type=TypeExpr)? ("=" e=Expr)? NL;
 *
 **/

// {VarDef} ("var" | constant?="val") name=ID (":" type=TypeExpr)? ("=" e=Expr)? NL
protected class VarDef_Group extends GroupToken {
	
	public VarDef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVarDefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VarDef_NLTerminalRuleCall_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVarDefAccess().getVarDefAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {VarDef}
protected class VarDef_VarDefAction_0 extends ActionToken  {

	public VarDef_VarDefAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getVarDefAccess().getVarDefAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "var" | constant?="val"
protected class VarDef_Alternatives_1 extends AlternativesToken {

	public VarDef_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getVarDefAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VarDef_VarKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VarDef_ConstantAssignment_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "var"
protected class VarDef_VarKeyword_1_0 extends KeywordToken  {
	
	public VarDef_VarKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVarDefAccess().getVarKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VarDef_VarDefAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// constant?="val"
protected class VarDef_ConstantAssignment_1_1 extends AssignmentToken  {
	
	public VarDef_ConstantAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVarDefAccess().getConstantAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VarDef_VarDefAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("constant",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("constant");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getVarDefAccess().getConstantValKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}


// name=ID
protected class VarDef_NameAssignment_2 extends AssignmentToken  {
	
	public VarDef_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVarDefAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VarDef_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getVarDefAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getVarDefAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// (":" type=TypeExpr)?
protected class VarDef_Group_3 extends GroupToken {
	
	public VarDef_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVarDefAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VarDef_TypeAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class VarDef_ColonKeyword_3_0 extends KeywordToken  {
	
	public VarDef_ColonKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVarDefAccess().getColonKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VarDef_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type=TypeExpr
protected class VarDef_TypeAssignment_3_1 extends AssignmentToken  {
	
	public VarDef_TypeAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVarDefAccess().getTypeAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVarDefAccess().getTypeTypeExprParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VarDef_ColonKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("=" e=Expr)?
protected class VarDef_Group_4 extends GroupToken {
	
	public VarDef_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVarDefAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VarDef_EAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class VarDef_EqualsSignKeyword_4_0 extends KeywordToken  {
	
	public VarDef_EqualsSignKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getVarDefAccess().getEqualsSignKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VarDef_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VarDef_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// e=Expr
protected class VarDef_EAssignment_4_1 extends AssignmentToken  {
	
	public VarDef_EAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVarDefAccess().getEAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expr_ExprAssignmentParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getVarDefAccess().getEExprParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new VarDef_EqualsSignKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// NL
protected class VarDef_NLTerminalRuleCall_5 extends UnassignedTextToken {

	public VarDef_NLTerminalRuleCall_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getVarDefAccess().getNLTerminalRuleCall_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VarDef_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new VarDef_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new VarDef_NameAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule VarDef ****************/


/************ begin Rule TypeExpr ****************
 *
 * TypeExpr:
 * 	{TypeExpr} name=[TypeDef];
 *
 **/

// {TypeExpr} name=[TypeDef]
protected class TypeExpr_Group extends GroupToken {
	
	public TypeExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTypeExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeExpr_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTypeExprAccess().getTypeExprAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {TypeExpr}
protected class TypeExpr_TypeExprAction_0 extends ActionToken  {

	public TypeExpr_TypeExprAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTypeExprAccess().getTypeExprAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// name=[TypeDef]
protected class TypeExpr_NameAssignment_1 extends AssignmentToken  {
	
	public TypeExpr_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeExprAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeExpr_TypeExprAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeExprAccess().getNameTypeDefCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getTypeExprAccess().getNameTypeDefCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule TypeExpr ****************/


/************ begin Rule FuncDef ****************
 *
 * / * functions * / FuncDef:
 * 	{FuncDef} "function" name=ID "(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" (":" type=TypeExpr)?
 * 	"{" body=Statements "}";
 *
 **/

// {FuncDef} "function" name=ID "(" (parameters+=ParameterDef ("," parameters+=ParameterDef)*)? ")" (":" type=TypeExpr)?
// "{" body=Statements "}"
protected class FuncDef_Group extends GroupToken {
	
	public FuncDef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FuncDef_RightCurlyBracketKeyword_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFuncDefAccess().getFuncDefAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {FuncDef}
protected class FuncDef_FuncDefAction_0 extends ActionToken  {

	public FuncDef_FuncDefAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getFuncDefAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "function"
protected class FuncDef_FunctionKeyword_1 extends KeywordToken  {
	
	public FuncDef_FunctionKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getFunctionKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FuncDef_FuncDefAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class FuncDef_NameAssignment_2 extends AssignmentToken  {
	
	public FuncDef_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FuncDef_FunctionKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFuncDefAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getFuncDefAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class FuncDef_LeftParenthesisKeyword_3 extends KeywordToken  {
	
	public FuncDef_LeftParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getLeftParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FuncDef_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (parameters+=ParameterDef ("," parameters+=ParameterDef)*)?
protected class FuncDef_Group_4 extends GroupToken {
	
	public FuncDef_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FuncDef_Group_4_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FuncDef_ParametersAssignment_4_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameters+=ParameterDef
protected class FuncDef_ParametersAssignment_4_0 extends AssignmentToken  {
	
	public FuncDef_ParametersAssignment_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getParametersAssignment_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDefRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFuncDefAccess().getParametersParameterDefParserRuleCall_4_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FuncDef_LeftParenthesisKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," parameters+=ParameterDef)*
protected class FuncDef_Group_4_1 extends GroupToken {
	
	public FuncDef_Group_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getGroup_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FuncDef_ParametersAssignment_4_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class FuncDef_CommaKeyword_4_1_0 extends KeywordToken  {
	
	public FuncDef_CommaKeyword_4_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getCommaKeyword_4_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FuncDef_Group_4_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FuncDef_ParametersAssignment_4_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameters+=ParameterDef
protected class FuncDef_ParametersAssignment_4_1_1 extends AssignmentToken  {
	
	public FuncDef_ParametersAssignment_4_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getParametersAssignment_4_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterDefRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFuncDefAccess().getParametersParameterDefParserRuleCall_4_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FuncDef_CommaKeyword_4_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class FuncDef_RightParenthesisKeyword_5 extends KeywordToken  {
	
	public FuncDef_RightParenthesisKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getRightParenthesisKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FuncDef_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FuncDef_LeftParenthesisKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// (":" type=TypeExpr)?
protected class FuncDef_Group_6 extends GroupToken {
	
	public FuncDef_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FuncDef_TypeAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class FuncDef_ColonKeyword_6_0 extends KeywordToken  {
	
	public FuncDef_ColonKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getColonKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FuncDef_RightParenthesisKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type=TypeExpr
protected class FuncDef_TypeAssignment_6_1 extends AssignmentToken  {
	
	public FuncDef_TypeAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getTypeAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFuncDefAccess().getTypeTypeExprParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FuncDef_ColonKeyword_6_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "{"
protected class FuncDef_LeftCurlyBracketKeyword_7 extends KeywordToken  {
	
	public FuncDef_LeftCurlyBracketKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getLeftCurlyBracketKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FuncDef_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FuncDef_RightParenthesisKeyword_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// body=Statements
protected class FuncDef_BodyAssignment_8 extends AssignmentToken  {
	
	public FuncDef_BodyAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getBodyAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statements_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("body",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFuncDefAccess().getBodyStatementsParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FuncDef_LeftCurlyBracketKeyword_7(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class FuncDef_RightCurlyBracketKeyword_9 extends KeywordToken  {
	
	public FuncDef_RightCurlyBracketKeyword_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFuncDefAccess().getRightCurlyBracketKeyword_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FuncDef_BodyAssignment_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule FuncDef ****************/


/************ begin Rule ParameterDef ****************
 *
 * ParameterDef returns VarDef:
 * 	{ParameterDef} name=ID ":" type=TypeExpr;
 *
 **/

// {ParameterDef} name=ID ":" type=TypeExpr
protected class ParameterDef_Group extends GroupToken {
	
	public ParameterDef_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterDefAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDef_TypeAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParameterDefAccess().getParameterDefAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ParameterDef}
protected class ParameterDef_ParameterDefAction_0 extends ActionToken  {

	public ParameterDef_ParameterDefAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getParameterDefAccess().getParameterDefAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// name=ID
protected class ParameterDef_NameAssignment_1 extends AssignmentToken  {
	
	public ParameterDef_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDefAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDef_ParameterDefAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getParameterDefAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getParameterDefAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class ParameterDef_ColonKeyword_2 extends KeywordToken  {
	
	public ParameterDef_ColonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterDefAccess().getColonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterDef_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type=TypeExpr
protected class ParameterDef_TypeAssignment_3 extends AssignmentToken  {
	
	public ParameterDef_TypeAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterDefAccess().getTypeAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TypeExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameterDefAccess().getTypeTypeExprParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterDef_ColonKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ParameterDef ****************/


/************ begin Rule Statements ****************
 *
 * Statements:
 * 	{Statements} (NL | statements+=Statement)*;
 *
 **/

// {Statements} (NL | statements+=Statement)*
protected class Statements_Group extends GroupToken {
	
	public Statements_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statements_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statements_StatementsAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStatementsAccess().getStatementsAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Statements}
protected class Statements_StatementsAction_0 extends ActionToken  {

	public Statements_StatementsAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStatementsAccess().getStatementsAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// (NL | statements+=Statement)*
protected class Statements_Alternatives_1 extends AlternativesToken {

	public Statements_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStatementsAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statements_StatementsAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// statements+=Statement
protected class Statements_StatementsAssignment_1_1 extends AssignmentToken  {
	
	public Statements_StatementsAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStatementsAccess().getStatementsAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStatementsAccess().getStatementsStatementParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Statements_Alternatives_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Statements_StatementsAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule Statements ****************/


/************ begin Rule Statement ****************
 *
 * Statement:
 * 	StmtIf | StmtWhile | VarDef | StmtExpr | StmtReturn;
 *
 **/

// StmtIf | StmtWhile | VarDef | StmtExpr | StmtReturn
protected class Statement_Alternatives extends AlternativesToken {

	public Statement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStatementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_StmtIfParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statement_StmtWhileParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Statement_VarDefParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Statement_StmtExprParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Statement_StmtReturnParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStmtExprRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStmtIfRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStmtReturnAccess().getStmtReturnAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getStmtWhileRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVarDefAccess().getVarDefAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// StmtIf
protected class Statement_StmtIfParserRuleCall_0 extends RuleCallToken {
	
	public Statement_StmtIfParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getStmtIfParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtIf_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStmtIfRule().getType().getClassifier())
			return null;
		if(checkForRecursion(StmtIf_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StmtWhile
protected class Statement_StmtWhileParserRuleCall_1 extends RuleCallToken {
	
	public Statement_StmtWhileParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getStmtWhileParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtWhile_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStmtWhileRule().getType().getClassifier())
			return null;
		if(checkForRecursion(StmtWhile_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// VarDef
protected class Statement_VarDefParserRuleCall_2 extends RuleCallToken {
	
	public Statement_VarDefParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getVarDefParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new VarDef_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVarDefAccess().getVarDefAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(VarDef_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StmtExpr
protected class Statement_StmtExprParserRuleCall_3 extends RuleCallToken {
	
	public Statement_StmtExprParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getStmtExprParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtExpr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStmtExprRule().getType().getClassifier())
			return null;
		if(checkForRecursion(StmtExpr_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// StmtReturn
protected class Statement_StmtReturnParserRuleCall_4 extends RuleCallToken {
	
	public Statement_StmtReturnParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getStmtReturnParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtReturn_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStmtReturnAccess().getStmtReturnAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(StmtReturn_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Statement ****************/


/************ begin Rule StmtReturn ****************
 *
 * StmtReturn:
 * 	{StmtReturn} "return" e=Expr? NL;
 *
 **/

// {StmtReturn} "return" e=Expr? NL
protected class StmtReturn_Group extends GroupToken {
	
	public StmtReturn_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStmtReturnAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtReturn_NLTerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStmtReturnAccess().getStmtReturnAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {StmtReturn}
protected class StmtReturn_StmtReturnAction_0 extends ActionToken  {

	public StmtReturn_StmtReturnAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getStmtReturnAccess().getStmtReturnAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "return"
protected class StmtReturn_ReturnKeyword_1 extends KeywordToken  {
	
	public StmtReturn_ReturnKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStmtReturnAccess().getReturnKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtReturn_StmtReturnAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// e=Expr?
protected class StmtReturn_EAssignment_2 extends AssignmentToken  {
	
	public StmtReturn_EAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStmtReturnAccess().getEAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expr_ExprAssignmentParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStmtReturnAccess().getEExprParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StmtReturn_ReturnKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// NL
protected class StmtReturn_NLTerminalRuleCall_3 extends UnassignedTextToken {

	public StmtReturn_NLTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStmtReturnAccess().getNLTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtReturn_EAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StmtReturn_ReturnKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule StmtReturn ****************/


/************ begin Rule StmtIf ****************
 *
 * StmtIf:
 * 	"if" cond=Expr "{" thenBlock=Statements "}" ("else" elseBlock=ElseBlock)?;
 *
 **/

// "if" cond=Expr "{" thenBlock=Statements "}" ("else" elseBlock=ElseBlock)?
protected class StmtIf_Group extends GroupToken {
	
	public StmtIf_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStmtIfAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtIf_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StmtIf_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStmtIfRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "if"
protected class StmtIf_IfKeyword_0 extends KeywordToken  {
	
	public StmtIf_IfKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStmtIfAccess().getIfKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// cond=Expr
protected class StmtIf_CondAssignment_1 extends AssignmentToken  {
	
	public StmtIf_CondAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStmtIfAccess().getCondAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expr_ExprAssignmentParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cond",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cond");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStmtIfAccess().getCondExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StmtIf_IfKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class StmtIf_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public StmtIf_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStmtIfAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtIf_CondAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// thenBlock=Statements
protected class StmtIf_ThenBlockAssignment_3 extends AssignmentToken  {
	
	public StmtIf_ThenBlockAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStmtIfAccess().getThenBlockAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statements_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("thenBlock",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("thenBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStmtIfAccess().getThenBlockStatementsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StmtIf_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class StmtIf_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public StmtIf_RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStmtIfAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtIf_ThenBlockAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("else" elseBlock=ElseBlock)?
protected class StmtIf_Group_5 extends GroupToken {
	
	public StmtIf_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStmtIfAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtIf_ElseBlockAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "else"
protected class StmtIf_ElseKeyword_5_0 extends KeywordToken  {
	
	public StmtIf_ElseKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStmtIfAccess().getElseKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtIf_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// elseBlock=ElseBlock
protected class StmtIf_ElseBlockAssignment_5_1 extends AssignmentToken  {
	
	public StmtIf_ElseBlockAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStmtIfAccess().getElseBlockAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseBlock_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elseBlock",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elseBlock");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElseBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStmtIfAccess().getElseBlockElseBlockParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StmtIf_ElseKeyword_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule StmtIf ****************/


/************ begin Rule ElseBlock ****************
 *
 * ElseBlock:
 * 	"{" Statements "}" | ElseIfBlock;
 *
 **/

// "{" Statements "}" | ElseIfBlock
protected class ElseBlock_Alternatives extends AlternativesToken {

	public ElseBlock_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getElseBlockAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseBlock_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ElseBlock_ElseIfBlockParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getElseIfBlockRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "{" Statements "}"
protected class ElseBlock_Group_0 extends GroupToken {
	
	public ElseBlock_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElseBlockAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseBlock_RightCurlyBracketKeyword_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class ElseBlock_LeftCurlyBracketKeyword_0_0 extends KeywordToken  {
	
	public ElseBlock_LeftCurlyBracketKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElseBlockAccess().getLeftCurlyBracketKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Statements
protected class ElseBlock_StatementsParserRuleCall_0_1 extends RuleCallToken {
	
	public ElseBlock_StatementsParserRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElseBlockAccess().getStatementsParserRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statements_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Statements_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseBlock_LeftCurlyBracketKeyword_0_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// "}"
protected class ElseBlock_RightCurlyBracketKeyword_0_2 extends KeywordToken  {
	
	public ElseBlock_RightCurlyBracketKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElseBlockAccess().getRightCurlyBracketKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseBlock_StatementsParserRuleCall_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ElseIfBlock
protected class ElseBlock_ElseIfBlockParserRuleCall_1 extends RuleCallToken {
	
	public ElseBlock_ElseIfBlockParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getElseBlockAccess().getElseIfBlockParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElseIfBlock_StatementsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ElseIfBlock_StatementsAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ElseBlock ****************/


/************ begin Rule ElseIfBlock ****************
 *
 * ElseIfBlock returns Statements:
 * 	statements+=StmtIf;
 *
 **/

// statements+=StmtIf
protected class ElseIfBlock_StatementsAssignment extends AssignmentToken  {
	
	public ElseIfBlock_StatementsAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElseIfBlockAccess().getStatementsAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtIf_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getElseIfBlockRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("statements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStmtIfRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getElseIfBlockAccess().getStatementsStmtIfParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule ElseIfBlock ****************/


/************ begin Rule StmtWhile ****************
 *
 * StmtWhile:
 * 	"while" cond=Expr "{" body=Statements "}";
 *
 **/

// "while" cond=Expr "{" body=Statements "}"
protected class StmtWhile_Group extends GroupToken {
	
	public StmtWhile_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStmtWhileAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtWhile_RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStmtWhileRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "while"
protected class StmtWhile_WhileKeyword_0 extends KeywordToken  {
	
	public StmtWhile_WhileKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStmtWhileAccess().getWhileKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// cond=Expr
protected class StmtWhile_CondAssignment_1 extends AssignmentToken  {
	
	public StmtWhile_CondAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStmtWhileAccess().getCondAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expr_ExprAssignmentParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("cond",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("cond");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStmtWhileAccess().getCondExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StmtWhile_WhileKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class StmtWhile_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public StmtWhile_LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStmtWhileAccess().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtWhile_CondAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// body=Statements
protected class StmtWhile_BodyAssignment_3 extends AssignmentToken  {
	
	public StmtWhile_BodyAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStmtWhileAccess().getBodyAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statements_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("body",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("body");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementsRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStmtWhileAccess().getBodyStatementsParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StmtWhile_LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class StmtWhile_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public StmtWhile_RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStmtWhileAccess().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtWhile_BodyAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule StmtWhile ****************/


/************ begin Rule StmtExpr ****************
 *
 * StmtExpr:
 * 	e=Expr NL;
 *
 **/

// e=Expr NL
protected class StmtExpr_Group extends GroupToken {
	
	public StmtExpr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStmtExprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtExpr_NLTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStmtExprRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// e=Expr
protected class StmtExpr_EAssignment_0 extends AssignmentToken  {
	
	public StmtExpr_EAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStmtExprAccess().getEAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expr_ExprAssignmentParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("e",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("e");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStmtExprAccess().getEExprParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// NL
protected class StmtExpr_NLTerminalRuleCall_1 extends UnassignedTextToken {

	public StmtExpr_NLTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStmtExprAccess().getNLTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StmtExpr_EAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule StmtExpr ****************/


/************ begin Rule Expr ****************
 *
 * / * expressions * / / * operator precedence (weakest first):
 * 
 * or
 * 
 * and
 * 
 * == !=				// 
 * 
 * <= >= < >			// comparisons
 * 
 * + -
 * 
 * * / % mod div		// mod and div work on integers, / and % for reals
 * 
 * 
 * 
 * 
 * 
 * + -					// unary
 * 
 * not					// unary
 * 
 * 
 * 
 * .					// member
 * 
 * * / //ExprAtomic
 * 
 * Expr:
 * 	ExprAssignment;
 *
 **/

// ExprAssignment
protected class Expr_ExprAssignmentParserRuleCall extends RuleCallToken {
	
	public Expr_ExprAssignmentParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExprAccess().getExprAssignmentParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAssignment_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAdditiveAccess().getExprAdditiveLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAndAccess().getExprAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAssignmentAccess().getExprAssignmentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBoolValAction_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBuildinFunctionAction_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprComparisonAccess().getExprComparisonLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprEqualityAccess().getExprEqualityLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprIdentifierAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprIntValAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMemberAccess().getExprMemberLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMultAccess().getExprMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprNotAccess().getExprNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprNumValAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprOrAccess().getExprOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSignAccess().getExprSignAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprStrvalAction_4_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ExprAssignment_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule Expr ****************/


/************ begin Rule ExprAssignment ****************
 *
 * // TODO this is not really an expression, it should only be used at top level
 * 
 * ExprAssignment returns Expr:
 * 	ExprOr ({ExprAssignment.left=current} op=OpAssignment right=ExprOr)*;
 *
 **/

// ExprOr ({ExprAssignment.left=current} op=OpAssignment right=ExprOr)*
protected class ExprAssignment_Group extends GroupToken {
	
	public ExprAssignment_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprAssignmentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAssignment_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprAssignment_ExprOrParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAdditiveAccess().getExprAdditiveLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAndAccess().getExprAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAssignmentAccess().getExprAssignmentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBoolValAction_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBuildinFunctionAction_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprComparisonAccess().getExprComparisonLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprEqualityAccess().getExprEqualityLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprIdentifierAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprIntValAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMemberAccess().getExprMemberLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMultAccess().getExprMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprNotAccess().getExprNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprNumValAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprOrAccess().getExprOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSignAccess().getExprSignAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprStrvalAction_4_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ExprOr
protected class ExprAssignment_ExprOrParserRuleCall_0 extends RuleCallToken {
	
	public ExprAssignment_ExprOrParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExprAssignmentAccess().getExprOrParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprOr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ExprOr_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({ExprAssignment.left=current} op=OpAssignment right=ExprOr)*
protected class ExprAssignment_Group_1 extends GroupToken {
	
	public ExprAssignment_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprAssignmentAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAssignment_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAssignmentAccess().getExprAssignmentLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprAssignment.left=current}
protected class ExprAssignment_ExprAssignmentLeftAction_1_0 extends ActionToken  {

	public ExprAssignment_ExprAssignmentLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprAssignmentAccess().getExprAssignmentLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAssignment_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprAssignment_ExprOrParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=OpAssignment
protected class ExprAssignment_OpAssignment_1_1 extends AssignmentToken  {
	
	public ExprAssignment_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprAssignmentAccess().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpAssignment_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOpAssignmentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprAssignmentAccess().getOpOpAssignmentParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprAssignment_ExprAssignmentLeftAction_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// right=ExprOr
protected class ExprAssignment_RightAssignment_1_2 extends AssignmentToken  {
	
	public ExprAssignment_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprAssignmentAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprOr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprOrRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprAssignmentAccess().getRightExprOrParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprAssignment_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ExprAssignment ****************/


/************ begin Rule OpAssignment ****************
 *
 * OpAssignment:
 * 	{OpAssign} "=" | {OpPlusAssign} "+=" | {OpMinusAssign} "-=";
 *
 **/

// {OpAssign} "=" | {OpPlusAssign} "+=" | {OpMinusAssign} "-="
protected class OpAssignment_Alternatives extends AlternativesToken {

	public OpAssignment_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOpAssignmentAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpAssignment_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OpAssignment_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new OpAssignment_Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpAssignmentAccess().getOpAssignAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOpAssignmentAccess().getOpMinusAssignAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOpAssignmentAccess().getOpPlusAssignAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpAssign} "="
protected class OpAssignment_Group_0 extends GroupToken {
	
	public OpAssignment_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpAssignmentAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpAssignment_EqualsSignKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpAssignmentAccess().getOpAssignAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpAssign}
protected class OpAssignment_OpAssignAction_0_0 extends ActionToken  {

	public OpAssignment_OpAssignAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpAssignmentAccess().getOpAssignAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "="
protected class OpAssignment_EqualsSignKeyword_0_1 extends KeywordToken  {
	
	public OpAssignment_EqualsSignKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpAssignmentAccess().getEqualsSignKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpAssignment_OpAssignAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {OpPlusAssign} "+="
protected class OpAssignment_Group_1 extends GroupToken {
	
	public OpAssignment_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpAssignmentAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpAssignment_PlusSignEqualsSignKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpAssignmentAccess().getOpPlusAssignAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpPlusAssign}
protected class OpAssignment_OpPlusAssignAction_1_0 extends ActionToken  {

	public OpAssignment_OpPlusAssignAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpAssignmentAccess().getOpPlusAssignAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "+="
protected class OpAssignment_PlusSignEqualsSignKeyword_1_1 extends KeywordToken  {
	
	public OpAssignment_PlusSignEqualsSignKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpAssignmentAccess().getPlusSignEqualsSignKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpAssignment_OpPlusAssignAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {OpMinusAssign} "-="
protected class OpAssignment_Group_2 extends GroupToken {
	
	public OpAssignment_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpAssignmentAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpAssignment_HyphenMinusEqualsSignKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpAssignmentAccess().getOpMinusAssignAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpMinusAssign}
protected class OpAssignment_OpMinusAssignAction_2_0 extends ActionToken  {

	public OpAssignment_OpMinusAssignAction_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpAssignmentAccess().getOpMinusAssignAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "-="
protected class OpAssignment_HyphenMinusEqualsSignKeyword_2_1 extends KeywordToken  {
	
	public OpAssignment_HyphenMinusEqualsSignKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpAssignmentAccess().getHyphenMinusEqualsSignKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpAssignment_OpMinusAssignAction_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule OpAssignment ****************/


/************ begin Rule ExprOr ****************
 *
 * ExprOr returns Expr:
 * 	ExprAnd ({ExprOr.left=current} op="or" right=ExprAnd)*;
 *
 **/

// ExprAnd ({ExprOr.left=current} op="or" right=ExprAnd)*
protected class ExprOr_Group extends GroupToken {
	
	public ExprOr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprOrAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprOr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprOr_ExprAndParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAdditiveAccess().getExprAdditiveLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAndAccess().getExprAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAssignmentAccess().getExprAssignmentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBoolValAction_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBuildinFunctionAction_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprComparisonAccess().getExprComparisonLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprEqualityAccess().getExprEqualityLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprIdentifierAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprIntValAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMemberAccess().getExprMemberLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMultAccess().getExprMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprNotAccess().getExprNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprNumValAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprOrAccess().getExprOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSignAccess().getExprSignAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprStrvalAction_4_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ExprAnd
protected class ExprOr_ExprAndParserRuleCall_0 extends RuleCallToken {
	
	public ExprOr_ExprAndParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExprOrAccess().getExprAndParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAnd_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ExprAnd_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({ExprOr.left=current} op="or" right=ExprAnd)*
protected class ExprOr_Group_1 extends GroupToken {
	
	public ExprOr_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprOrAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprOr_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprOrAccess().getExprOrLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprOr.left=current}
protected class ExprOr_ExprOrLeftAction_1_0 extends ActionToken  {

	public ExprOr_ExprOrLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprOrAccess().getExprOrLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprOr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprOr_ExprAndParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op="or"
protected class ExprOr_OpAssignment_1_1 extends AssignmentToken  {
	
	public ExprOr_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprOrAccess().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprOr_ExprOrLeftAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getExprOrAccess().getOpOrKeyword_1_1_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getExprOrAccess().getOpOrKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// right=ExprAnd
protected class ExprOr_RightAssignment_1_2 extends AssignmentToken  {
	
	public ExprOr_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprOrAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAnd_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprAndRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprOrAccess().getRightExprAndParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprOr_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ExprOr ****************/


/************ begin Rule ExprAnd ****************
 *
 * ExprAnd returns Expr:
 * 	ExprEquality ({ExprAnd.left=current} op="and" right=ExprEquality)*;
 *
 **/

// ExprEquality ({ExprAnd.left=current} op="and" right=ExprEquality)*
protected class ExprAnd_Group extends GroupToken {
	
	public ExprAnd_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprAndAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAnd_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprAnd_ExprEqualityParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAdditiveAccess().getExprAdditiveLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAndAccess().getExprAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAssignmentAccess().getExprAssignmentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBoolValAction_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBuildinFunctionAction_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprComparisonAccess().getExprComparisonLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprEqualityAccess().getExprEqualityLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprIdentifierAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprIntValAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMemberAccess().getExprMemberLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMultAccess().getExprMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprNotAccess().getExprNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprNumValAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprOrAccess().getExprOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSignAccess().getExprSignAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprStrvalAction_4_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ExprEquality
protected class ExprAnd_ExprEqualityParserRuleCall_0 extends RuleCallToken {
	
	public ExprAnd_ExprEqualityParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExprAndAccess().getExprEqualityParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprEquality_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ExprEquality_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({ExprAnd.left=current} op="and" right=ExprEquality)*
protected class ExprAnd_Group_1 extends GroupToken {
	
	public ExprAnd_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprAndAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAnd_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAndAccess().getExprAndLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprAnd.left=current}
protected class ExprAnd_ExprAndLeftAction_1_0 extends ActionToken  {

	public ExprAnd_ExprAndLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprAndAccess().getExprAndLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAnd_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprAnd_ExprEqualityParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op="and"
protected class ExprAnd_OpAssignment_1_1 extends AssignmentToken  {
	
	public ExprAnd_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprAndAccess().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAnd_ExprAndLeftAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getExprAndAccess().getOpAndKeyword_1_1_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getExprAndAccess().getOpAndKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// right=ExprEquality
protected class ExprAnd_RightAssignment_1_2 extends AssignmentToken  {
	
	public ExprAnd_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprAndAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprEquality_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprEqualityRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprAndAccess().getRightExprEqualityParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprAnd_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ExprAnd ****************/


/************ begin Rule ExprEquality ****************
 *
 * ExprEquality returns Expr:
 * 	ExprComparison ({ExprEquality.left=current} op=OpEquality right=ExprComparison)*;
 *
 **/

// ExprComparison ({ExprEquality.left=current} op=OpEquality right=ExprComparison)*
protected class ExprEquality_Group extends GroupToken {
	
	public ExprEquality_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprEqualityAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprEquality_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprEquality_ExprComparisonParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAdditiveAccess().getExprAdditiveLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAndAccess().getExprAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAssignmentAccess().getExprAssignmentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBoolValAction_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBuildinFunctionAction_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprComparisonAccess().getExprComparisonLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprEqualityAccess().getExprEqualityLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprIdentifierAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprIntValAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMemberAccess().getExprMemberLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMultAccess().getExprMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprNotAccess().getExprNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprNumValAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprOrAccess().getExprOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSignAccess().getExprSignAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprStrvalAction_4_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ExprComparison
protected class ExprEquality_ExprComparisonParserRuleCall_0 extends RuleCallToken {
	
	public ExprEquality_ExprComparisonParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExprEqualityAccess().getExprComparisonParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprComparison_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ExprComparison_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({ExprEquality.left=current} op=OpEquality right=ExprComparison)*
protected class ExprEquality_Group_1 extends GroupToken {
	
	public ExprEquality_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprEqualityAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprEquality_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprEqualityAccess().getExprEqualityLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprEquality.left=current}
protected class ExprEquality_ExprEqualityLeftAction_1_0 extends ActionToken  {

	public ExprEquality_ExprEqualityLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprEqualityAccess().getExprEqualityLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprEquality_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprEquality_ExprComparisonParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=OpEquality
protected class ExprEquality_OpAssignment_1_1 extends AssignmentToken  {
	
	public ExprEquality_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprEqualityAccess().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpEquality_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOpEqualityRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprEqualityAccess().getOpOpEqualityParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprEquality_ExprEqualityLeftAction_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// right=ExprComparison
protected class ExprEquality_RightAssignment_1_2 extends AssignmentToken  {
	
	public ExprEquality_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprEqualityAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprComparison_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprComparisonRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprEqualityAccess().getRightExprComparisonParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprEquality_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ExprEquality ****************/


/************ begin Rule OpEquality ****************
 *
 * OpEquality:
 * 	{OpEquals} "==" | {OpUnequals} "!=";
 *
 **/

// {OpEquals} "==" | {OpUnequals} "!="
protected class OpEquality_Alternatives extends AlternativesToken {

	public OpEquality_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOpEqualityAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpEquality_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OpEquality_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpEqualityAccess().getOpEqualsAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOpEqualityAccess().getOpUnequalsAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpEquals} "=="
protected class OpEquality_Group_0 extends GroupToken {
	
	public OpEquality_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpEqualityAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpEquality_EqualsSignEqualsSignKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpEqualityAccess().getOpEqualsAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpEquals}
protected class OpEquality_OpEqualsAction_0_0 extends ActionToken  {

	public OpEquality_OpEqualsAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpEqualityAccess().getOpEqualsAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "=="
protected class OpEquality_EqualsSignEqualsSignKeyword_0_1 extends KeywordToken  {
	
	public OpEquality_EqualsSignEqualsSignKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpEquality_OpEqualsAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {OpUnequals} "!="
protected class OpEquality_Group_1 extends GroupToken {
	
	public OpEquality_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpEqualityAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpEquality_ExclamationMarkEqualsSignKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpEqualityAccess().getOpUnequalsAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpUnequals}
protected class OpEquality_OpUnequalsAction_1_0 extends ActionToken  {

	public OpEquality_OpUnequalsAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpEqualityAccess().getOpUnequalsAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "!="
protected class OpEquality_ExclamationMarkEqualsSignKeyword_1_1 extends KeywordToken  {
	
	public OpEquality_ExclamationMarkEqualsSignKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpEquality_OpUnequalsAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule OpEquality ****************/


/************ begin Rule ExprComparison ****************
 *
 * ExprComparison returns Expr:
 * 	ExprAdditive ({ExprComparison.left=current} op=OpComparison right=ExprAdditive)*;
 *
 **/

// ExprAdditive ({ExprComparison.left=current} op=OpComparison right=ExprAdditive)*
protected class ExprComparison_Group extends GroupToken {
	
	public ExprComparison_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprComparisonAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprComparison_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprComparison_ExprAdditiveParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAdditiveAccess().getExprAdditiveLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAndAccess().getExprAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAssignmentAccess().getExprAssignmentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBoolValAction_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBuildinFunctionAction_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprComparisonAccess().getExprComparisonLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprEqualityAccess().getExprEqualityLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprIdentifierAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprIntValAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMemberAccess().getExprMemberLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMultAccess().getExprMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprNotAccess().getExprNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprNumValAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprOrAccess().getExprOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSignAccess().getExprSignAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprStrvalAction_4_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ExprAdditive
protected class ExprComparison_ExprAdditiveParserRuleCall_0 extends RuleCallToken {
	
	public ExprComparison_ExprAdditiveParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExprComparisonAccess().getExprAdditiveParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAdditive_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ExprAdditive_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({ExprComparison.left=current} op=OpComparison right=ExprAdditive)*
protected class ExprComparison_Group_1 extends GroupToken {
	
	public ExprComparison_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprComparisonAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprComparison_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprComparisonAccess().getExprComparisonLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprComparison.left=current}
protected class ExprComparison_ExprComparisonLeftAction_1_0 extends ActionToken  {

	public ExprComparison_ExprComparisonLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprComparisonAccess().getExprComparisonLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprComparison_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprComparison_ExprAdditiveParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=OpComparison
protected class ExprComparison_OpAssignment_1_1 extends AssignmentToken  {
	
	public ExprComparison_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprComparisonAccess().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpComparison_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOpComparisonRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprComparisonAccess().getOpOpComparisonParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprComparison_ExprComparisonLeftAction_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// right=ExprAdditive
protected class ExprComparison_RightAssignment_1_2 extends AssignmentToken  {
	
	public ExprComparison_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprComparisonAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAdditive_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprAdditiveRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprComparisonAccess().getRightExprAdditiveParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprComparison_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ExprComparison ****************/


/************ begin Rule OpComparison ****************
 *
 * OpComparison:
 * 	{OpLessEq} "<=" | {OpLess} "<" | {OpGreaterEq} ">=" | {OpGreater} ">";
 *
 **/

// {OpLessEq} "<=" | {OpLess} "<" | {OpGreaterEq} ">=" | {OpGreater} ">"
protected class OpComparison_Alternatives extends AlternativesToken {

	public OpComparison_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOpComparisonAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpComparison_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OpComparison_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new OpComparison_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new OpComparison_Group_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpComparisonAccess().getOpGreaterAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOpComparisonAccess().getOpGreaterEqAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOpComparisonAccess().getOpLessAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOpComparisonAccess().getOpLessEqAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpLessEq} "<="
protected class OpComparison_Group_0 extends GroupToken {
	
	public OpComparison_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpComparisonAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpComparison_LessThanSignEqualsSignKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpComparisonAccess().getOpLessEqAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpLessEq}
protected class OpComparison_OpLessEqAction_0_0 extends ActionToken  {

	public OpComparison_OpLessEqAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpComparisonAccess().getOpLessEqAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "<="
protected class OpComparison_LessThanSignEqualsSignKeyword_0_1 extends KeywordToken  {
	
	public OpComparison_LessThanSignEqualsSignKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpComparisonAccess().getLessThanSignEqualsSignKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpComparison_OpLessEqAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {OpLess} "<"
protected class OpComparison_Group_1 extends GroupToken {
	
	public OpComparison_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpComparisonAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpComparison_LessThanSignKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpComparisonAccess().getOpLessAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpLess}
protected class OpComparison_OpLessAction_1_0 extends ActionToken  {

	public OpComparison_OpLessAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpComparisonAccess().getOpLessAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "<"
protected class OpComparison_LessThanSignKeyword_1_1 extends KeywordToken  {
	
	public OpComparison_LessThanSignKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpComparisonAccess().getLessThanSignKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpComparison_OpLessAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {OpGreaterEq} ">="
protected class OpComparison_Group_2 extends GroupToken {
	
	public OpComparison_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpComparisonAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpComparison_GreaterThanSignEqualsSignKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpComparisonAccess().getOpGreaterEqAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpGreaterEq}
protected class OpComparison_OpGreaterEqAction_2_0 extends ActionToken  {

	public OpComparison_OpGreaterEqAction_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpComparisonAccess().getOpGreaterEqAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// ">="
protected class OpComparison_GreaterThanSignEqualsSignKeyword_2_1 extends KeywordToken  {
	
	public OpComparison_GreaterThanSignEqualsSignKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpComparisonAccess().getGreaterThanSignEqualsSignKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpComparison_OpGreaterEqAction_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {OpGreater} ">"
protected class OpComparison_Group_3 extends GroupToken {
	
	public OpComparison_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpComparisonAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpComparison_GreaterThanSignKeyword_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpComparisonAccess().getOpGreaterAction_3_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpGreater}
protected class OpComparison_OpGreaterAction_3_0 extends ActionToken  {

	public OpComparison_OpGreaterAction_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpComparisonAccess().getOpGreaterAction_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// ">"
protected class OpComparison_GreaterThanSignKeyword_3_1 extends KeywordToken  {
	
	public OpComparison_GreaterThanSignKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpComparisonAccess().getGreaterThanSignKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpComparison_OpGreaterAction_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule OpComparison ****************/


/************ begin Rule ExprAdditive ****************
 *
 * ExprAdditive returns Expr:
 * 	ExprMult ({ExprAdditive.left=current} op=OpAdditive right=ExprMult)*;
 *
 **/

// ExprMult ({ExprAdditive.left=current} op=OpAdditive right=ExprMult)*
protected class ExprAdditive_Group extends GroupToken {
	
	public ExprAdditive_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprAdditiveAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAdditive_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprAdditive_ExprMultParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAdditiveAccess().getExprAdditiveLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAndAccess().getExprAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAssignmentAccess().getExprAssignmentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBoolValAction_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBuildinFunctionAction_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprComparisonAccess().getExprComparisonLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprEqualityAccess().getExprEqualityLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprIdentifierAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprIntValAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMemberAccess().getExprMemberLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMultAccess().getExprMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprNotAccess().getExprNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprNumValAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprOrAccess().getExprOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSignAccess().getExprSignAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprStrvalAction_4_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ExprMult
protected class ExprAdditive_ExprMultParserRuleCall_0 extends RuleCallToken {
	
	public ExprAdditive_ExprMultParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExprAdditiveAccess().getExprMultParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprMult_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ExprMult_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({ExprAdditive.left=current} op=OpAdditive right=ExprMult)*
protected class ExprAdditive_Group_1 extends GroupToken {
	
	public ExprAdditive_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprAdditiveAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAdditive_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAdditiveAccess().getExprAdditiveLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprAdditive.left=current}
protected class ExprAdditive_ExprAdditiveLeftAction_1_0 extends ActionToken  {

	public ExprAdditive_ExprAdditiveLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprAdditiveAccess().getExprAdditiveLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAdditive_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprAdditive_ExprMultParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=OpAdditive
protected class ExprAdditive_OpAssignment_1_1 extends AssignmentToken  {
	
	public ExprAdditive_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprAdditiveAccess().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpAdditive_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOpAdditiveRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprAdditiveAccess().getOpOpAdditiveParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprAdditive_ExprAdditiveLeftAction_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// right=ExprMult
protected class ExprAdditive_RightAssignment_1_2 extends AssignmentToken  {
	
	public ExprAdditive_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprAdditiveAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprMult_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprMultRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprAdditiveAccess().getRightExprMultParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprAdditive_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ExprAdditive ****************/


/************ begin Rule OpAdditive ****************
 *
 * OpAdditive:
 * 	{OpPlus} "+" | {OpMinus} "-";
 *
 **/

// {OpPlus} "+" | {OpMinus} "-"
protected class OpAdditive_Alternatives extends AlternativesToken {

	public OpAdditive_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOpAdditiveAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpAdditive_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OpAdditive_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpAdditiveAccess().getOpMinusAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOpAdditiveAccess().getOpPlusAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpPlus} "+"
protected class OpAdditive_Group_0 extends GroupToken {
	
	public OpAdditive_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpAdditiveAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpAdditive_PlusSignKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpAdditiveAccess().getOpPlusAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpPlus}
protected class OpAdditive_OpPlusAction_0_0 extends ActionToken  {

	public OpAdditive_OpPlusAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpAdditiveAccess().getOpPlusAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "+"
protected class OpAdditive_PlusSignKeyword_0_1 extends KeywordToken  {
	
	public OpAdditive_PlusSignKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpAdditiveAccess().getPlusSignKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpAdditive_OpPlusAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {OpMinus} "-"
protected class OpAdditive_Group_1 extends GroupToken {
	
	public OpAdditive_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpAdditiveAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpAdditive_HyphenMinusKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpAdditiveAccess().getOpMinusAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpMinus}
protected class OpAdditive_OpMinusAction_1_0 extends ActionToken  {

	public OpAdditive_OpMinusAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpAdditiveAccess().getOpMinusAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "-"
protected class OpAdditive_HyphenMinusKeyword_1_1 extends KeywordToken  {
	
	public OpAdditive_HyphenMinusKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpAdditiveAccess().getHyphenMinusKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpAdditive_OpMinusAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule OpAdditive ****************/


/************ begin Rule ExprMult ****************
 *
 * ExprMult returns Expr:
 * 	ExprSign ({ExprMult.left=current} op=OpMultiplicative right=ExprSign)*;
 *
 **/

// ExprSign ({ExprMult.left=current} op=OpMultiplicative right=ExprSign)*
protected class ExprMult_Group extends GroupToken {
	
	public ExprMult_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprMultAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprMult_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprMult_ExprSignParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAdditiveAccess().getExprAdditiveLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAndAccess().getExprAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAssignmentAccess().getExprAssignmentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBoolValAction_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBuildinFunctionAction_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprComparisonAccess().getExprComparisonLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprEqualityAccess().getExprEqualityLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprIdentifierAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprIntValAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMemberAccess().getExprMemberLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMultAccess().getExprMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprNotAccess().getExprNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprNumValAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprOrAccess().getExprOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSignAccess().getExprSignAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprStrvalAction_4_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ExprSign
protected class ExprMult_ExprSignParserRuleCall_0 extends RuleCallToken {
	
	public ExprMult_ExprSignParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExprMultAccess().getExprSignParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSign_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ExprSign_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({ExprMult.left=current} op=OpMultiplicative right=ExprSign)*
protected class ExprMult_Group_1 extends GroupToken {
	
	public ExprMult_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprMultAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprMult_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprMultAccess().getExprMultLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprMult.left=current}
protected class ExprMult_ExprMultLeftAction_1_0 extends ActionToken  {

	public ExprMult_ExprMultLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprMultAccess().getExprMultLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprMult_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprMult_ExprSignParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// op=OpMultiplicative
protected class ExprMult_OpAssignment_1_1 extends AssignmentToken  {
	
	public ExprMult_OpAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprMultAccess().getOpAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpMultiplicative_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOpMultiplicativeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprMultAccess().getOpOpMultiplicativeParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprMult_ExprMultLeftAction_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// right=ExprSign
protected class ExprMult_RightAssignment_1_2 extends AssignmentToken  {
	
	public ExprMult_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprMultAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSign_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprSignRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprMultAccess().getRightExprSignParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprMult_OpAssignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ExprMult ****************/


/************ begin Rule OpMultiplicative ****************
 *
 * OpMultiplicative:
 * 	{OpMult} "*" | {OpDivReal} "/" | {OpModReal} "%" | {OpModInt} "mod" | {OpModReal} "div";
 *
 **/

// {OpMult} "*" | {OpDivReal} "/" | {OpModReal} "%" | {OpModInt} "mod" | {OpModReal} "div"
protected class OpMultiplicative_Alternatives extends AlternativesToken {

	public OpMultiplicative_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOpMultiplicativeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpMultiplicative_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OpMultiplicative_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new OpMultiplicative_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new OpMultiplicative_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new OpMultiplicative_Group_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpMultiplicativeAccess().getOpDivRealAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOpMultiplicativeAccess().getOpModIntAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOpMultiplicativeAccess().getOpModRealAction_4_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOpMultiplicativeAccess().getOpMultAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpMult} "*"
protected class OpMultiplicative_Group_0 extends GroupToken {
	
	public OpMultiplicative_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpMultiplicativeAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpMultiplicative_AsteriskKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpMultiplicativeAccess().getOpMultAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpMult}
protected class OpMultiplicative_OpMultAction_0_0 extends ActionToken  {

	public OpMultiplicative_OpMultAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpMultiplicativeAccess().getOpMultAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "*"
protected class OpMultiplicative_AsteriskKeyword_0_1 extends KeywordToken  {
	
	public OpMultiplicative_AsteriskKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpMultiplicativeAccess().getAsteriskKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpMultiplicative_OpMultAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {OpDivReal} "/"
protected class OpMultiplicative_Group_1 extends GroupToken {
	
	public OpMultiplicative_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpMultiplicativeAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpMultiplicative_SolidusKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpMultiplicativeAccess().getOpDivRealAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpDivReal}
protected class OpMultiplicative_OpDivRealAction_1_0 extends ActionToken  {

	public OpMultiplicative_OpDivRealAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpMultiplicativeAccess().getOpDivRealAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "/"
protected class OpMultiplicative_SolidusKeyword_1_1 extends KeywordToken  {
	
	public OpMultiplicative_SolidusKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpMultiplicativeAccess().getSolidusKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpMultiplicative_OpDivRealAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {OpModReal} "%"
protected class OpMultiplicative_Group_2 extends GroupToken {
	
	public OpMultiplicative_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpMultiplicativeAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpMultiplicative_PercentSignKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpMultiplicativeAccess().getOpModRealAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpModReal}
protected class OpMultiplicative_OpModRealAction_2_0 extends ActionToken  {

	public OpMultiplicative_OpModRealAction_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpMultiplicativeAccess().getOpModRealAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "%"
protected class OpMultiplicative_PercentSignKeyword_2_1 extends KeywordToken  {
	
	public OpMultiplicative_PercentSignKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpMultiplicativeAccess().getPercentSignKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpMultiplicative_OpModRealAction_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {OpModInt} "mod"
protected class OpMultiplicative_Group_3 extends GroupToken {
	
	public OpMultiplicative_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpMultiplicativeAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpMultiplicative_ModKeyword_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpMultiplicativeAccess().getOpModIntAction_3_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpModInt}
protected class OpMultiplicative_OpModIntAction_3_0 extends ActionToken  {

	public OpMultiplicative_OpModIntAction_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpMultiplicativeAccess().getOpModIntAction_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "mod"
protected class OpMultiplicative_ModKeyword_3_1 extends KeywordToken  {
	
	public OpMultiplicative_ModKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpMultiplicativeAccess().getModKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpMultiplicative_OpModIntAction_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {OpModReal} "div"
protected class OpMultiplicative_Group_4 extends GroupToken {
	
	public OpMultiplicative_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpMultiplicativeAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpMultiplicative_DivKeyword_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpMultiplicativeAccess().getOpModRealAction_4_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpModReal}
protected class OpMultiplicative_OpModRealAction_4_0 extends ActionToken  {

	public OpMultiplicative_OpModRealAction_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpMultiplicativeAccess().getOpModRealAction_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "div"
protected class OpMultiplicative_DivKeyword_4_1 extends KeywordToken  {
	
	public OpMultiplicative_DivKeyword_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getOpMultiplicativeAccess().getDivKeyword_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpMultiplicative_OpModRealAction_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule OpMultiplicative ****************/


/************ begin Rule ExprSign ****************
 *
 * ExprSign returns Expr:
 * 	{ExprSign} op=OpAdditive right=ExprNot | ExprNot;
 *
 **/

// {ExprSign} op=OpAdditive right=ExprNot | ExprNot
protected class ExprSign_Alternatives extends AlternativesToken {

	public ExprSign_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExprSignAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSign_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprSign_ExprNotParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAdditiveAccess().getExprAdditiveLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAndAccess().getExprAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAssignmentAccess().getExprAssignmentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBoolValAction_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBuildinFunctionAction_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprComparisonAccess().getExprComparisonLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprEqualityAccess().getExprEqualityLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprIdentifierAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprIntValAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMemberAccess().getExprMemberLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMultAccess().getExprMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprNotAccess().getExprNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprNumValAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprOrAccess().getExprOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSignAccess().getExprSignAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprStrvalAction_4_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprSign} op=OpAdditive right=ExprNot
protected class ExprSign_Group_0 extends GroupToken {
	
	public ExprSign_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprSignAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSign_RightAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprSignAccess().getExprSignAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprSign}
protected class ExprSign_ExprSignAction_0_0 extends ActionToken  {

	public ExprSign_ExprSignAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprSignAccess().getExprSignAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// op=OpAdditive
protected class ExprSign_OpAssignment_0_1 extends AssignmentToken  {
	
	public ExprSign_OpAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprSignAccess().getOpAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpAdditive_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("op",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("op");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOpAdditiveRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprSignAccess().getOpOpAdditiveParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprSign_ExprSignAction_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// right=ExprNot
protected class ExprSign_RightAssignment_0_2 extends AssignmentToken  {
	
	public ExprSign_RightAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprSignAccess().getRightAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprNot_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprNotRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprSignAccess().getRightExprNotParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprSign_OpAssignment_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ExprNot
protected class ExprSign_ExprNotParserRuleCall_1 extends RuleCallToken {
	
	public ExprSign_ExprNotParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExprSignAccess().getExprNotParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprNot_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ExprNot_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ExprSign ****************/


/************ begin Rule ExprNot ****************
 *
 * ExprNot returns Expr:
 * 	{ExprNot} "not" right=ExprMember | ExprMember;
 *
 **/

// {ExprNot} "not" right=ExprMember | ExprMember
protected class ExprNot_Alternatives extends AlternativesToken {

	public ExprNot_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExprNotAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprNot_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprNot_ExprMemberParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAdditiveAccess().getExprAdditiveLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAndAccess().getExprAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAssignmentAccess().getExprAssignmentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBoolValAction_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBuildinFunctionAction_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprComparisonAccess().getExprComparisonLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprEqualityAccess().getExprEqualityLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprIdentifierAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprIntValAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMemberAccess().getExprMemberLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMultAccess().getExprMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprNotAccess().getExprNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprNumValAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprOrAccess().getExprOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSignAccess().getExprSignAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprStrvalAction_4_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprNot} "not" right=ExprMember
protected class ExprNot_Group_0 extends GroupToken {
	
	public ExprNot_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprNotAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprNot_RightAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprNotAccess().getExprNotAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprNot}
protected class ExprNot_ExprNotAction_0_0 extends ActionToken  {

	public ExprNot_ExprNotAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprNotAccess().getExprNotAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "not"
protected class ExprNot_NotKeyword_0_1 extends KeywordToken  {
	
	public ExprNot_NotKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExprNotAccess().getNotKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprNot_ExprNotAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// right=ExprMember
protected class ExprNot_RightAssignment_0_2 extends AssignmentToken  {
	
	public ExprNot_RightAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprNotAccess().getRightAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprMember_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprMemberRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprNotAccess().getRightExprMemberParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprNot_NotKeyword_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ExprMember
protected class ExprNot_ExprMemberParserRuleCall_1 extends RuleCallToken {
	
	public ExprNot_ExprMemberParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExprNotAccess().getExprMemberParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprMember_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ExprMember_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ExprNot ****************/


/************ begin Rule ExprMember ****************
 *
 * //ExprCustomOperator returns Expr:
 * 
 * //	ExprMember ({ExprCustomOperator.left=current} op=OPERATOR right=Expr)*
 * 
 * //; 
 * 
 * ExprMember returns Expr:
 * 	ExprSingle ({ExprMember.left=current} "." right=ExprAtomic)*;
 *
 **/

// ExprSingle ({ExprMember.left=current} "." right=ExprAtomic)*
protected class ExprMember_Group extends GroupToken {
	
	public ExprMember_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprMemberAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprMember_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprMember_ExprSingleParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAdditiveAccess().getExprAdditiveLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAndAccess().getExprAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAssignmentAccess().getExprAssignmentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBoolValAction_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBuildinFunctionAction_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprComparisonAccess().getExprComparisonLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprEqualityAccess().getExprEqualityLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprIdentifierAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprIntValAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMemberAccess().getExprMemberLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMultAccess().getExprMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprNotAccess().getExprNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprNumValAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprOrAccess().getExprOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSignAccess().getExprSignAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprStrvalAction_4_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ExprSingle
protected class ExprMember_ExprSingleParserRuleCall_0 extends RuleCallToken {
	
	public ExprMember_ExprSingleParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExprMemberAccess().getExprSingleParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(ExprSingle_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ({ExprMember.left=current} "." right=ExprAtomic)*
protected class ExprMember_Group_1 extends GroupToken {
	
	public ExprMember_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprMemberAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprMember_RightAssignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprMemberAccess().getExprMemberLeftAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprMember.left=current}
protected class ExprMember_ExprMemberLeftAction_1_0 extends ActionToken  {

	public ExprMember_ExprMemberLeftAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprMemberAccess().getExprMemberLeftAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprMember_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprMember_ExprSingleParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		Object val = eObjectConsumer.getConsumable("left", false);
		if(val == null) return null;
		if(!eObjectConsumer.isConsumedWithLastConsumtion("left")) return null;
		return createEObjectConsumer((EObject) val);
	}
}

// "."
protected class ExprMember_FullStopKeyword_1_1 extends KeywordToken  {
	
	public ExprMember_FullStopKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExprMemberAccess().getFullStopKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprMember_ExprMemberLeftAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// right=ExprAtomic
protected class ExprMember_RightAssignment_1_2 extends AssignmentToken  {
	
	public ExprMember_RightAssignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprMemberAccess().getRightAssignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAtomic_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("right",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("right");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprAtomicRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprMemberAccess().getRightExprAtomicParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprMember_FullStopKeyword_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ExprMember ****************/


/************ begin Rule ExprSingle ****************
 *
 * //	| {ExprBuildinOperator} 'buildin' '(' left=Expr op=OPERATOR right=Expr ')'	
 * 
 * //	| buildin?='buildin' name=ID parameters=ExprList
 * 
 * //	| buildin?='buildin' name=ID '(' ')'
 * 
 * //	| buildin?='buildin' '(' left=Expr op=OPERATOR right=Expr ')' // build in operators
 * 
 * ExprSingle returns Expr:
 * 	ExprAtomic | "(" Expr ")" | {ExprIntVal} intVal=INT | {ExprNumVal} numVal=Number | {ExprStrval} strVal=STRING |
 * 	{ExprBoolVal} boolVal=("true" | "false") | {ExprBuildinFunction} "buildin" name=ID (parameters=ExprList | "(" ")");
 *
 **/

// ExprAtomic | "(" Expr ")" | {ExprIntVal} intVal=INT | {ExprNumVal} numVal=Number | {ExprStrval} strVal=STRING |
// {ExprBoolVal} boolVal=("true" | "false") | {ExprBuildinFunction} "buildin" name=ID (parameters=ExprList | "(" ")")
protected class ExprSingle_Alternatives extends AlternativesToken {

	public ExprSingle_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_ExprAtomicParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprSingle_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ExprSingle_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ExprSingle_Group_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new ExprSingle_Group_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new ExprSingle_Group_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new ExprSingle_Group_6(lastRuleCallOrigin, this, 6, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAdditiveAccess().getExprAdditiveLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAndAccess().getExprAndLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAssignmentAccess().getExprAssignmentLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBoolValAction_5_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBuildinFunctionAction_6_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprComparisonAccess().getExprComparisonLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprEqualityAccess().getExprEqualityLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprIdentifierAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprIntValAction_2_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMemberAccess().getExprMemberLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprMultAccess().getExprMultLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprNotAccess().getExprNotAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprNumValAction_3_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprOrAccess().getExprOrLeftAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSignAccess().getExprSignAction_0_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprStrvalAction_4_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ExprAtomic
protected class ExprSingle_ExprAtomicParserRuleCall_0 extends RuleCallToken {
	
	public ExprSingle_ExprAtomicParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getExprAtomicParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAtomic_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprIdentifierAction_2_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ExprAtomic_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// "(" Expr ")"
protected class ExprSingle_Group_1 extends GroupToken {
	
	public ExprSingle_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_RightParenthesisKeyword_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class ExprSingle_LeftParenthesisKeyword_1_0 extends KeywordToken  {
	
	public ExprSingle_LeftParenthesisKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getLeftParenthesisKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Expr
protected class ExprSingle_ExprParserRuleCall_1_1 extends RuleCallToken {
	
	public ExprSingle_ExprParserRuleCall_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getExprParserRuleCall_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expr_ExprAssignmentParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Expr_ExprAssignmentParserRuleCall.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_LeftParenthesisKeyword_1_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}

// ")"
protected class ExprSingle_RightParenthesisKeyword_1_2 extends KeywordToken  {
	
	public ExprSingle_RightParenthesisKeyword_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getRightParenthesisKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_ExprParserRuleCall_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {ExprIntVal} intVal=INT
protected class ExprSingle_Group_2 extends GroupToken {
	
	public ExprSingle_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_IntValAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprIntValAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprIntVal}
protected class ExprSingle_ExprIntValAction_2_0 extends ActionToken  {

	public ExprSingle_ExprIntValAction_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getExprIntValAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// intVal=INT
protected class ExprSingle_IntValAssignment_2_1 extends AssignmentToken  {
	
	public ExprSingle_IntValAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getIntValAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_ExprIntValAction_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("intVal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("intVal");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExprSingleAccess().getIntValINTTerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExprSingleAccess().getIntValINTTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}


// {ExprNumVal} numVal=Number
protected class ExprSingle_Group_3 extends GroupToken {
	
	public ExprSingle_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_NumValAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprNumValAction_3_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprNumVal}
protected class ExprSingle_ExprNumValAction_3_0 extends ActionToken  {

	public ExprSingle_ExprNumValAction_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getExprNumValAction_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// numVal=Number
protected class ExprSingle_NumValAssignment_3_1 extends AssignmentToken  {
	
	public ExprSingle_NumValAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getNumValAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_ExprNumValAction_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("numVal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("numVal");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExprSingleAccess().getNumValNumberParserRuleCall_3_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getExprSingleAccess().getNumValNumberParserRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// {ExprStrval} strVal=STRING
protected class ExprSingle_Group_4 extends GroupToken {
	
	public ExprSingle_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_StrValAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprStrvalAction_4_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprStrval}
protected class ExprSingle_ExprStrvalAction_4_0 extends ActionToken  {

	public ExprSingle_ExprStrvalAction_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getExprStrvalAction_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// strVal=STRING
protected class ExprSingle_StrValAssignment_4_1 extends AssignmentToken  {
	
	public ExprSingle_StrValAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getStrValAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_ExprStrvalAction_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("strVal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("strVal");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExprSingleAccess().getStrValSTRINGTerminalRuleCall_4_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExprSingleAccess().getStrValSTRINGTerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}


// {ExprBoolVal} boolVal=("true" | "false")
protected class ExprSingle_Group_5 extends GroupToken {
	
	public ExprSingle_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_BoolValAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBoolValAction_5_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprBoolVal}
protected class ExprSingle_ExprBoolValAction_5_0 extends ActionToken  {

	public ExprSingle_ExprBoolValAction_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getExprBoolValAction_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// boolVal=("true" | "false")
protected class ExprSingle_BoolValAssignment_5_1 extends AssignmentToken  {
	
	public ExprSingle_BoolValAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getBoolValAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_ExprBoolValAction_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("boolVal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("boolVal");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getExprSingleAccess().getBoolValTrueKeyword_5_1_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getExprSingleAccess().getBoolValTrueKeyword_5_1_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getExprSingleAccess().getBoolValFalseKeyword_5_1_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getExprSingleAccess().getBoolValFalseKeyword_5_1_0_1();
			return obj;
		}
		return null;
	}

}


// {ExprBuildinFunction} "buildin" name=ID (parameters=ExprList | "(" ")")
protected class ExprSingle_Group_6 extends GroupToken {
	
	public ExprSingle_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_Alternatives_6_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprSingleAccess().getExprBuildinFunctionAction_6_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprBuildinFunction}
protected class ExprSingle_ExprBuildinFunctionAction_6_0 extends ActionToken  {

	public ExprSingle_ExprBuildinFunctionAction_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getExprBuildinFunctionAction_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "buildin"
protected class ExprSingle_BuildinKeyword_6_1 extends KeywordToken  {
	
	public ExprSingle_BuildinKeyword_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getBuildinKeyword_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_ExprBuildinFunctionAction_6_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=ID
protected class ExprSingle_NameAssignment_6_2 extends AssignmentToken  {
	
	public ExprSingle_NameAssignment_6_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getNameAssignment_6_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_BuildinKeyword_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExprSingleAccess().getNameIDTerminalRuleCall_6_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExprSingleAccess().getNameIDTerminalRuleCall_6_2_0();
			return obj;
		}
		return null;
	}

}

// parameters=ExprList | "(" ")"
protected class ExprSingle_Alternatives_6_3 extends AlternativesToken {

	public ExprSingle_Alternatives_6_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getAlternatives_6_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_ParametersAssignment_6_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprSingle_Group_6_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameters=ExprList
protected class ExprSingle_ParametersAssignment_6_3_0 extends AssignmentToken  {
	
	public ExprSingle_ParametersAssignment_6_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getParametersAssignment_6_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprSingleAccess().getParametersExprListParserRuleCall_6_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprSingle_NameAssignment_6_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "(" ")"
protected class ExprSingle_Group_6_3_1 extends GroupToken {
	
	public ExprSingle_Group_6_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getGroup_6_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_RightParenthesisKeyword_6_3_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class ExprSingle_LeftParenthesisKeyword_6_3_1_0 extends KeywordToken  {
	
	public ExprSingle_LeftParenthesisKeyword_6_3_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getLeftParenthesisKeyword_6_3_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_NameAssignment_6_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ")"
protected class ExprSingle_RightParenthesisKeyword_6_3_1_1 extends KeywordToken  {
	
	public ExprSingle_RightParenthesisKeyword_6_3_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExprSingleAccess().getRightParenthesisKeyword_6_3_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprSingle_LeftParenthesisKeyword_6_3_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}





/************ end Rule ExprSingle ****************/



/************ begin Rule ExprAtomic ****************
 *
 * ExprAtomic returns Expr:
 * 	{ExprFunctioncall} nameVal=[FuncDef] parameters=ExprList | {ExprFunctioncall} nameVal=[FuncDef] "(" ")" |
 * 	{ExprIdentifier} nameVal=[VarDef];
 *
 **/

// {ExprFunctioncall} nameVal=[FuncDef] parameters=ExprList | {ExprFunctioncall} nameVal=[FuncDef] "(" ")" |
// {ExprIdentifier} nameVal=[VarDef]
protected class ExprAtomic_Alternatives extends AlternativesToken {

	public ExprAtomic_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getExprAtomicAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAtomic_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprAtomic_Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ExprAtomic_Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_1_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprIdentifierAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprFunctioncall} nameVal=[FuncDef] parameters=ExprList
protected class ExprAtomic_Group_0 extends GroupToken {
	
	public ExprAtomic_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprAtomicAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAtomic_ParametersAssignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprFunctioncall}
protected class ExprAtomic_ExprFunctioncallAction_0_0 extends ActionToken  {

	public ExprAtomic_ExprFunctioncallAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// nameVal=[FuncDef]
protected class ExprAtomic_NameValAssignment_0_1 extends AssignmentToken  {
	
	public ExprAtomic_NameValAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprAtomicAccess().getNameValAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAtomic_ExprFunctioncallAction_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nameVal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nameVal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprAtomicAccess().getNameValFuncDefCrossReference_0_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExprAtomicAccess().getNameValFuncDefCrossReference_0_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// parameters=ExprList
protected class ExprAtomic_ParametersAssignment_0_2 extends AssignmentToken  {
	
	public ExprAtomic_ParametersAssignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprAtomicAccess().getParametersAssignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprList_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprListRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprAtomicAccess().getParametersExprListParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprAtomic_NameValAssignment_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// {ExprFunctioncall} nameVal=[FuncDef] "(" ")"
protected class ExprAtomic_Group_1 extends GroupToken {
	
	public ExprAtomic_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprAtomicAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAtomic_RightParenthesisKeyword_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_1_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprFunctioncall}
protected class ExprAtomic_ExprFunctioncallAction_1_0 extends ActionToken  {

	public ExprAtomic_ExprFunctioncallAction_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprAtomicAccess().getExprFunctioncallAction_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// nameVal=[FuncDef]
protected class ExprAtomic_NameValAssignment_1_1 extends AssignmentToken  {
	
	public ExprAtomic_NameValAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprAtomicAccess().getNameValAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAtomic_ExprFunctioncallAction_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nameVal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nameVal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprAtomicAccess().getNameValFuncDefCrossReference_1_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExprAtomicAccess().getNameValFuncDefCrossReference_1_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "("
protected class ExprAtomic_LeftParenthesisKeyword_1_2 extends KeywordToken  {
	
	public ExprAtomic_LeftParenthesisKeyword_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExprAtomicAccess().getLeftParenthesisKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAtomic_NameValAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ")"
protected class ExprAtomic_RightParenthesisKeyword_1_3 extends KeywordToken  {
	
	public ExprAtomic_RightParenthesisKeyword_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExprAtomicAccess().getRightParenthesisKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAtomic_LeftParenthesisKeyword_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// {ExprIdentifier} nameVal=[VarDef]
protected class ExprAtomic_Group_2 extends GroupToken {
	
	public ExprAtomic_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprAtomicAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAtomic_NameValAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprAtomicAccess().getExprIdentifierAction_2_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ExprIdentifier}
protected class ExprAtomic_ExprIdentifierAction_2_0 extends ActionToken  {

	public ExprAtomic_ExprIdentifierAction_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getExprAtomicAccess().getExprIdentifierAction_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// nameVal=[VarDef]
protected class ExprAtomic_NameValAssignment_2_1 extends AssignmentToken  {
	
	public ExprAtomic_NameValAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprAtomicAccess().getNameValAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprAtomic_ExprIdentifierAction_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nameVal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nameVal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprAtomicAccess().getNameValVarDefCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getExprAtomicAccess().getNameValVarDefCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}



/************ end Rule ExprAtomic ****************/


/************ begin Rule ExprList ****************
 *
 * ExprList:
 * 	"(" params+=Expr ("," params+=Expr)* ")";
 *
 **/

// "(" params+=Expr ("," params+=Expr)* ")"
protected class ExprList_Group extends GroupToken {
	
	public ExprList_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprListAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprList_RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprListRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "("
protected class ExprList_LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public ExprList_LeftParenthesisKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExprListAccess().getLeftParenthesisKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// params+=Expr
protected class ExprList_ParamsAssignment_1 extends AssignmentToken  {
	
	public ExprList_ParamsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprListAccess().getParamsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expr_ExprAssignmentParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("params",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprListAccess().getParamsExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprList_LeftParenthesisKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," params+=Expr)*
protected class ExprList_Group_2 extends GroupToken {
	
	public ExprList_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExprListAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprList_ParamsAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class ExprList_CommaKeyword_2_0 extends KeywordToken  {
	
	public ExprList_CommaKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExprListAccess().getCommaKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprList_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprList_ParamsAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// params+=Expr
protected class ExprList_ParamsAssignment_2_1 extends AssignmentToken  {
	
	public ExprList_ParamsAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprListAccess().getParamsAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expr_ExprAssignmentParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("params",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("params");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprListAccess().getParamsExprParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExprList_CommaKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class ExprList_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public ExprList_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExprListAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExprList_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExprList_ParamsAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ExprList ****************/

}
