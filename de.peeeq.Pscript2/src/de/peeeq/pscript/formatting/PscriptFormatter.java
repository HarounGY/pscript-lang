/*
 * generated by Xtext
 */
package de.peeeq.pscript.formatting;

import java.util.List;

import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;

import de.peeeq.pscript.services.PscriptGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class PscriptFormatter extends AbstractDeclarativeFormatter {
	
	@Override
	protected void configureFormatting(FormattingConfig c) {
// It's usually a good idea to activate the following three statements.
// They will add and preserve newlines around comments
//		c.setLinewrap(0, 1, 2).before(getGrammarAccess().getSL_COMMENTRule());
//		c.setLinewrap(0, 1, 2).before(getGrammarAccess().getML_COMMENTRule());
//		c.setLinewrap(0, 1, 1).after(getGrammarAccess().getML_COMMENTRule());
		
//		PscriptGrammarAccess f = (PscriptGrammarAccess) getGrammarAccess();
//		
//		AbstractElement beginElement;
//		c.setIndentationIncrement().after();
//		c.setIndentation(f.getFuncDefRule());
		
		PscriptGrammarAccess f = (PscriptGrammarAccess) getGrammarAccess();
		
		
	    // find common keywords an specify formatting for them
	    for (Pair<Keyword, Keyword> pair : f.findKeywordPairs("(", ")")) {
	      c.setNoSpace().after(pair.getFirst());
	      c.setNoSpace().before(pair.getSecond());
	    }
	    for (Keyword comma : f.findKeywords(",")) {
	      c.setNoSpace().before(comma);
	    }
	    
	    for (Keyword dot : f.findKeywords(".")) {
	      c.setNoSpace().before(dot);
	      c.setNoSpace().after(dot);
	    }
	    
		// indentation:
		List<Pair<Keyword,Keyword>> pairs = f.findKeywordPairs("function", "endfunction");
		for (Pair<Keyword, Keyword> pair : pairs) {
			c.setIndentation(pair.getFirst(), pair.getSecond());
		}
		
		for (Keyword k : f.findKeywords("else", "elseif")) {
			c.setIndentationDecrement().before(k);
			c.setIndentationIncrement().after(k);
	    }
		
		
		pairs = f.findKeywordPairs("if", "endif");
		for (Pair<Keyword, Keyword> pair : pairs) {
			c.setIndentation(pair.getFirst(), pair.getSecond());
		}
		
		pairs = f.findKeywordPairs("package", "endpackage");
		for (Pair<Keyword, Keyword> pair : pairs) {
			c.setIndentation(pair.getFirst(), pair.getSecond());
		}
		
		
		pairs = f.findKeywordPairs("while", "endwhile");
		for (Pair<Keyword, Keyword> pair : pairs) {
			c.setIndentation(pair.getFirst(), pair.getSecond());
		}
		

		pairs = f.findKeywordPairs("loop", "endloop");
		for (Pair<Keyword, Keyword> pair : pairs) {
			c.setIndentation(pair.getFirst(), pair.getSecond());
		}
		
		pairs = f.findKeywordPairs("class", "endclass");
		for (Pair<Keyword, Keyword> pair : pairs) {
			c.setIndentation(pair.getFirst(), pair.getSecond());
		}
	}
}
