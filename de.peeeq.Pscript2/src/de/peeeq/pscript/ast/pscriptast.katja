specification pscriptAST

/**
 this is a description of the pscript abstract syntax tree using the katja system
 --> http://softech.informatik.uni-kl.de/Homepage/Katja

 compile with
 rm -Rf katja-gen/de/
 java -jar lib/katja.jar -b java -o -S -d katja-gen src/de/peeeq/pscript/ast/pscriptast.katja
*/

backend java {
    package de.peeeq.pscript.ast
    import java.lang.String
    import java.lang.Integer
    import java.lang.Boolean
    import org.eclipse.emf.ecore.EObject
	import java.math.BigDecimal
}


external String
external Integer
external BigDecimal
external Boolean
external EObject

root ACompilationUnit Pos

ACompilationUnit * APackage


APackage (String name, AImports imports, AElements elements)

AImports * AImport

AImport (EObject source, String name)

AElements * AElement

AElement = ATypeDef|AFuncDef|AVarDef|AInitBlock

AInitBlock(EObject source, ABlock body)

ATypeDef = ANativeType|AClassDef


ANativeType(EObject source, String name, String origName, String superName)


AClassDef (EObject source, String name, AClassMembers members)

AClassMembers * AClassMember

AClassMember = AVarDef | AFuncDef

AVarDef(EObject source, String name, ATypeExpr typeExpr, Boolean constant, AExpr initial)

ATypeExpr = 
	  ATypeExprSimple(String name)
	| ATypeExprInfer() // type expression not given explicitly e.g.: val x = 4


AFuncDef(EObject source, String name, AReturnType retType, AFormalParameters params, ABlock body)

AReturnType = ATypeExpr | AReturnsNothing()

AFormalParameters * AFormalParameter

AFormalParameter(EObject source, String name, ATypeExpr type)

ABlock * AStatement

AStatement = ABlock
          | AIf         ( EObject source, AExpr cond, ABlock thenBlock, ABlock elseBlock )
          | AWhile      ( EObject source, AExpr cond, AStatement body )
          | AReturn     ( EObject source, AExpr retValue )
          | AVoidReturn ( EObject source )
          | AAssignment ( EObject source, AExpr left, AExpr right )
		  | AVarDef
          | AExpr

AExpr =   APrefix ( EObject source, APrefixOp op, AExpr e )
       | AInfix  ( EObject source, AExpr left, AInfixOp op, AExpr right )
       | ALiteral
       | AFunctionCall ( EObject source, String name, AArguments args )
	   | ABuildinCall ( EObject source, String name, AArguments args )
       | AVariableAccess ( EObject source, AIdentifier ident )
	   | AFieldAccess ( EObject source, AExpr owner, AIdentifier ident )
       | ANoExpr (EObject source) // variables which are not initialized etc.

AArguments * AExpr

AIdentifier( EObject source, String name)

ALiteral = AIntegerLiteral ( EObject source, Integer value )
		| ARealLiteral (EObject source, BigDecimal value)
		| AStringLiteral (EObject source, String value)
        | ABooleanLiteral  (EObject source, Boolean value)


AInfixOp = AEquals ()
		| AUnequal()
		| AGt  ()
        | AGtEq ()
        | ALt ()
        | ALtEq ()
        | APlus  ()
        | AMinus  ()
        | AMult  ()
        | ADiv ()
        | ADivInt ()
        | AModulo ()
		| AModuloReal() 
        | ADot  ()
		| AAnd()
		| AOr()

APrefixOp = APlus | AMinus | ANot()
