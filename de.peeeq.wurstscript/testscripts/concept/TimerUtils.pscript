package TimerUtils {
	
	
	timer array freeTimers
	integer freeTimersCount = 0
	hashtable ht = InitHashtable()
	
	function getTimer() {
		if freeTimersCount > 0 {
			freeTimersCount -= 1
			return freeTimers[freeTimersCount]
		} else {
			return CreateTimer()
		}
	}
	
	function timer.setData(integer data) {
		SaveInteger(ht, 0, GetHandleId(this), data)
	} 
	
	function timer.getData() returns integer {
		LoadInteger(ht, 0, GetHandleId(this))
	}
	
	function timer.release() {
		PauseTimer(this)
		freeTimers[freeTimersCount] = this
		freeTimersCount += 1
	}
	
	
	public trait Timed {
		function onTimer()
		
		private static function timerEnd() {
			timer t = GetElapsedTimer()
			thistype c = t.getData() cast_to thistype
			c.onTimer()
			t.release()
		}
		
		function startTimer(real time) {
			timer t = getTimer()
			t.setData(this cast_to integer)
			TimerStart(this, time, false, function timerEnd)
		}
	}
	
	public trait Periodic {
	
		private timer t
	
		function periodic()
		
		function stopPeriodic() {
			t.release()
			t = null
		}
		
		private static function timerEnd() {
			t = GetElapsedTimer()
			thistype c = t.getData() cast_to thistype
			c.periodic()
		}
		
		function startPeriodic(real time) {
			timer t = getTimer()
			t.setData(this cast_to integer)
			TimerStart(this, time, true, function timerEnd)
		}
	}
		
}