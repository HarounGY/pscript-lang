//generated by parseq
package de.peeeq.wurstscript.ast;

class JassGlobalBlockImpl extends JassGlobalBlock implements SortPosIntern {
 	private SortPos parent;
	public SortPos getParent() { return parent; }
	public void setParent(SortPos parent) {
		if (parent != null && this.parent != null) { 			throw new Error("Parent of " + this + " already set: " + this.parent + "\ntried to change to " + parent); 		}
		this.parent = parent;
	}

	protected void other_setParentToThis(GlobalVarDef t) {
		((SortPosIntern) t).setParent(this);
	}
	protected void other_clearParent(GlobalVarDef t) {
		((SortPosIntern) t).setParent(null);
	}
	@Override public <T> T match(TopLevelDeclaration.Matcher<T> matcher) {
		return matcher.case_JassGlobalBlock(this);
	}
	@Override public void match(TopLevelDeclaration.MatcherVoid matcher) {
		matcher.case_JassGlobalBlock(this);
	}

	@Override public <T> T match(JassToplevelDeclaration.Matcher<T> matcher) {
		return matcher.case_JassGlobalBlock(this);
	}
	@Override public void match(JassToplevelDeclaration.MatcherVoid matcher) {
		matcher.case_JassGlobalBlock(this);
	}

	@Override public void accept(CompilationUnit.Visitor v) {
		for (GlobalVarDef i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(WScope.Visitor v) {
		for (GlobalVarDef i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(JassGlobalBlock.Visitor v) {
		for (GlobalVarDef i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(TopLevelDeclaration.Visitor v) {
		for (GlobalVarDef i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(JassToplevelDeclaration.Visitor v) {
		for (GlobalVarDef i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(PackageOrGlobal.Visitor v) {
		for (GlobalVarDef i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
}
