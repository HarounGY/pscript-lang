//generated by parseq
package de.peeeq.wurstscript.ast;

public class Ast {
	public static WPos WPos(String file, Integer line, Integer column) {
		return new WPosImpl(file, line, column);
	}
	public static WPackage WPackage(WPos source, String name, WImports imports, WEntities elements) {
		return new WPackageImpl(source, name, imports, elements);
	}
	public static WImport WImport(WPos source, String packagename) {
		return new WImportImpl(source, packagename);
	}
	public static InitBlock InitBlock(WPos source, WStatements body) {
		return new InitBlockImpl(source, body);
	}
	public static NativeFunc NativeFunc(WPos source, Modifiers modifiers, FuncSignature signature) {
		return new NativeFuncImpl(source, modifiers, signature);
	}
	public static ModuleDef ModuleDef(WPos source, Modifiers modifiers, String name, ClassSlots slots) {
		return new ModuleDefImpl(source, modifiers, name, slots);
	}
	public static NoTypeExpr NoTypeExpr() {
		return new NoTypeExprImpl();
	}
	public static NoExpr NoExpr() {
		return new NoExprImpl();
	}
	public static NativeType NativeType(WPos source, Modifiers modifiers, String name, OptTypeExpr typ) {
		return new NativeTypeImpl(source, modifiers, name, typ);
	}
	public static ClassDef ClassDef(WPos source, Modifiers modifiers, String name, boolean unmanaged, ClassSlots slots) {
		return new ClassDefImpl(source, modifiers, name, unmanaged, slots);
	}
	public static ConstructorDef ConstructorDef(WPos source, Modifiers modifiers, WParameters params, WStatements body) {
		return new ConstructorDefImpl(source, modifiers, params, body);
	}
	public static OnDestroyDef OnDestroyDef(WPos source, WStatements body) {
		return new OnDestroyDefImpl(source, body);
	}
	public static ModuleUse ModuleUse(WPos source, String moduleName) {
		return new ModuleUseImpl(source, moduleName);
	}
	public static GlobalVarDef GlobalVarDef(WPos source, Modifiers modifiers, boolean isConstant, OptTypeExpr typ, String name, OptExpr initialExpr) {
		return new GlobalVarDefImpl(source, modifiers, isConstant, typ, name, initialExpr);
	}
	public static LocalVarDef LocalVarDef(WPos source, boolean constant, OptTypeExpr typ, String name, OptExpr initialExpr) {
		return new LocalVarDefImpl(source, constant, typ, name, initialExpr);
	}
	public static FuncDef FuncDef(WPos source, Modifiers modifiers, FuncSignature signature, WStatements body) {
		return new FuncDefImpl(source, modifiers, signature, body);
	}
	public static TypeExpr TypeExpr(WPos source, String typeName, boolean isArray, ArraySizes sizes) {
		return new TypeExprImpl(source, typeName, isArray, sizes);
	}
	public static FuncSignature FuncSignature(WPos source, String name, WParameters parameters, OptTypeExpr typ) {
		return new FuncSignatureImpl(source, name, parameters, typ);
	}
	public static WParameter WParameter(WPos source, TypeExpr typ, String name) {
		return new WParameterImpl(source, typ, name);
	}
	public static StmtIf StmtIf(WPos source, Expr cond, WStatements thenBlock, WStatements elseBlock) {
		return new StmtIfImpl(source, cond, thenBlock, elseBlock);
	}
	public static StmtWhile StmtWhile(WPos source, Expr cond, WStatements body) {
		return new StmtWhileImpl(source, cond, body);
	}
	public static StmtLoop StmtLoop(WPos source, WStatements body) {
		return new StmtLoopImpl(source, body);
	}
	public static StmtSet StmtSet(WPos source, ExprAssignable left, OpAssignment op, Expr right) {
		return new StmtSetImpl(source, left, op, right);
	}
	public static StmtReturn StmtReturn(WPos source, OptExpr obj) {
		return new StmtReturnImpl(source, obj);
	}
	public static StmtDestroy StmtDestroy(WPos source, Expr obj) {
		return new StmtDestroyImpl(source, obj);
	}
	public static StmtErr StmtErr(WPos source) {
		return new StmtErrImpl(source);
	}
	public static StmtExitwhen StmtExitwhen(WPos source, Expr cond) {
		return new StmtExitwhenImpl(source, cond);
	}
	public static OpAssign OpAssign() {
		return new OpAssignImpl();
	}
	public static ExprBinary ExprBinary(WPos source, Expr left, OpBinary op, Expr right) {
		return new ExprBinaryImpl(source, left, op, right);
	}
	public static ExprUnary ExprUnary(WPos source, OpUnary op, Expr right) {
		return new ExprUnaryImpl(source, op, right);
	}
	public static ExprMemberVar ExprMemberVar(WPos source, Expr left, String varName) {
		return new ExprMemberVarImpl(source, left, varName);
	}
	public static ExprMemberArrayVar ExprMemberArrayVar(WPos source, Expr left, String varName, Indexes indexes) {
		return new ExprMemberArrayVarImpl(source, left, varName, indexes);
	}
	public static ExprMemberMethod ExprMemberMethod(WPos source, Expr left, String funcName, Arguments args) {
		return new ExprMemberMethodImpl(source, left, funcName, args);
	}
	public static ExprFunctionCall ExprFunctionCall(WPos source, String funcName, Arguments args) {
		return new ExprFunctionCallImpl(source, funcName, args);
	}
	public static ExprNewObject ExprNewObject(WPos source, String typeName, Arguments args) {
		return new ExprNewObjectImpl(source, typeName, args);
	}
	public static ExprCast ExprCast(WPos source, TypeExpr typ, Expr expr) {
		return new ExprCastImpl(source, typ, expr);
	}
	public static ExprIntVal ExprIntVal(WPos source, int val) {
		return new ExprIntValImpl(source, val);
	}
	public static ExprRealVal ExprRealVal(WPos source, double val) {
		return new ExprRealValImpl(source, val);
	}
	public static ExprStringVal ExprStringVal(WPos source, String val) {
		return new ExprStringValImpl(source, val);
	}
	public static ExprBoolVal ExprBoolVal(WPos source, boolean val) {
		return new ExprBoolValImpl(source, val);
	}
	public static ExprFuncRef ExprFuncRef(WPos source, String funcName) {
		return new ExprFuncRefImpl(source, funcName);
	}
	public static ExprVarAccess ExprVarAccess(WPos source, String varName) {
		return new ExprVarAccessImpl(source, varName);
	}
	public static ExprVarArrayAccess ExprVarArrayAccess(WPos source, String varName, Indexes indexes) {
		return new ExprVarArrayAccessImpl(source, varName, indexes);
	}
	public static ExprThis ExprThis(WPos source) {
		return new ExprThisImpl(source);
	}
	public static ExprNull ExprNull(WPos source) {
		return new ExprNullImpl(source);
	}
	public static OpOr OpOr() {
		return new OpOrImpl();
	}
	public static OpAnd OpAnd() {
		return new OpAndImpl();
	}
	public static OpEquals OpEquals() {
		return new OpEqualsImpl();
	}
	public static OpUnequals OpUnequals() {
		return new OpUnequalsImpl();
	}
	public static OpLessEq OpLessEq() {
		return new OpLessEqImpl();
	}
	public static OpLess OpLess() {
		return new OpLessImpl();
	}
	public static OpGreaterEq OpGreaterEq() {
		return new OpGreaterEqImpl();
	}
	public static OpGreater OpGreater() {
		return new OpGreaterImpl();
	}
	public static OpPlus OpPlus() {
		return new OpPlusImpl();
	}
	public static OpMinus OpMinus() {
		return new OpMinusImpl();
	}
	public static OpMult OpMult() {
		return new OpMultImpl();
	}
	public static OpDivReal OpDivReal() {
		return new OpDivRealImpl();
	}
	public static OpModReal OpModReal() {
		return new OpModRealImpl();
	}
	public static OpModInt OpModInt() {
		return new OpModIntImpl();
	}
	public static OpDivInt OpDivInt() {
		return new OpDivIntImpl();
	}
	public static OpNot OpNot() {
		return new OpNotImpl();
	}
	public static VisibilityPublic VisibilityPublic(WPos source) {
		return new VisibilityPublicImpl(source);
	}
	public static VisibilityPrivate VisibilityPrivate(WPos source) {
		return new VisibilityPrivateImpl(source);
	}
	public static VisibilityPublicread VisibilityPublicread(WPos source) {
		return new VisibilityPublicreadImpl(source);
	}
	public static VisibilityProtected VisibilityProtected(WPos source) {
		return new VisibilityProtectedImpl(source);
	}
	public static VisibilityDefault VisibilityDefault(WPos source) {
		return new VisibilityDefaultImpl(source);
	}
	public static ModStatic ModStatic(WPos source) {
		return new ModStaticImpl(source);
	}
	public static ModOverride ModOverride(WPos source) {
		return new ModOverrideImpl(source);
	}
	public static CompilationUnit CompilationUnit(TopLevelDeclaration ... elements ) {
		CompilationUnit l = new CompilationUnitImpl();
		for (TopLevelDeclaration e : elements) { l.add(e); }
		return l;
	}
	public static CompilationUnit CompilationUnit(Iterable<TopLevelDeclaration> elements ) {
		CompilationUnit l = new CompilationUnitImpl();
		for (TopLevelDeclaration e : elements) { l.add(e); }
		return l;
	}
	public static WImports WImports(WImport ... elements ) {
		WImports l = new WImportsImpl();
		for (WImport e : elements) { l.add(e); }
		return l;
	}
	public static WImports WImports(Iterable<WImport> elements ) {
		WImports l = new WImportsImpl();
		for (WImport e : elements) { l.add(e); }
		return l;
	}
	public static WEntities WEntities(WEntity ... elements ) {
		WEntities l = new WEntitiesImpl();
		for (WEntity e : elements) { l.add(e); }
		return l;
	}
	public static WEntities WEntities(Iterable<WEntity> elements ) {
		WEntities l = new WEntitiesImpl();
		for (WEntity e : elements) { l.add(e); }
		return l;
	}
	public static ClassSlots ClassSlots(ClassSlot ... elements ) {
		ClassSlots l = new ClassSlotsImpl();
		for (ClassSlot e : elements) { l.add(e); }
		return l;
	}
	public static ClassSlots ClassSlots(Iterable<ClassSlot> elements ) {
		ClassSlots l = new ClassSlotsImpl();
		for (ClassSlot e : elements) { l.add(e); }
		return l;
	}
	public static ArraySizes ArraySizes(Expr ... elements ) {
		ArraySizes l = new ArraySizesImpl();
		for (Expr e : elements) { l.add(e); }
		return l;
	}
	public static ArraySizes ArraySizes(Iterable<Expr> elements ) {
		ArraySizes l = new ArraySizesImpl();
		for (Expr e : elements) { l.add(e); }
		return l;
	}
	public static WParameters WParameters(WParameter ... elements ) {
		WParameters l = new WParametersImpl();
		for (WParameter e : elements) { l.add(e); }
		return l;
	}
	public static WParameters WParameters(Iterable<WParameter> elements ) {
		WParameters l = new WParametersImpl();
		for (WParameter e : elements) { l.add(e); }
		return l;
	}
	public static WStatements WStatements(WStatement ... elements ) {
		WStatements l = new WStatementsImpl();
		for (WStatement e : elements) { l.add(e); }
		return l;
	}
	public static WStatements WStatements(Iterable<WStatement> elements ) {
		WStatements l = new WStatementsImpl();
		for (WStatement e : elements) { l.add(e); }
		return l;
	}
	public static Indexes Indexes(Expr ... elements ) {
		Indexes l = new IndexesImpl();
		for (Expr e : elements) { l.add(e); }
		return l;
	}
	public static Indexes Indexes(Iterable<Expr> elements ) {
		Indexes l = new IndexesImpl();
		for (Expr e : elements) { l.add(e); }
		return l;
	}
	public static Arguments Arguments(Expr ... elements ) {
		Arguments l = new ArgumentsImpl();
		for (Expr e : elements) { l.add(e); }
		return l;
	}
	public static Arguments Arguments(Iterable<Expr> elements ) {
		Arguments l = new ArgumentsImpl();
		for (Expr e : elements) { l.add(e); }
		return l;
	}
	public static Modifiers Modifiers(Modifier ... elements ) {
		Modifiers l = new ModifiersImpl();
		for (Modifier e : elements) { l.add(e); }
		return l;
	}
	public static Modifiers Modifiers(Iterable<Modifier> elements ) {
		Modifiers l = new ModifiersImpl();
		for (Modifier e : elements) { l.add(e); }
		return l;
	}
	public static JassGlobalBlock JassGlobalBlock(GlobalVarDef ... elements ) {
		JassGlobalBlock l = new JassGlobalBlockImpl();
		for (GlobalVarDef e : elements) { l.add(e); }
		return l;
	}
	public static JassGlobalBlock JassGlobalBlock(Iterable<GlobalVarDef> elements ) {
		JassGlobalBlock l = new JassGlobalBlockImpl();
		for (GlobalVarDef e : elements) { l.add(e); }
		return l;
	}
}