//generated by parseq
package de.peeeq.wurstscript.ast;

class ConstructorDefImpl implements ConstructorDef, SortPosIntern {
	ConstructorDefImpl(WPos source, VisibilityModifier visibility, WParameters params, WStatements body) {
		if (source == null) throw new IllegalArgumentException();
		((SortPosIntern)source).setParent(this);
		this.source = source;
		if (visibility == null) throw new IllegalArgumentException();
		((SortPosIntern)visibility).setParent(this);
		this.visibility = visibility;
		if (params == null) throw new IllegalArgumentException();
		((SortPosIntern)params).setParent(this);
		this.params = params;
		if (body == null) throw new IllegalArgumentException();
		((SortPosIntern)body).setParent(this);
		this.body = body;
	}

	private SortPos parent;
	public SortPos getParent() { return parent; }
	public void setParent(SortPos parent) {
		if (parent != null && this.parent != null) { throw new Error("Parent already set."); }
		this.parent = parent;
	}

	private WPos source;
	public void setSource(WPos source) {
		if (source == null) throw new IllegalArgumentException();
		((SortPosIntern)this.source).setParent(null);
		((SortPosIntern)source).setParent(this);
		this.source = source;
	} 
	public WPos getSource() { return source; }

	private VisibilityModifier visibility;
	public void setVisibility(VisibilityModifier visibility) {
		if (visibility == null) throw new IllegalArgumentException();
		((SortPosIntern)this.visibility).setParent(null);
		((SortPosIntern)visibility).setParent(this);
		this.visibility = visibility;
	} 
	public VisibilityModifier getVisibility() { return visibility; }

	private WParameters params;
	public void setParams(WParameters params) {
		if (params == null) throw new IllegalArgumentException();
		((SortPosIntern)this.params).setParent(null);
		((SortPosIntern)params).setParent(this);
		this.params = params;
	} 
	public WParameters getParams() { return params; }

	private WStatements body;
	public void setBody(WStatements body) {
		if (body == null) throw new IllegalArgumentException();
		((SortPosIntern)this.body).setParent(null);
		((SortPosIntern)body).setParent(this);
		this.body = body;
	} 
	public WStatements getBody() { return body; }

	@Override public void accept(ClassSlot.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		params.accept(v);
		body.accept(v);
		v.visit(this);
	}
	@Override public void accept(TypeDef.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		params.accept(v);
		body.accept(v);
		v.visit(this);
	}
	@Override public void accept(WEntity.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		params.accept(v);
		body.accept(v);
		v.visit(this);
	}
	@Override public void accept(ConstructorDef.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		params.accept(v);
		body.accept(v);
		v.visit(this);
	}
	@Override public void accept(ClassSlots.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		params.accept(v);
		body.accept(v);
		v.visit(this);
	}
	@Override public void accept(WPackage.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		params.accept(v);
		body.accept(v);
		v.visit(this);
	}
	@Override public void accept(ClassDef.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		params.accept(v);
		body.accept(v);
		v.visit(this);
	}
	@Override public void accept(WEntities.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		params.accept(v);
		body.accept(v);
		v.visit(this);
	}
	@Override public void accept(WScope.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		params.accept(v);
		body.accept(v);
		v.visit(this);
	}
	@Override public void accept(TopLevelDeclaration.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		params.accept(v);
		body.accept(v);
		v.visit(this);
	}
	@Override public void accept(CompilationUnit.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		params.accept(v);
		body.accept(v);
		v.visit(this);
	}
	@Override public void accept(PackageOrGlobal.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		params.accept(v);
		body.accept(v);
		v.visit(this);
	}
	@Override public <T> T match(WScope.Matcher<T> matcher) {
		return matcher.case_ConstructorDef(this);
	}
	@Override public void match(WScope.MatcherVoid matcher) {
		matcher.case_ConstructorDef(this);
	}

	@Override public <T> T match(ClassSlot.Matcher<T> matcher) {
		return matcher.case_ConstructorDef(this);
	}
	@Override public void match(ClassSlot.MatcherVoid matcher) {
		matcher.case_ConstructorDef(this);
	}

}
