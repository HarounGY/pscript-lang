//generated by parseq
package de.peeeq.wurstscript.ast;

class ClassDefImpl implements ClassDef, SortPosIntern {
	ClassDefImpl(WPos source, VisibilityModifier visibility, String name, Boolean unmanaged, ClassSlots slots) {
		if (source == null) throw new IllegalArgumentException();
		((SortPosIntern)source).setParent(this);
		this.source = source;
		if (visibility == null) throw new IllegalArgumentException();
		((SortPosIntern)visibility).setParent(this);
		this.visibility = visibility;
		if (name == null) throw new IllegalArgumentException();
		this.name = name;
		if (unmanaged == null) throw new IllegalArgumentException();
		this.unmanaged = unmanaged;
		if (slots == null) throw new IllegalArgumentException();
		((SortPosIntern)slots).setParent(this);
		this.slots = slots;
	}

	private SortPos parent;
	public SortPos getParent() { return parent; }
	public void setParent(SortPos parent) {
		if (parent != null && this.parent != null) { throw new Error("Parent already set."); }
		this.parent = parent;
	}

	private WPos source;
	public void setSource(WPos source) {
		if (source == null) throw new IllegalArgumentException();
		((SortPosIntern)this.source).setParent(null);
		((SortPosIntern)source).setParent(this);
		this.source = source;
	} 
	public WPos getSource() { return source; }

	private VisibilityModifier visibility;
	public void setVisibility(VisibilityModifier visibility) {
		if (visibility == null) throw new IllegalArgumentException();
		((SortPosIntern)this.visibility).setParent(null);
		((SortPosIntern)visibility).setParent(this);
		this.visibility = visibility;
	} 
	public VisibilityModifier getVisibility() { return visibility; }

	private String name;
	public void setName(String name) {
		if (name == null) throw new IllegalArgumentException();
		this.name = name;
	} 
	public String getName() { return name; }

	private Boolean unmanaged;
	public void setUnmanaged(Boolean unmanaged) {
		if (unmanaged == null) throw new IllegalArgumentException();
		this.unmanaged = unmanaged;
	} 
	public Boolean getUnmanaged() { return unmanaged; }

	private ClassSlots slots;
	public void setSlots(ClassSlots slots) {
		if (slots == null) throw new IllegalArgumentException();
		((SortPosIntern)this.slots).setParent(null);
		((SortPosIntern)slots).setParent(this);
		this.slots = slots;
	} 
	public ClassSlots getSlots() { return slots; }

	@Override public void accept(TypeDef.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		slots.accept(v);
		v.visit(this);
	}
	@Override public void accept(WEntity.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		slots.accept(v);
		v.visit(this);
	}
	@Override public void accept(WPackage.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		slots.accept(v);
		v.visit(this);
	}
	@Override public void accept(ClassDef.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		slots.accept(v);
		v.visit(this);
	}
	@Override public void accept(WEntities.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		slots.accept(v);
		v.visit(this);
	}
	@Override public void accept(WScope.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		slots.accept(v);
		v.visit(this);
	}
	@Override public void accept(TopLevelDeclaration.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		slots.accept(v);
		v.visit(this);
	}
	@Override public void accept(CompilationUnit.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		slots.accept(v);
		v.visit(this);
	}
	@Override public void accept(PackageOrGlobal.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		slots.accept(v);
		v.visit(this);
	}
	@Override public <T> T match(TypeDef.Matcher<T> matcher) {
		return matcher.case_ClassDef(this);
	}
	@Override public void match(TypeDef.MatcherVoid matcher) {
		matcher.case_ClassDef(this);
	}

	@Override public <T> T match(WEntity.Matcher<T> matcher) {
		return matcher.case_ClassDef(this);
	}
	@Override public void match(WEntity.MatcherVoid matcher) {
		matcher.case_ClassDef(this);
	}

	@Override public <T> T match(WScope.Matcher<T> matcher) {
		return matcher.case_ClassDef(this);
	}
	@Override public void match(WScope.MatcherVoid matcher) {
		matcher.case_ClassDef(this);
	}

}
