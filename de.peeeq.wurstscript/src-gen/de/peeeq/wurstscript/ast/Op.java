//generated by parseq
package de.peeeq.wurstscript.ast;

public interface Op extends AstElement{
	AstElement getParent();
	<T> T match(Matcher<T> s);
	void match(MatcherVoid s);
	public interface Matcher<T> {
		T case_OpPlus(OpPlus opPlus);
		T case_OpModReal(OpModReal opModReal);
		T case_OpUnequals(OpUnequals opUnequals);
		T case_OpGreater(OpGreater opGreater);
		T case_OpMinus(OpMinus opMinus);
		T case_OpMult(OpMult opMult);
		T case_OpDivInt(OpDivInt opDivInt);
		T case_OpLess(OpLess opLess);
		T case_OpNot(OpNot opNot);
		T case_OpGreaterEq(OpGreaterEq opGreaterEq);
		T case_OpOr(OpOr opOr);
		T case_OpAnd(OpAnd opAnd);
		T case_OpLessEq(OpLessEq opLessEq);
		T case_OpDivReal(OpDivReal opDivReal);
		T case_OpEquals(OpEquals opEquals);
		T case_OpModInt(OpModInt opModInt);
	}

	public interface MatcherVoid {
		void case_OpPlus(OpPlus opPlus);
		void case_OpModReal(OpModReal opModReal);
		void case_OpUnequals(OpUnequals opUnequals);
		void case_OpGreater(OpGreater opGreater);
		void case_OpMinus(OpMinus opMinus);
		void case_OpMult(OpMult opMult);
		void case_OpDivInt(OpDivInt opDivInt);
		void case_OpLess(OpLess opLess);
		void case_OpNot(OpNot opNot);
		void case_OpGreaterEq(OpGreaterEq opGreaterEq);
		void case_OpOr(OpOr opOr);
		void case_OpAnd(OpAnd opAnd);
		void case_OpLessEq(OpLessEq opLessEq);
		void case_OpDivReal(OpDivReal opDivReal);
		void case_OpEquals(OpEquals opEquals);
		void case_OpModInt(OpModInt opModInt);
	}

	Op copy();
	public abstract void accept(Op.Visitor v);
	public interface Visitor {
		void visit(OpPlus opPlus);
		void visit(OpModReal opModReal);
		void visit(OpUnequals opUnequals);
		void visit(OpGreater opGreater);
		void visit(OpMinus opMinus);
		void visit(OpMult opMult);
		void visit(OpDivInt opDivInt);
		void visit(OpLess opLess);
		void visit(OpNot opNot);
		void visit(OpGreaterEq opGreaterEq);
		void visit(OpLessEq opLessEq);
		void visit(OpAnd opAnd);
		void visit(OpDivReal opDivReal);
		void visit(OpOr opOr);
		void visit(OpEquals opEquals);
		void visit(OpModInt opModInt);
	}
	public static abstract class DefaultVisitor implements Visitor {
		@Override public void visit(OpPlus opPlus) {}
		@Override public void visit(OpModReal opModReal) {}
		@Override public void visit(OpUnequals opUnequals) {}
		@Override public void visit(OpGreater opGreater) {}
		@Override public void visit(OpMinus opMinus) {}
		@Override public void visit(OpMult opMult) {}
		@Override public void visit(OpDivInt opDivInt) {}
		@Override public void visit(OpLess opLess) {}
		@Override public void visit(OpNot opNot) {}
		@Override public void visit(OpGreaterEq opGreaterEq) {}
		@Override public void visit(OpLessEq opLessEq) {}
		@Override public void visit(OpAnd opAnd) {}
		@Override public void visit(OpDivReal opDivReal) {}
		@Override public void visit(OpOr opOr) {}
		@Override public void visit(OpEquals opEquals) {}
		@Override public void visit(OpModInt opModInt) {}
	}
}
