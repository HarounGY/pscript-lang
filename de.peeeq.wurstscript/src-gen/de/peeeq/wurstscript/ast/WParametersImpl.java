//generated by parseq
package de.peeeq.wurstscript.ast;

class WParametersImpl extends WParameters implements SortPosIntern {
 	private SortPos parent;
	public SortPos getParent() { return parent; }
	public void setParent(SortPos parent) {
		if (parent != null && this.parent != null) { throw new Error("Parent already set."); }
		this.parent = parent;
	}

	protected void other_setParentToThis(WParameter t) {
		((SortPosIntern) t).setParent(this);
	}
	protected void other_clearParent(WParameter t) {
		((SortPosIntern) t).setParent(null);
	}
	@Override public void accept(JassToplevelDeclaration.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(WParameters.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(ClassMember.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(FunctionDefinition.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(ClassSlot.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(TypeDef.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(WEntity.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(ConstructorDef.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(FuncDef.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(ClassSlots.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(FuncSignature.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(WPackage.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(ClassDef.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(NativeFunc.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(WEntities.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(WScope.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(TopLevelDeclaration.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(CompilationUnit.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
	@Override public void accept(PackageOrGlobal.Visitor v) {
		for (WParameter i : this ) {
			i.accept(v);
		}
		v.visit(this);
	}
}
