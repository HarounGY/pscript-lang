//generated by parseq
package de.peeeq.wurstscript.ast;

class GlobalVarDefImpl implements GlobalVarDef, SortPosIntern {
	GlobalVarDefImpl(WPos source, VisibilityModifier visibility, Boolean isConstant, OptTypeExpr typ, String name, OptExpr initialExpr) {
		if (source == null) throw new IllegalArgumentException();
		((SortPosIntern)source).setParent(this);
		this.source = source;
		if (visibility == null) throw new IllegalArgumentException();
		((SortPosIntern)visibility).setParent(this);
		this.visibility = visibility;
		if (isConstant == null) throw new IllegalArgumentException();
		this.isConstant = isConstant;
		if (typ == null) throw new IllegalArgumentException();
		((SortPosIntern)typ).setParent(this);
		this.typ = typ;
		if (name == null) throw new IllegalArgumentException();
		this.name = name;
		if (initialExpr == null) throw new IllegalArgumentException();
		((SortPosIntern)initialExpr).setParent(this);
		this.initialExpr = initialExpr;
	}

	private SortPos parent;
	public SortPos getParent() { return parent; }
	public void setParent(SortPos parent) {
		if (parent != null && this.parent != null) { 			throw new Error("Parent of " + this + " already set: " + this.parent + "\ntried to change to " + parent); 		}
		this.parent = parent;
	}

	private WPos source;
	public void setSource(WPos source) {
		if (source == null) throw new IllegalArgumentException();
		((SortPosIntern)this.source).setParent(null);
		((SortPosIntern)source).setParent(this);
		this.source = source;
	} 
	public WPos getSource() { return source; }

	private VisibilityModifier visibility;
	public void setVisibility(VisibilityModifier visibility) {
		if (visibility == null) throw new IllegalArgumentException();
		((SortPosIntern)this.visibility).setParent(null);
		((SortPosIntern)visibility).setParent(this);
		this.visibility = visibility;
	} 
	public VisibilityModifier getVisibility() { return visibility; }

	private Boolean isConstant;
	public void setIsConstant(Boolean isConstant) {
		if (isConstant == null) throw new IllegalArgumentException();
		this.isConstant = isConstant;
	} 
	public Boolean getIsConstant() { return isConstant; }

	private OptTypeExpr typ;
	public void setTyp(OptTypeExpr typ) {
		if (typ == null) throw new IllegalArgumentException();
		((SortPosIntern)this.typ).setParent(null);
		((SortPosIntern)typ).setParent(this);
		this.typ = typ;
	} 
	public OptTypeExpr getTyp() { return typ; }

	private String name;
	public void setName(String name) {
		if (name == null) throw new IllegalArgumentException();
		this.name = name;
	} 
	public String getName() { return name; }

	private OptExpr initialExpr;
	public void setInitialExpr(OptExpr initialExpr) {
		if (initialExpr == null) throw new IllegalArgumentException();
		((SortPosIntern)this.initialExpr).setParent(null);
		((SortPosIntern)initialExpr).setParent(this);
		this.initialExpr = initialExpr;
	} 
	public OptExpr getInitialExpr() { return initialExpr; }

	public SortPos get(int i) {
		switch (i) {
			case 0: return source;
			case 1: return visibility;
			case 2: return typ;
			case 3: return initialExpr;
			default: throw new IllegalArgumentException("Index out of range: " + i);
		}
	}
	public int size() {
		return 4;
	}
	public GlobalVarDef copy() {
		return new GlobalVarDefImpl(source.copy(), visibility.copy(), isConstant, typ.copy(), name, initialExpr.copy());
	}
	@Override public void accept(WEntities.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		typ.accept(v);
		initialExpr.accept(v);
		v.visit(this);
	}
	@Override public void accept(WPackage.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		typ.accept(v);
		initialExpr.accept(v);
		v.visit(this);
	}
	@Override public void accept(ClassMember.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		typ.accept(v);
		initialExpr.accept(v);
		v.visit(this);
	}
	@Override public void accept(CompilationUnit.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		typ.accept(v);
		initialExpr.accept(v);
		v.visit(this);
	}
	@Override public void accept(GlobalVarDef.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		typ.accept(v);
		initialExpr.accept(v);
		v.visit(this);
	}
	@Override public void accept(ClassDef.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		typ.accept(v);
		initialExpr.accept(v);
		v.visit(this);
	}
	@Override public void accept(WScope.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		typ.accept(v);
		initialExpr.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassGlobalBlock.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		typ.accept(v);
		initialExpr.accept(v);
		v.visit(this);
	}
	@Override public void accept(TopLevelDeclaration.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		typ.accept(v);
		initialExpr.accept(v);
		v.visit(this);
	}
	@Override public void accept(WEntity.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		typ.accept(v);
		initialExpr.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassToplevelDeclaration.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		typ.accept(v);
		initialExpr.accept(v);
		v.visit(this);
	}
	@Override public void accept(TypeDef.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		typ.accept(v);
		initialExpr.accept(v);
		v.visit(this);
	}
	@Override public void accept(VarDef.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		typ.accept(v);
		initialExpr.accept(v);
		v.visit(this);
	}
	@Override public void accept(ClassSlots.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		typ.accept(v);
		initialExpr.accept(v);
		v.visit(this);
	}
	@Override public void accept(ClassSlot.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		typ.accept(v);
		initialExpr.accept(v);
		v.visit(this);
	}
	@Override public void accept(PackageOrGlobal.Visitor v) {
		source.accept(v);
		visibility.accept(v);
		typ.accept(v);
		initialExpr.accept(v);
		v.visit(this);
	}
	@Override public <T> T match(WEntity.Matcher<T> matcher) {
		return matcher.case_GlobalVarDef(this);
	}
	@Override public void match(WEntity.MatcherVoid matcher) {
		matcher.case_GlobalVarDef(this);
	}

	@Override public <T> T match(VarDef.Matcher<T> matcher) {
		return matcher.case_GlobalVarDef(this);
	}
	@Override public void match(VarDef.MatcherVoid matcher) {
		matcher.case_GlobalVarDef(this);
	}

	@Override public <T> T match(ClassMember.Matcher<T> matcher) {
		return matcher.case_GlobalVarDef(this);
	}
	@Override public void match(ClassMember.MatcherVoid matcher) {
		matcher.case_GlobalVarDef(this);
	}

	@Override public <T> T match(ClassSlot.Matcher<T> matcher) {
		return matcher.case_GlobalVarDef(this);
	}
	@Override public void match(ClassSlot.MatcherVoid matcher) {
		matcher.case_GlobalVarDef(this);
	}

}
