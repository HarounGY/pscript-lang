
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 30 14:40:29 CEST 2011
//----------------------------------------------------

package de.peeeq.wurstscript.parser;

import java_cup.runtime.*;
import de.peeeq.wurstscript.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 30 14:40:29 CEST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\234\000\002\002\004\000\002\040\004\000\002\040" +
    "\002\000\002\012\005\000\002\012\003\000\002\055\003" +
    "\000\002\055\003\000\002\064\011\000\002\063\005\000" +
    "\002\063\003\000\002\032\005\000\002\061\005\000\002" +
    "\061\003\000\002\013\007\000\002\013\005\000\002\013" +
    "\003\000\002\013\003\000\002\013\010\000\002\013\005" +
    "\000\002\013\003\000\002\005\011\000\002\007\004\000" +
    "\002\007\002\000\002\010\013\000\002\010\010\000\002" +
    "\010\003\000\002\010\003\000\002\025\010\000\002\026" +
    "\010\000\002\026\006\000\002\066\004\000\002\066\002" +
    "\000\002\067\005\000\002\067\002\000\002\065\004\000" +
    "\002\054\003\000\002\054\005\000\002\004\006\000\002" +
    "\004\002\000\002\056\007\000\002\056\010\000\002\056" +
    "\007\000\002\056\005\000\002\073\005\000\002\073\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\004\000\002\047\005\000\002\045\011\000\002\045\012" +
    "\000\002\072\003\000\002\072\006\000\002\051\011\000" +
    "\002\033\007\000\002\033\010\000\002\033\007\000\002" +
    "\033\005\000\002\050\006\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\057\003" +
    "\000\002\060\004\000\002\042\004\000\002\042\004\000" +
    "\002\042\004\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\021\005\000\002\035\006" +
    "\000\002\020\010\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\005\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\004\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\024\007" +
    "\000\002\031\006\000\002\031\005\000\002\002\004\000" +
    "\002\002\002\000\002\003\005\000\002\003\002\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\022\004\000\002\022" +
    "\004\000\002\023\006\000\002\107\003\000\002\107\003" +
    "\000\002\107\003\000\002\107\003\000\002\053\007\000" +
    "\002\074\007\000\002\076\005\000\002\076\003\000\002" +
    "\077\010\000\002\077\007\000\002\077\005\000\002\106" +
    "\005\000\002\106\006\000\002\075\011\000\002\027\007" +
    "\000\002\027\007\000\002\070\003\000\002\070\004\000" +
    "\002\100\005\000\002\100\003\000\002\102\010\000\002" +
    "\102\006\000\002\101\005\000\002\101\003\000\002\103" +
    "\003\000\002\103\007\000\002\103\005\000\002\103\004" +
    "\000\002\103\005\000\002\103\007\000\002\103\004\000" +
    "\002\104\010\000\002\105\010\000\002\105\007\000\002" +
    "\105\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0171\000\022\002\uffff\044\005\046\uffff\050\uffff\057" +
    "\uffff\076\uffff\077\uffff\101\uffff\001\002\000\004\002\u0173" +
    "\001\002\000\124\002\uffff\003\uffff\004\uffff\005\uffff\006" +
    "\uffff\007\uffff\010\uffff\011\uffff\023\uffff\025\uffff\035\uffff" +
    "\042\uffff\044\005\046\uffff\050\uffff\051\uffff\054\uffff\055" +
    "\uffff\056\uffff\057\uffff\063\uffff\064\uffff\065\uffff\066\uffff" +
    "\067\uffff\070\uffff\071\uffff\073\uffff\076\uffff\077\uffff\100" +
    "\uffff\101\uffff\102\uffff\105\uffff\106\uffff\107\uffff\110\uffff" +
    "\111\uffff\112\uffff\114\uffff\115\uffff\001\002\000\020\002" +
    "\ufffd\046\011\050\021\057\015\076\016\077\022\101\007" +
    "\001\002\000\004\057\u016f\001\002\000\022\002\uff88\044" +
    "\uff88\046\uff88\050\uff88\057\uff88\076\uff88\077\uff88\101\uff88" +
    "\001\002\000\004\005\325\001\002\000\022\002\ufffb\044" +
    "\ufffb\046\ufffb\050\ufffb\057\ufffb\076\ufffb\077\ufffb\101\ufffb" +
    "\001\002\000\022\002\uff86\044\uff86\046\uff86\050\uff86\057" +
    "\uff86\076\uff86\077\uff86\101\uff86\001\002\000\022\002\uff87" +
    "\044\uff87\046\uff87\050\uff87\057\uff87\076\uff87\077\uff87\101" +
    "\uff87\001\002\000\004\005\176\001\002\000\004\005\317" +
    "\001\002\000\022\002\uffff\044\005\046\uffff\050\uffff\057" +
    "\uffff\076\uffff\077\uffff\101\uffff\001\002\000\022\002\uff85" +
    "\044\uff85\046\uff85\050\uff85\057\uff85\076\uff85\077\uff85\101" +
    "\uff85\001\002\000\004\005\176\001\002\000\004\044\024" +
    "\001\002\000\022\002\ufffc\044\ufffc\046\ufffc\050\ufffc\057" +
    "\ufffc\076\ufffc\077\ufffc\101\ufffc\001\002\000\012\005\uffff" +
    "\044\005\100\uffff\101\uffff\001\002\000\004\100\173\001" +
    "\002\000\010\005\031\100\uff81\101\030\001\002\000\012" +
    "\005\uffff\044\005\100\uffff\101\uffff\001\002\000\004\005" +
    "\031\001\002\000\012\005\uffde\041\uffde\044\uffde\062\157" +
    "\001\002\000\004\005\033\001\002\000\006\020\034\044" +
    "\035\001\002\000\034\004\061\005\043\006\053\007\044" +
    "\010\047\011\057\023\041\025\060\035\064\050\046\070" +
    "\062\071\063\073\052\001\002\000\012\005\uff7e\044\uff7e" +
    "\100\uff7e\101\uff7e\001\002\000\056\012\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\021\uffb5\022\uffb5\024\uffb5" +
    "\025\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\036\uffb5\040\uffb5\041\uffb5\043\uffb5\044\uffb5\113\uffb5" +
    "\001\002\000\056\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\021\uffb3\022\uffb3\024\uffb3\025\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\036\uffb3\040" +
    "\uffb3\041\uffb3\043\uffb3\044\uffb3\113\uffb3\001\002\000\056" +
    "\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\021" +
    "\uffa2\022\uffa2\024\uffa2\025\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\036\uffa2\040\uffa2\041\uffa2\043" +
    "\uffa2\044\uffa2\113\uffa2\001\002\000\034\004\061\005\043" +
    "\006\053\007\044\010\047\011\057\023\041\025\060\035" +
    "\064\050\046\070\062\071\063\073\052\001\002\000\056" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\021" +
    "\uffb4\022\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\036\uffb4\040\uffb4\041\uffb4\043" +
    "\uffb4\044\uffb4\113\uffb4\001\002\000\064\012\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\024\uffbb\025\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\033\uffbb\034\uffbb\035\150\036\uffbb\037\146\040\uffbb\041" +
    "\uffbb\043\uffbb\044\uffbb\113\uffbb\001\002\000\056\012\uffa4" +
    "\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\021\uffa4\022" +
    "\uffa4\024\uffa4\025\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\036\uffa4\040\uffa4\041\uffa4\043\uffa4\044" +
    "\uffa4\113\uffa4\001\002\000\056\012\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\021\uffb0\022\uffb0\024\uffb0\025" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\036\uffb0\040\uffb0\041\uffb0\043\uffb0\044\uffb0\113\uffb0\001" +
    "\002\000\004\005\145\001\002\000\056\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\017\uffa8\021\uffa8\022\uffa8\024" +
    "\uffa8\025\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\036\uffa8\040\uffa8\041\uffa8\043\uffa8\044\uffa8\113" +
    "\uffa8\001\002\000\056\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\021\uffb2\022\uffb2\024\uffb2\025\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\036\uffb2" +
    "\040\uffb2\041\uffb2\043\uffb2\044\uffb2\113\uffb2\001\002\000" +
    "\044\012\070\013\073\014\105\015\076\016\101\017\104" +
    "\021\067\022\106\024\100\025\066\027\075\030\071\031" +
    "\072\032\077\033\074\034\102\044\144\001\002\000\056" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\021" +
    "\uffa6\022\uffa6\024\uffa6\025\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\036\uffa6\040\uffa6\041\uffa6\043" +
    "\uffa6\044\uffa6\113\uffa6\001\002\000\056\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\016\uffaa\017\uffaa\021\uffaa\022\uffaa\024" +
    "\uffaa\025\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\036\uffaa\040\uffaa\041\uffaa\043\uffaa\044\uffaa\113" +
    "\uffaa\001\002\000\056\012\uffb6\013\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\021\uffb6\022\uffb6\024\uffb6\025\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6" +
    "\040\uffb6\041\uffb6\043\uffb6\044\uffb6\113\uffb6\001\002\000" +
    "\056\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\021\uffa3\022\uffa3\024\uffa3\025\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\036\uffa3\040\uffa3\041\uffa3" +
    "\043\uffa3\044\uffa3\113\uffa3\001\002\000\056\012\uffb1\013" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\021\uffb1\022\uffb1" +
    "\024\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033" +
    "\uffb1\034\uffb1\036\uffb1\040\uffb1\041\uffb1\043\uffb1\044\uffb1" +
    "\113\uffb1\001\002\000\056\012\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\021\uffa7\022\uffa7\024\uffa7\025\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\036" +
    "\uffa7\040\uffa7\041\uffa7\043\uffa7\044\uffa7\113\uffa7\001\002" +
    "\000\034\004\061\005\043\006\053\007\044\010\047\011" +
    "\057\023\041\025\060\035\064\050\046\070\062\071\063" +
    "\073\052\001\002\000\056\012\uffac\013\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\021\uffac\022\uffac\024\uffac\025\uffac" +
    "\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\036" +
    "\uffac\040\uffac\041\uffac\043\uffac\044\uffac\113\uffac\001\002" +
    "\000\004\005\137\001\002\000\056\012\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\021\uffab\022\uffab\024\uffab" +
    "\025\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034" +
    "\uffab\036\uffab\040\uffab\041\uffab\043\uffab\044\uffab\113\uffab" +
    "\001\002\000\034\004\061\005\043\006\053\007\044\010" +
    "\047\011\057\023\041\025\060\035\064\050\046\070\062" +
    "\071\063\073\052\001\002\000\044\012\070\013\073\014" +
    "\105\015\076\016\101\017\104\021\067\022\106\024\100" +
    "\025\066\027\075\030\071\031\072\032\077\033\074\034" +
    "\102\036\103\001\002\000\034\004\061\005\043\006\053" +
    "\007\044\010\047\011\057\023\041\025\060\035\064\050" +
    "\046\070\062\071\063\073\052\001\002\000\034\004\061" +
    "\005\043\006\053\007\044\010\047\011\057\023\041\025" +
    "\060\035\064\050\046\070\062\071\063\073\052\001\002" +
    "\000\034\004\061\005\043\006\053\007\044\010\047\011" +
    "\057\023\041\025\060\035\064\050\046\070\062\071\063" +
    "\073\052\001\002\000\034\004\061\005\043\006\053\007" +
    "\044\010\047\011\057\023\041\025\060\035\064\050\046" +
    "\070\062\071\063\073\052\001\002\000\034\004\061\005" +
    "\043\006\053\007\044\010\047\011\057\023\041\025\060" +
    "\035\064\050\046\070\062\071\063\073\052\001\002\000" +
    "\034\004\061\005\043\006\053\007\044\010\047\011\057" +
    "\023\041\025\060\035\064\050\046\070\062\071\063\073" +
    "\052\001\002\000\034\004\061\005\043\006\053\007\044" +
    "\010\047\011\057\023\041\025\060\035\064\050\046\070" +
    "\062\071\063\073\052\001\002\000\034\004\061\005\043" +
    "\006\053\007\044\010\047\011\057\023\041\025\060\035" +
    "\064\050\046\070\062\071\063\073\052\001\002\000\034" +
    "\004\061\005\043\006\053\007\044\010\047\011\057\023" +
    "\041\025\060\035\064\050\046\070\062\071\063\073\052" +
    "\001\002\000\034\004\061\005\043\006\053\007\044\010" +
    "\047\011\057\023\041\025\060\035\064\050\046\070\062" +
    "\071\063\073\052\001\002\000\034\004\061\005\043\006" +
    "\053\007\044\010\047\011\057\023\041\025\060\035\064" +
    "\050\046\070\062\071\063\073\052\001\002\000\034\004" +
    "\061\005\043\006\053\007\044\010\047\011\057\023\041" +
    "\025\060\035\064\050\046\070\062\071\063\073\052\001" +
    "\002\000\004\005\112\001\002\000\056\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\021\uffa9\022\uffa9\024" +
    "\uffa9\025\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9" +
    "\034\uffa9\036\uffa9\040\uffa9\041\uffa9\043\uffa9\044\uffa9\113" +
    "\uffa9\001\002\000\034\004\061\005\043\006\053\007\044" +
    "\010\047\011\057\023\041\025\060\035\064\050\046\070" +
    "\062\071\063\073\052\001\002\000\034\004\061\005\043" +
    "\006\053\007\044\010\047\011\057\023\041\025\060\035" +
    "\064\050\046\070\062\071\063\073\052\001\002\000\034" +
    "\004\061\005\043\006\053\007\044\010\047\011\057\023" +
    "\041\025\060\035\064\050\046\070\062\071\063\073\052" +
    "\001\002\000\056\012\070\013\073\014\105\015\076\016" +
    "\101\017\104\021\067\022\uff9a\024\100\025\066\027\075" +
    "\030\071\031\072\032\077\033\074\034\102\036\uff9a\040" +
    "\uff9a\041\uff9a\043\uff9a\044\uff9a\113\uff9a\001\002\000\042" +
    "\021\uff8f\022\uff8f\024\100\025\066\027\075\030\071\031" +
    "\072\032\077\033\074\034\102\036\uff8f\040\uff8f\041\uff8f" +
    "\043\uff8f\044\uff8f\113\uff8f\001\002\000\042\021\uff8e\022" +
    "\uff8e\024\100\025\066\027\075\030\071\031\072\032\077" +
    "\033\074\034\102\036\uff8e\040\uff8e\041\uff8e\043\uff8e\044" +
    "\uff8e\113\uff8e\001\002\000\060\012\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf\024\uffaf\025" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\035\113\036\uffaf\040\uffaf\041\uffaf\043\uffaf\044\uffaf\113" +
    "\uffaf\001\002\000\036\004\061\005\043\006\053\007\044" +
    "\010\047\011\057\023\041\025\060\035\064\036\uff9d\050" +
    "\046\070\062\071\063\073\052\001\002\000\046\012\070" +
    "\013\073\014\105\015\076\016\101\017\104\021\067\022" +
    "\106\024\100\025\066\027\075\030\071\031\072\032\077" +
    "\033\074\034\102\036\uff9b\043\120\001\002\000\004\036" +
    "\116\001\002\000\056\012\uffad\013\uffad\014\uffad\015\uffad" +
    "\016\uffad\017\uffad\021\uffad\022\uffad\024\uffad\025\uffad\027" +
    "\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\036\uffad" +
    "\040\uffad\041\uffad\043\uffad\044\uffad\113\uffad\001\002\000" +
    "\004\036\uff9e\001\002\000\034\004\061\005\043\006\053" +
    "\007\044\010\047\011\057\023\041\025\060\035\064\050" +
    "\046\070\062\071\063\073\052\001\002\000\046\012\070" +
    "\013\073\014\105\015\076\016\101\017\104\021\067\022" +
    "\106\024\100\025\066\027\075\030\071\031\072\032\077" +
    "\033\074\034\102\036\uff9b\043\120\001\002\000\004\036" +
    "\uff9c\001\002\000\042\021\uff8d\022\uff8d\024\100\025\066" +
    "\027\075\030\071\031\072\032\077\033\074\034\102\036" +
    "\uff8d\040\uff8d\041\uff8d\043\uff8d\044\uff8d\113\uff8d\001\002" +
    "\000\056\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017" +
    "\uff98\021\uff98\022\uff98\024\uff98\025\uff98\027\075\030\071" +
    "\031\072\032\077\033\074\034\102\036\uff98\040\uff98\041" +
    "\uff98\043\uff98\044\uff98\113\uff98\001\002\000\056\012\uff93" +
    "\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\021\uff93\022" +
    "\uff93\024\uff93\025\uff93\027\uff93\030\uff93\031\uff93\032\uff93" +
    "\033\uff93\034\102\036\uff93\040\uff93\041\uff93\043\uff93\044" +
    "\uff93\113\uff93\001\002\000\042\021\uff8c\022\uff8c\024\100" +
    "\025\066\027\075\030\071\031\072\032\077\033\074\034" +
    "\102\036\uff8c\040\uff8c\041\uff8c\043\uff8c\044\uff8c\113\uff8c" +
    "\001\002\000\056\012\uff96\013\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\021\uff96\022\uff96\024\uff96\025\uff96\027\uff96" +
    "\030\uff96\031\uff96\032\uff96\033\uff96\034\102\036\uff96\040" +
    "\uff96\041\uff96\043\uff96\044\uff96\113\uff96\001\002\000\056" +
    "\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\021" +
    "\uff92\022\uff92\024\uff92\025\uff92\027\uff92\030\uff92\031\uff92" +
    "\032\uff92\033\uff92\034\102\036\uff92\040\uff92\041\uff92\043" +
    "\uff92\044\uff92\113\uff92\001\002\000\042\021\uff90\022\uff90" +
    "\024\100\025\066\027\075\030\071\031\072\032\077\033" +
    "\074\034\102\036\uff90\040\uff90\041\uff90\043\uff90\044\uff90" +
    "\113\uff90\001\002\000\056\012\uff94\013\uff94\014\uff94\015" +
    "\uff94\016\uff94\017\uff94\021\uff94\022\uff94\024\uff94\025\uff94" +
    "\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034\102\036" +
    "\uff94\040\uff94\041\uff94\043\uff94\044\uff94\113\uff94\001\002" +
    "\000\056\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017" +
    "\uff95\021\uff95\022\uff95\024\uff95\025\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\034\102\036\uff95\040\uff95\041" +
    "\uff95\043\uff95\044\uff95\113\uff95\001\002\000\042\021\uff91" +
    "\022\uff91\024\100\025\066\027\075\030\071\031\072\032" +
    "\077\033\074\034\102\036\uff91\040\uff91\041\uff91\043\uff91" +
    "\044\uff91\113\uff91\001\002\000\056\012\070\013\073\014" +
    "\105\015\076\016\101\017\104\021\uff99\022\uff99\024\100" +
    "\025\066\027\075\030\071\031\072\032\077\033\074\034" +
    "\102\036\uff99\040\uff99\041\uff99\043\uff99\044\uff99\113\uff99" +
    "\001\002\000\056\012\uff97\013\uff97\014\uff97\015\uff97\016" +
    "\uff97\017\uff97\021\uff97\022\uff97\024\uff97\025\uff97\027\075" +
    "\030\071\031\072\032\077\033\074\034\102\036\uff97\040" +
    "\uff97\041\uff97\043\uff97\044\uff97\113\uff97\001\002\000\004" +
    "\035\140\001\002\000\036\004\061\005\043\006\053\007" +
    "\044\010\047\011\057\023\041\025\060\035\064\036\uff9d" +
    "\050\046\070\062\071\063\073\052\001\002\000\004\036" +
    "\142\001\002\000\056\012\uffa1\013\uffa1\014\uffa1\015\uffa1" +
    "\016\uffa1\017\uffa1\021\uffa1\022\uffa1\024\uffa1\025\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\036\uffa1" +
    "\040\uffa1\041\uffa1\043\uffa1\044\uffa1\113\uffa1\001\002\000" +
    "\056\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a" +
    "\021\uff8a\022\uff8a\024\uff8a\025\uff8a\027\075\030\071\031" +
    "\072\032\077\033\074\034\102\036\uff8a\040\uff8a\041\uff8a" +
    "\043\uff8a\044\uff8a\113\uff8a\001\002\000\012\005\uff7f\044" +
    "\uff7f\100\uff7f\101\uff7f\001\002\000\056\012\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\016\uffa5\017\uffa5\021\uffa5\022\uffa5\024" +
    "\uffa5\025\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\036\uffa5\040\uffa5\041\uffa5\043\uffa5\044\uffa5\113" +
    "\uffa5\001\002\000\034\004\061\005\043\006\053\007\044" +
    "\010\047\011\057\023\041\025\060\035\064\050\046\070" +
    "\062\071\063\073\052\001\002\000\060\012\uffba\013\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\024\uffba\025\uffba\027\uffba\030\uffba\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\036\uffba\040\uffba\041\uffba\043\uffba\044" +
    "\uffba\113\uffba\001\002\000\036\004\061\005\043\006\053" +
    "\007\044\010\047\011\057\023\041\025\060\035\064\036" +
    "\uff9d\050\046\070\062\071\063\073\052\001\002\000\004" +
    "\036\152\001\002\000\104\012\uff89\013\uff89\014\uff89\015" +
    "\uff89\016\uff89\017\uff89\021\uff89\022\uff89\024\uff89\025\uff89" +
    "\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\036" +
    "\uff89\040\uff89\041\uff89\043\uff89\044\uff89\063\uff89\064\uff89" +
    "\066\uff89\102\uff89\106\uff89\107\uff89\110\uff89\111\uff89\112" +
    "\uff89\113\uff89\114\uff89\115\uff89\001\002\000\044\012\070" +
    "\013\073\014\105\015\076\016\101\017\104\021\067\022" +
    "\106\024\100\025\066\027\075\030\071\031\072\032\077" +
    "\033\074\034\102\040\154\001\002\000\062\012\uff9f\013" +
    "\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f" +
    "\022\uff9f\024\uff9f\025\uff9f\027\uff9f\030\uff9f\031\uff9f\032" +
    "\uff9f\033\uff9f\034\uff9f\036\uff9f\037\146\040\uff9f\041\uff9f" +
    "\043\uff9f\044\uff9f\113\uff9f\001\002\000\060\012\uffa0\013" +
    "\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\024\uffa0\025\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\036\uffa0\040\uffa0\041\uffa0\043\uffa0" +
    "\044\uffa0\113\uffa0\001\002\000\056\012\070\013\073\014" +
    "\105\015\076\016\101\017\104\021\uff8b\022\uff8b\024\100" +
    "\025\066\027\075\030\071\031\072\032\077\033\074\034" +
    "\102\036\uff8b\040\uff8b\041\uff8b\043\uff8b\044\uff8b\113\uff8b" +
    "\001\002\000\012\005\uffdb\037\160\041\uffdb\044\uffdb\001" +
    "\002\000\034\004\061\005\043\006\053\007\044\010\047" +
    "\011\057\023\041\025\060\035\064\050\046\070\062\071" +
    "\063\073\052\001\002\000\010\005\uffdd\041\uffdd\044\uffdd" +
    "\001\002\000\044\012\070\013\073\014\105\015\076\016" +
    "\101\017\104\021\067\022\106\024\100\025\066\027\075" +
    "\030\071\031\072\032\077\033\074\034\102\040\163\001" +
    "\002\000\012\005\uffdb\037\160\041\uffdb\044\uffdb\001\002" +
    "\000\010\005\uffdc\041\uffdc\044\uffdc\001\002\000\004\005" +
    "\166\001\002\000\004\020\167\001\002\000\034\004\061" +
    "\005\043\006\053\007\044\010\047\011\057\023\041\025" +
    "\060\035\064\050\046\070\062\071\063\073\052\001\002" +
    "\000\044\012\070\013\073\014\105\015\076\016\101\017" +
    "\104\021\067\022\106\024\100\025\066\027\075\030\071" +
    "\031\072\032\077\033\074\034\102\044\171\001\002\000" +
    "\012\005\uff80\044\uff80\100\uff80\101\uff80\001\002\000\004" +
    "\100\uff82\001\002\000\004\044\174\001\002\000\022\002" +
    "\uff83\044\uff83\046\uff83\050\uff83\057\uff83\076\uff83\077\uff83" +
    "\101\uff83\001\002\000\004\044\214\001\002\000\004\103" +
    "\177\001\002\000\006\005\031\104\201\001\002\000\004" +
    "\047\211\001\002\000\004\047\uff78\001\002\000\004\005" +
    "\210\001\002\000\006\043\204\047\uffe0\001\002\000\004" +
    "\005\031\001\002\000\004\047\uff77\001\002\000\010\036" +
    "\uffe0\043\204\047\uffe0\001\002\000\006\036\uffe1\047\uffe1" +
    "\001\002\000\010\036\uffdf\043\uffdf\047\uffdf\001\002\000" +
    "\006\005\031\104\212\001\002\000\004\044\uff79\001\002" +
    "\000\004\044\uff7a\001\002\000\024\044\005\063\uffff\066" +
    "\uffff\102\uffff\105\uffff\106\uffff\110\uffff\111\uffff\112\uffff" +
    "\001\002\000\022\044\005\063\uffff\066\uffff\102\uffff\106" +
    "\uffff\110\uffff\111\uffff\112\uffff\001\002\000\024\044\uff75" +
    "\063\uff75\066\uff75\102\uff75\105\220\106\uff75\110\uff75\111" +
    "\uff75\112\uff75\001\002\000\024\044\005\063\uffff\066\uffff" +
    "\102\uffff\105\uffff\106\uffff\110\uffff\111\uffff\112\uffff\001" +
    "\002\000\004\005\031\001\002\000\004\005\222\001\002" +
    "\000\006\020\223\044\224\001\002\000\034\004\061\005" +
    "\043\006\053\007\044\010\047\011\057\023\041\025\060" +
    "\035\064\050\046\070\062\071\063\073\052\001\002\000" +
    "\024\044\uff73\063\uff73\066\uff73\102\uff73\105\uff73\106\uff73" +
    "\110\uff73\111\uff73\112\uff73\001\002\000\044\012\070\013" +
    "\073\014\105\015\076\016\101\017\104\021\067\022\106" +
    "\024\100\025\066\027\075\030\071\031\072\032\077\033" +
    "\074\034\102\044\226\001\002\000\024\044\uff74\063\uff74" +
    "\066\uff74\102\uff74\105\uff74\106\uff74\110\uff74\111\uff74\112" +
    "\uff74\001\002\000\022\044\uff76\063\uff76\066\uff76\102\uff76" +
    "\106\uff76\110\uff76\111\uff76\112\uff76\001\002\000\030\063" +
    "\242\064\uff71\066\236\102\uff71\106\237\107\uff71\110\234" +
    "\111\240\112\243\114\uff71\115\uff71\001\002\000\004\102" +
    "\232\001\002\000\004\044\233\001\002\000\022\002\uff7b" +
    "\044\uff7b\046\uff7b\050\uff7b\057\uff7b\076\uff7b\077\uff7b\101" +
    "\uff7b\001\002\000\034\004\061\005\043\006\053\007\044" +
    "\010\047\011\057\023\041\025\060\035\064\050\046\070" +
    "\062\071\063\073\052\001\002\000\032\044\005\063\uffff" +
    "\064\uffff\066\uffff\102\uffff\106\uffff\107\uffff\110\uffff\111" +
    "\uffff\112\uffff\114\uffff\115\uffff\001\002\000\036\004\061" +
    "\005\043\006\053\007\044\010\047\011\057\023\041\025" +
    "\060\035\064\044\311\050\046\070\062\071\063\073\052" +
    "\001\002\000\004\044\304\001\002\000\034\004\061\005" +
    "\043\006\053\007\044\010\047\011\057\023\041\025\060" +
    "\035\064\050\046\070\062\071\063\073\052\001\002\000" +
    "\032\044\uff70\063\uff70\064\uff70\066\uff70\102\uff70\106\uff70" +
    "\107\uff70\110\uff70\111\uff70\112\uff70\114\uff70\115\uff70\001" +
    "\002\000\034\004\061\005\043\006\053\007\044\010\047" +
    "\011\057\023\041\025\060\035\064\050\046\070\062\071" +
    "\063\073\052\001\002\000\004\005\245\001\002\000\032" +
    "\044\uff6a\063\uff6a\064\uff6a\066\uff6a\102\uff6a\106\uff6a\107" +
    "\uff6a\110\uff6a\111\uff6a\112\uff6a\114\uff6a\115\uff6a\001\002" +
    "\000\004\035\150\001\002\000\044\012\070\013\073\014" +
    "\105\015\076\016\101\017\104\021\067\022\106\024\100" +
    "\025\066\027\075\030\071\031\072\032\077\033\074\034" +
    "\102\113\247\001\002\000\004\044\250\001\002\000\026" +
    "\044\005\063\uffff\064\uffff\066\uffff\106\uffff\110\uffff\111" +
    "\uffff\112\uffff\114\uffff\115\uffff\001\002\000\010\064\252" +
    "\114\253\115\255\001\002\000\004\044\264\001\002\000" +
    "\034\004\061\005\043\006\053\007\044\010\047\011\057" +
    "\023\041\025\060\035\064\050\046\070\062\071\063\073" +
    "\052\001\002\000\032\044\uff69\063\uff69\064\uff69\066\uff69" +
    "\102\uff69\106\uff69\107\uff69\110\uff69\111\uff69\112\uff69\114" +
    "\uff69\115\uff69\001\002\000\004\044\256\001\002\000\032" +
    "\044\uff66\063\uff66\064\uff66\066\uff66\102\uff66\106\uff66\107" +
    "\uff66\110\uff66\111\uff66\112\uff66\114\uff66\115\uff66\001\002" +
    "\000\044\012\070\013\073\014\105\015\076\016\101\017" +
    "\104\021\067\022\106\024\100\025\066\027\075\030\071" +
    "\031\072\032\077\033\074\034\102\113\260\001\002\000" +
    "\004\044\261\001\002\000\026\044\005\063\uffff\064\uffff" +
    "\066\uffff\106\uffff\110\uffff\111\uffff\112\uffff\114\uffff\115" +
    "\uffff\001\002\000\010\064\252\114\253\115\255\001\002" +
    "\000\032\044\uff68\063\uff68\064\uff68\066\uff68\102\uff68\106" +
    "\uff68\107\uff68\110\uff68\111\uff68\112\uff68\114\uff68\115\uff68" +
    "\001\002\000\022\044\005\063\uffff\066\uffff\106\uffff\110" +
    "\uffff\111\uffff\112\uffff\115\uffff\001\002\000\004\115\266" +
    "\001\002\000\004\044\267\001\002\000\032\044\uff67\063" +
    "\uff67\064\uff67\066\uff67\102\uff67\106\uff67\107\uff67\110\uff67" +
    "\111\uff67\112\uff67\114\uff67\115\uff67\001\002\000\004\020" +
    "\uffbe\001\002\000\044\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffbc\021\uffa2\022\uffa2\024\uffa2\025" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\001\002\000\044\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffbf\021\uffb4\022\uffb4\024\uffb4\025\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\001" +
    "\002\000\004\020\301\001\002\000\042\012\070\013\073" +
    "\014\105\015\076\016\101\017\104\021\067\022\106\024" +
    "\100\025\066\027\075\030\071\031\072\032\077\033\074" +
    "\034\276\001\002\000\044\012\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffbd\021\uffa3\022\uffa3\024\uffa3" +
    "\025\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034" +
    "\uffa3\001\002\000\004\005\277\001\002\000\050\012\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\024\uffaf\025\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\113\037\146\001\002\000" +
    "\004\020\uffae\001\002\000\034\004\061\005\043\006\053" +
    "\007\044\010\047\011\057\023\041\025\060\035\064\050" +
    "\046\070\062\071\063\073\052\001\002\000\044\012\070" +
    "\013\073\014\105\015\076\016\101\017\104\021\067\022" +
    "\106\024\100\025\066\027\075\030\071\031\072\032\077" +
    "\033\074\034\102\044\303\001\002\000\032\044\uff6b\063" +
    "\uff6b\064\uff6b\066\uff6b\102\uff6b\106\uff6b\107\uff6b\110\uff6b" +
    "\111\uff6b\112\uff6b\114\uff6b\115\uff6b\001\002\000\022\044" +
    "\005\063\uffff\066\uffff\106\uffff\107\uffff\110\uffff\111\uffff" +
    "\112\uffff\001\002\000\004\107\306\001\002\000\004\044" +
    "\307\001\002\000\032\044\uff6f\063\uff6f\064\uff6f\066\uff6f" +
    "\102\uff6f\106\uff6f\107\uff6f\110\uff6f\111\uff6f\112\uff6f\114" +
    "\uff6f\115\uff6f\001\002\000\044\012\070\013\073\014\105" +
    "\015\076\016\101\017\104\021\067\022\106\024\100\025" +
    "\066\027\075\030\071\031\072\032\077\033\074\034\102" +
    "\044\312\001\002\000\032\044\uff6d\063\uff6d\064\uff6d\066" +
    "\uff6d\102\uff6d\106\uff6d\107\uff6d\110\uff6d\111\uff6d\112\uff6d" +
    "\114\uff6d\115\uff6d\001\002\000\032\044\uff6c\063\uff6c\064" +
    "\uff6c\066\uff6c\102\uff6c\106\uff6c\107\uff6c\110\uff6c\111\uff6c" +
    "\112\uff6c\114\uff6c\115\uff6c\001\002\000\014\064\uff72\102" +
    "\uff72\107\uff72\114\uff72\115\uff72\001\002\000\044\012\070" +
    "\013\073\014\105\015\076\016\101\017\104\021\067\022" +
    "\106\024\100\025\066\027\075\030\071\031\072\032\077" +
    "\033\074\034\102\044\315\001\002\000\032\044\uff6e\063" +
    "\uff6e\064\uff6e\066\uff6e\102\uff6e\106\uff6e\107\uff6e\110\uff6e" +
    "\111\uff6e\112\uff6e\114\uff6e\115\uff6e\001\002\000\004\002" +
    "\ufffe\001\002\000\004\072\320\001\002\000\004\005\031" +
    "\001\002\000\004\044\322\001\002\000\022\002\uff84\044" +
    "\uff84\046\uff84\050\uff84\057\uff84\076\uff84\077\uff84\101\uff84" +
    "\001\002\000\004\044\324\001\002\000\022\002\uff7d\044" +
    "\uff7d\046\uff7d\050\uff7d\057\uff7d\076\uff7d\077\uff7d\101\uff7d" +
    "\001\002\000\004\041\326\001\002\000\004\044\327\001" +
    "\002\000\026\005\uffff\042\uffff\044\005\050\uffff\051\uffff" +
    "\054\uffff\055\uffff\056\uffff\057\uffff\067\uffff\001\002\000" +
    "\026\005\ufff8\042\ufff8\044\ufff8\050\ufff8\051\ufff8\054\u016b" +
    "\055\ufff8\056\ufff8\057\ufff8\067\ufff8\001\002\000\024\005" +
    "\uffff\042\uffff\044\005\050\uffff\051\uffff\055\uffff\056\uffff" +
    "\057\uffff\067\uffff\001\002\000\022\005\031\042\ufff5\050" +
    "\345\051\344\055\342\056\346\057\336\067\347\001\002" +
    "\000\004\042\334\001\002\000\022\002\ufffa\044\ufffa\046" +
    "\ufffa\050\ufffa\057\ufffa\076\ufffa\077\ufffa\101\ufffa\001\002" +
    "\000\004\005\u0165\001\002\000\004\005\u014a\001\002\000" +
    "\024\005\uffff\042\uffff\044\005\050\uffff\051\uffff\055\uffff" +
    "\056\uffff\057\uffff\067\uffff\001\002\000\024\005\ufff1\042" +
    "\ufff1\044\ufff1\050\ufff1\051\ufff1\055\ufff1\056\ufff1\057\ufff1" +
    "\067\ufff1\001\002\000\024\005\uffee\042\uffee\044\uffee\050" +
    "\uffee\051\uffee\055\uffee\056\uffee\057\uffee\067\uffee\001\002" +
    "\000\004\005\u015d\001\002\000\024\005\ufff2\042\ufff2\044" +
    "\ufff2\050\ufff2\051\ufff2\055\ufff2\056\ufff2\057\ufff2\067\ufff2" +
    "\001\002\000\004\005\u0154\001\002\000\004\005\u014a\001" +
    "\002\000\004\041\u0144\001\002\000\004\005\350\001\002" +
    "\000\004\041\351\001\002\000\004\044\352\001\002\000" +
    "\016\005\031\042\uffeb\050\345\051\344\074\354\075\353" +
    "\001\002\000\004\041\u013f\001\002\000\004\035\364\001" +
    "\002\000\016\005\uffe8\042\uffe8\050\uffe8\051\uffe8\074\uffe8" +
    "\075\uffe8\001\002\000\016\005\031\042\uffeb\050\345\051" +
    "\344\074\354\075\353\001\002\000\016\005\uffe7\042\uffe7" +
    "\050\uffe7\051\uffe7\074\uffe7\075\uffe7\001\002\000\004\042" +
    "\361\001\002\000\004\044\362\001\002\000\024\005\uffed" +
    "\042\uffed\044\uffed\050\uffed\051\uffed\055\uffed\056\uffed\057" +
    "\uffed\067\uffed\001\002\000\004\042\uffec\001\002\000\006" +
    "\005\031\036\uffe2\001\002\000\004\036\370\001\002\000" +
    "\006\036\uffe0\043\204\001\002\000\004\036\uffe3\001\002" +
    "\000\004\041\371\001\002\000\004\044\372\001\002\000" +
    "\052\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff" +
    "\011\uffff\023\uffff\025\uffff\035\uffff\042\uffff\044\005\050" +
    "\uffff\051\uffff\063\uffff\065\uffff\066\uffff\070\uffff\071\uffff" +
    "\073\uffff\001\002\000\050\003\u0109\004\061\005\u0113\006" +
    "\053\007\044\010\047\011\057\023\041\025\060\035\064" +
    "\042\uffd5\050\046\051\u0101\063\u0106\065\u010e\066\u0107\070" +
    "\062\071\063\073\052\001\002\000\004\042\375\001\002" +
    "\000\004\044\376\001\002\000\016\005\uffea\042\uffea\050" +
    "\uffea\051\uffea\074\uffea\075\uffea\001\002\000\052\003\uffcc" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\023" +
    "\uffcc\025\uffcc\035\uffcc\042\uffcc\044\uffcc\050\uffcc\051\uffcc" +
    "\063\uffcc\065\uffcc\066\uffcc\070\uffcc\071\uffcc\073\uffcc\001" +
    "\002\000\052\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\023\uffd2\025\uffd2\035\uffd2\042\uffd2\044" +
    "\uffd2\050\uffd2\051\uffd2\063\uffd2\065\uffd2\066\uffd2\070\uffd2" +
    "\071\uffd2\073\uffd2\001\002\000\004\005\u0136\001\002\000" +
    "\052\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\011\uffcd\023\uffcd\025\uffcd\035\uffcd\042\uffcd\044\uffcd\050" +
    "\uffcd\051\uffcd\063\uffcd\065\uffcd\066\uffcd\070\uffcd\071\uffcd" +
    "\073\uffcd\001\002\000\052\003\uffd1\004\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\023\uffd1\025\uffd1\035\uffd1" +
    "\042\uffd1\044\uffd1\050\uffd1\051\uffd1\063\uffd1\065\uffd1\066" +
    "\uffd1\070\uffd1\071\uffd1\073\uffd1\001\002\000\052\003\uffd0" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\023" +
    "\uffd0\025\uffd0\035\uffd0\042\uffd0\044\uffd0\050\uffd0\051\uffd0" +
    "\063\uffd0\065\uffd0\066\uffd0\070\uffd0\071\uffd0\073\uffd0\001" +
    "\002\000\044\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1" +
    "\017\uffb1\021\uffb1\022\uffb1\024\uffb1\025\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\044\u0135\001\002" +
    "\000\034\004\061\005\043\006\053\007\044\010\047\011" +
    "\057\023\041\025\060\035\064\050\046\070\062\071\063" +
    "\073\052\001\002\000\034\004\061\005\043\006\053\007" +
    "\044\010\047\011\057\023\041\025\060\035\064\050\046" +
    "\070\062\071\063\073\052\001\002\000\052\003\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\023\uffd4" +
    "\025\uffd4\035\uffd4\042\uffd4\044\uffd4\050\uffd4\051\uffd4\063" +
    "\uffd4\065\uffd4\066\uffd4\070\uffd4\071\uffd4\073\uffd4\001\002" +
    "\000\004\044\u0125\001\002\000\044\012\uffb2\013\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\021\uffb2\022\uffb2\024\uffb2" +
    "\025\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\044\u0124\001\002\000\004\020\u0121\001\002\000\052" +
    "\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011" +
    "\uffce\023\uffce\025\uffce\035\uffce\042\uffce\044\uffce\050\uffce" +
    "\051\uffce\063\uffce\065\uffce\066\uffce\070\uffce\071\uffce\073" +
    "\uffce\001\002\000\004\005\u011c\001\002\000\034\004\061" +
    "\005\043\006\053\007\044\010\047\011\057\023\041\025" +
    "\060\035\064\050\046\070\062\071\063\073\052\001\002" +
    "\000\052\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010" +
    "\uffff\011\uffff\023\uffff\025\uffff\035\uffff\042\uffff\044\005" +
    "\050\uffff\051\uffff\063\uffff\065\uffff\066\uffff\070\uffff\071" +
    "\uffff\073\uffff\001\002\000\044\012\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\016\uffb3\017\uffb3\021\uffb3\022\uffb3\024\uffb3\025" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\044\u0114\001\002\000\052\003\uffcf\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\023\uffcf\025\uffcf\035\uffcf" +
    "\042\uffcf\044\uffcf\050\uffcf\051\uffcf\063\uffcf\065\uffcf\066" +
    "\uffcf\070\uffcf\071\uffcf\073\uffcf\001\002\000\052\003\uffd3" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\023" +
    "\uffd3\025\uffd3\035\uffd3\042\uffd3\044\uffd3\050\uffd3\051\uffd3" +
    "\063\uffd3\065\uffd3\066\uffd3\070\uffd3\071\uffd3\073\uffd3\001" +
    "\002\000\054\005\uffde\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\024\uffbb\025" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\150\037\146\062\157\001\002\000\052\003\uffb9\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\023\uffb9" +
    "\025\uffb9\035\uffb9\042\uffb9\044\uffb9\050\uffb9\051\uffb9\063" +
    "\uffb9\065\uffb9\066\uffb9\070\uffb9\071\uffb9\073\uffb9\001\002" +
    "\000\004\042\uffd6\001\002\000\044\012\070\013\073\014" +
    "\105\015\076\016\101\017\104\021\067\022\106\024\100" +
    "\025\066\027\075\030\071\031\072\032\077\033\074\034" +
    "\102\041\u0117\001\002\000\004\044\u0118\001\002\000\052" +
    "\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011" +
    "\uffff\023\uffff\025\uffff\035\uffff\042\uffff\044\005\050\uffff" +
    "\051\uffff\063\uffff\065\uffff\066\uffff\070\uffff\071\uffff\073" +
    "\uffff\001\002\000\004\042\u011a\001\002\000\004\044\u011b" +
    "\001\002\000\052\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\023\uffc5\025\uffc5\035\uffc5\042\uffc5" +
    "\044\uffc5\050\uffc5\051\uffc5\063\uffc5\065\uffc5\066\uffc5\070" +
    "\uffc5\071\uffc5\073\uffc5\001\002\000\006\020\u011d\044\u011e" +
    "\001\002\000\034\004\061\005\043\006\053\007\044\010" +
    "\047\011\057\023\041\025\060\035\064\050\046\070\062" +
    "\071\063\073\052\001\002\000\052\003\uffc1\004\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\023\uffc1\025\uffc1" +
    "\035\uffc1\042\uffc1\044\uffc1\050\uffc1\051\uffc1\063\uffc1\065" +
    "\uffc1\066\uffc1\070\uffc1\071\uffc1\073\uffc1\001\002\000\044" +
    "\012\070\013\073\014\105\015\076\016\101\017\104\021" +
    "\067\022\106\024\100\025\066\027\075\030\071\031\072" +
    "\032\077\033\074\034\102\044\u0120\001\002\000\052\003" +
    "\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2" +
    "\023\uffc2\025\uffc2\035\uffc2\042\uffc2\044\uffc2\050\uffc2\051" +
    "\uffc2\063\uffc2\065\uffc2\066\uffc2\070\uffc2\071\uffc2\073\uffc2" +
    "\001\002\000\034\004\061\005\043\006\053\007\044\010" +
    "\047\011\057\023\041\025\060\035\064\050\046\070\062" +
    "\071\063\073\052\001\002\000\044\012\070\013\073\014" +
    "\105\015\076\016\101\017\104\021\067\022\106\024\100" +
    "\025\066\027\075\030\071\031\072\032\077\033\074\034" +
    "\102\044\u0123\001\002\000\052\003\uffc0\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\011\uffc0\023\uffc0\025\uffc0\035" +
    "\uffc0\042\uffc0\044\uffc0\050\uffc0\051\uffc0\063\uffc0\065\uffc0" +
    "\066\uffc0\070\uffc0\071\uffc0\073\uffc0\001\002\000\052\003" +
    "\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\023\uffb8\025\uffb8\035\uffb8\042\uffb8\044\uffb8\050\uffb8\051" +
    "\uffb8\063\uffb8\065\uffb8\066\uffb8\070\uffb8\071\uffb8\073\uffb8" +
    "\001\002\000\052\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\023\uffcb\025\uffcb\035\uffcb\042\uffcb" +
    "\044\uffcb\050\uffcb\051\uffcb\063\uffcb\065\uffcb\066\uffcb\070" +
    "\uffcb\071\uffcb\073\uffcb\001\002\000\044\012\070\013\073" +
    "\014\105\015\076\016\101\017\104\021\067\022\106\024" +
    "\100\025\066\027\075\030\071\031\072\032\077\033\074" +
    "\034\102\044\u0127\001\002\000\052\003\uffca\004\uffca\005" +
    "\uffca\006\uffca\007\uffca\010\uffca\011\uffca\023\uffca\025\uffca" +
    "\035\uffca\042\uffca\044\uffca\050\uffca\051\uffca\063\uffca\065" +
    "\uffca\066\uffca\070\uffca\071\uffca\073\uffca\001\002\000\044" +
    "\012\070\013\073\014\105\015\076\016\101\017\104\021" +
    "\067\022\106\024\100\025\066\027\075\030\071\031\072" +
    "\032\077\033\074\034\102\041\u0129\001\002\000\004\044" +
    "\u012a\001\002\000\052\003\uffff\004\uffff\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\023\uffff\025\uffff\035\uffff\042" +
    "\uffff\044\005\050\uffff\051\uffff\063\uffff\065\uffff\066\uffff" +
    "\070\uffff\071\uffff\073\uffff\001\002\000\004\042\u012c\001" +
    "\002\000\006\044\u012d\064\u012e\001\002\000\052\003\uffc9" +
    "\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\023" +
    "\uffc9\025\uffc9\035\uffc9\042\uffc9\044\uffc9\050\uffc9\051\uffc9" +
    "\063\uffc9\065\uffc9\066\uffc9\070\uffc9\071\uffc9\073\uffc9\001" +
    "\002\000\006\041\u012f\063\u0106\001\002\000\052\003\uffff" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\023" +
    "\uffff\025\uffff\035\uffff\042\uffff\044\005\050\uffff\051\uffff" +
    "\063\uffff\065\uffff\066\uffff\070\uffff\071\uffff\073\uffff\001" +
    "\002\000\052\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\023\uffc8\025\uffc8\035\uffc8\042\uffc8\044" +
    "\uffc8\050\uffc8\051\uffc8\063\uffc8\065\uffc8\066\uffc8\070\uffc8" +
    "\071\uffc8\073\uffc8\001\002\000\052\003\uffc7\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\023\uffc7\025\uffc7" +
    "\035\uffc7\042\uffc7\044\uffc7\050\uffc7\051\uffc7\063\uffc7\065" +
    "\uffc7\066\uffc7\070\uffc7\071\uffc7\073\uffc7\001\002\000\004" +
    "\042\u0133\001\002\000\004\044\u0134\001\002\000\052\003" +
    "\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\023\uffc6\025\uffc6\035\uffc6\042\uffc6\044\uffc6\050\uffc6\051" +
    "\uffc6\063\uffc6\065\uffc6\066\uffc6\070\uffc6\071\uffc6\073\uffc6" +
    "\001\002\000\052\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\011\uffb7\023\uffb7\025\uffb7\035\uffb7\042\uffb7" +
    "\044\uffb7\050\uffb7\051\uffb7\063\uffb7\065\uffb7\066\uffb7\070" +
    "\uffb7\071\uffb7\073\uffb7\001\002\000\010\005\uffde\020\u013c" +
    "\062\157\001\002\000\004\005\u0138\001\002\000\004\020" +
    "\u0139\001\002\000\034\004\061\005\043\006\053\007\044" +
    "\010\047\011\057\023\041\025\060\035\064\050\046\070" +
    "\062\071\063\073\052\001\002\000\044\012\070\013\073" +
    "\014\105\015\076\016\101\017\104\021\067\022\106\024" +
    "\100\025\066\027\075\030\071\031\072\032\077\033\074" +
    "\034\102\044\u013b\001\002\000\052\003\uffc3\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\023\uffc3\025\uffc3" +
    "\035\uffc3\042\uffc3\044\uffc3\050\uffc3\051\uffc3\063\uffc3\065" +
    "\uffc3\066\uffc3\070\uffc3\071\uffc3\073\uffc3\001\002\000\034" +
    "\004\061\005\043\006\053\007\044\010\047\011\057\023" +
    "\041\025\060\035\064\050\046\070\062\071\063\073\052" +
    "\001\002\000\044\012\070\013\073\014\105\015\076\016" +
    "\101\017\104\021\067\022\106\024\100\025\066\027\075" +
    "\030\071\031\072\032\077\033\074\034\102\044\u013e\001" +
    "\002\000\052\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\023\uffc4\025\uffc4\035\uffc4\042\uffc4\044" +
    "\uffc4\050\uffc4\051\uffc4\063\uffc4\065\uffc4\066\uffc4\070\uffc4" +
    "\071\uffc4\073\uffc4\001\002\000\004\044\u0140\001\002\000" +
    "\052\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff" +
    "\011\uffff\023\uffff\025\uffff\035\uffff\042\uffff\044\005\050" +
    "\uffff\051\uffff\063\uffff\065\uffff\066\uffff\070\uffff\071\uffff" +
    "\073\uffff\001\002\000\004\042\u0142\001\002\000\004\044" +
    "\u0143\001\002\000\016\005\uffe9\042\uffe9\050\uffe9\051\uffe9" +
    "\074\uffe9\075\uffe9\001\002\000\004\044\u0145\001\002\000" +
    "\052\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff" +
    "\011\uffff\023\uffff\025\uffff\035\uffff\042\uffff\044\005\050" +
    "\uffff\051\uffff\063\uffff\065\uffff\066\uffff\070\uffff\071\uffff" +
    "\073\uffff\001\002\000\004\042\u0147\001\002\000\004\044" +
    "\u0148\001\002\000\024\005\ufff0\042\ufff0\044\ufff0\050\ufff0" +
    "\051\ufff0\055\ufff0\056\ufff0\057\ufff0\067\ufff0\001\002\000" +
    "\004\041\u0150\001\002\000\004\035\u014b\001\002\000\006" +
    "\005\031\036\uffe2\001\002\000\004\036\u014d\001\002\000" +
    "\010\041\uffe4\044\uffe4\047\u014e\001\002\000\004\005\031" +
    "\001\002\000\006\041\uffe5\044\uffe5\001\002\000\004\044" +
    "\u0151\001\002\000\052\003\uffff\004\uffff\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\023\uffff\025\uffff\035\uffff\042" +
    "\uffff\044\005\050\uffff\051\uffff\063\uffff\065\uffff\066\uffff" +
    "\070\uffff\071\uffff\073\uffff\001\002\000\004\042\u0153\001" +
    "\002\000\030\005\uffe6\042\uffe6\044\uffe6\050\uffe6\051\uffe6" +
    "\055\uffe6\056\uffe6\057\uffe6\067\uffe6\074\uffe6\075\uffe6\001" +
    "\002\000\010\005\uffde\020\u015a\062\157\001\002\000\004" +
    "\005\u0156\001\002\000\004\020\u0157\001\002\000\034\004" +
    "\061\005\043\006\053\007\044\010\047\011\057\023\041" +
    "\025\060\035\064\050\046\070\062\071\063\073\052\001" +
    "\002\000\044\012\070\013\073\014\105\015\076\016\101" +
    "\017\104\021\067\022\106\024\100\025\066\027\075\030" +
    "\071\031\072\032\077\033\074\034\102\044\u0159\001\002" +
    "\000\030\005\uffd9\042\uffd9\044\uffd9\050\uffd9\051\uffd9\055" +
    "\uffd9\056\uffd9\057\uffd9\067\uffd9\074\uffd9\075\uffd9\001\002" +
    "\000\034\004\061\005\043\006\053\007\044\010\047\011" +
    "\057\023\041\025\060\035\064\050\046\070\062\071\063" +
    "\073\052\001\002\000\044\012\070\013\073\014\105\015" +
    "\076\016\101\017\104\021\067\022\106\024\100\025\066" +
    "\027\075\030\071\031\072\032\077\033\074\034\102\044" +
    "\u015c\001\002\000\030\005\uffda\042\uffda\044\uffda\050\uffda" +
    "\051\uffda\055\uffda\056\uffda\057\uffda\067\uffda\074\uffda\075" +
    "\uffda\001\002\000\006\044\u015e\072\u015f\001\002\000\024" +
    "\005\ufff3\042\ufff3\044\ufff3\050\ufff3\051\ufff3\055\ufff3\056" +
    "\ufff3\057\ufff3\067\ufff3\001\002\000\004\005\031\001\002" +
    "\000\004\044\u0161\001\002\000\024\005\ufff4\042\ufff4\044" +
    "\ufff4\050\ufff4\051\ufff4\055\ufff4\056\ufff4\057\ufff4\067\ufff4" +
    "\001\002\000\004\042\ufff6\001\002\000\004\044\u0164\001" +
    "\002\000\024\005\uffef\042\uffef\044\uffef\050\uffef\051\uffef" +
    "\055\uffef\056\uffef\057\uffef\067\uffef\001\002\000\006\020" +
    "\u0166\044\u0167\001\002\000\034\004\061\005\043\006\053" +
    "\007\044\010\047\011\057\023\041\025\060\035\064\050" +
    "\046\070\062\071\063\073\052\001\002\000\030\005\uffd7" +
    "\042\uffd7\044\uffd7\050\uffd7\051\uffd7\055\uffd7\056\uffd7\057" +
    "\uffd7\067\uffd7\074\uffd7\075\uffd7\001\002\000\044\012\070" +
    "\013\073\014\105\015\076\016\101\017\104\021\067\022" +
    "\106\024\100\025\066\027\075\030\071\031\072\032\077" +
    "\033\074\034\102\044\u0169\001\002\000\030\005\uffd8\042" +
    "\uffd8\044\uffd8\050\uffd8\051\uffd8\055\uffd8\056\uffd8\057\uffd8" +
    "\067\uffd8\074\uffd8\075\uffd8\001\002\000\026\005\uffff\042" +
    "\uffff\044\005\050\uffff\051\uffff\054\uffff\055\uffff\056\uffff" +
    "\057\uffff\067\uffff\001\002\000\004\005\u016c\001\002\000" +
    "\004\044\u016d\001\002\000\026\005\ufff7\042\ufff7\044\ufff7" +
    "\050\ufff7\051\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\067" +
    "\ufff7\001\002\000\024\005\ufff9\042\ufff9\044\ufff9\050\ufff9" +
    "\051\ufff9\055\ufff9\056\ufff9\057\ufff9\067\ufff9\001\002\000" +
    "\004\005\176\001\002\000\004\044\u0171\001\002\000\022" +
    "\002\uff7c\044\uff7c\046\uff7c\050\uff7c\057\uff7c\076\uff7c\077" +
    "\uff7c\101\uff7c\001\002\000\124\002\000\003\000\004\000" +
    "\005\000\006\000\007\000\010\000\011\000\023\000\025" +
    "\000\035\000\042\000\044\000\046\000\050\000\051\000" +
    "\054\000\055\000\056\000\057\000\063\000\064\000\065" +
    "\000\066\000\067\000\070\000\071\000\073\000\076\000" +
    "\077\000\100\000\101\000\102\000\105\000\106\000\107" +
    "\000\110\000\111\000\112\000\114\000\115\000\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0171\000\006\012\003\040\005\001\001\000\002\001" +
    "\001\000\004\040\u0171\001\001\000\020\053\012\055\016" +
    "\064\022\074\007\075\013\106\017\107\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\322\001\001\000\002\001\001\000\006\012\315\040\005" +
    "\001\001\000\002\001\001\000\004\027\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\025\076\024" +
    "\001\001\000\002\001\001\000\006\054\031\077\026\001" +
    "\001\000\006\040\025\076\171\001\001\000\004\054\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\050\015\044\017\053\020\036\021\041" +
    "\022\035\023\047\024\055\057\054\060\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\155\015\044\017\053\020\036\021" +
    "\041\022\035\023\047\024\055\057\054\060\037\001\001" +
    "\000\002\001\001\000\004\031\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\014\142\015\044\017" +
    "\053\020\036\021\041\022\035\023\047\024\055\057\054" +
    "\060\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\014\064\015\044\017\053\020\036" +
    "\021\041\022\035\023\047\024\055\057\054\060\037\001" +
    "\001\000\002\001\001\000\026\014\135\015\044\017\053" +
    "\020\036\021\041\022\035\023\047\024\055\057\054\060" +
    "\037\001\001\000\026\014\134\015\044\017\053\020\036" +
    "\021\041\022\035\023\047\024\055\057\054\060\037\001" +
    "\001\000\026\014\133\015\044\017\053\020\036\021\041" +
    "\022\035\023\047\024\055\057\054\060\037\001\001\000" +
    "\026\014\132\015\044\017\053\020\036\021\041\022\035" +
    "\023\047\024\055\057\054\060\037\001\001\000\026\014" +
    "\131\015\044\017\053\020\036\021\041\022\035\023\047" +
    "\024\055\057\054\060\037\001\001\000\026\014\130\015" +
    "\044\017\053\020\036\021\041\022\035\023\047\024\055" +
    "\057\054\060\037\001\001\000\026\014\127\015\044\017" +
    "\053\020\036\021\041\022\035\023\047\024\055\057\054" +
    "\060\037\001\001\000\026\014\126\015\044\017\053\020" +
    "\036\021\041\022\035\023\047\024\055\057\054\060\037" +
    "\001\001\000\026\014\125\015\044\017\053\020\036\021" +
    "\041\022\035\023\047\024\055\057\054\060\037\001\001" +
    "\000\026\014\124\015\044\017\053\020\036\021\041\022" +
    "\035\023\047\024\055\057\054\060\037\001\001\000\026" +
    "\014\123\015\044\017\053\020\036\021\041\022\035\023" +
    "\047\024\055\057\054\060\037\001\001\000\026\014\122" +
    "\015\044\017\053\020\036\021\041\022\035\023\047\024" +
    "\055\057\054\060\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\110\015\044\017\053\020\036\021" +
    "\041\022\035\023\047\024\055\057\054\060\037\001\001" +
    "\000\026\014\107\015\044\017\053\020\036\021\041\022" +
    "\035\023\047\024\055\057\054\060\037\001\001\000\026" +
    "\014\106\015\044\017\053\020\036\021\041\022\035\023" +
    "\047\024\055\057\054\060\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\114\014\113\015\044\017\053\020\036\021\041" +
    "\022\035\023\047\024\055\057\054\060\037\001\001\000" +
    "\004\003\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\120\015\044\017\053\020" +
    "\036\021\041\022\035\023\047\024\055\057\054\060\037" +
    "\001\001\000\004\003\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\140\014\113\015\044\017\053\020\036\021\041" +
    "\022\035\023\047\024\055\057\054\060\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\014\152\015\044\017" +
    "\053\020\036\021\041\022\035\023\047\024\055\057\054" +
    "\060\037\001\001\000\002\001\001\000\030\002\150\014" +
    "\113\015\044\017\053\020\036\021\041\022\035\023\047" +
    "\024\055\057\054\060\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\160\001" +
    "\001\000\026\014\161\015\044\017\053\020\036\021\041" +
    "\022\035\023\047\024\055\057\054\060\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\167\015\044\017\053\020\036\021\041\022\035" +
    "\023\047\024\055\057\054\060\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\054\201\065\202\070\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\204\001" +
    "\001\000\006\054\201\065\205\001\001\000\002\001\001" +
    "\000\004\067\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\215\100\214\001\001\000\006\040" +
    "\227\101\230\001\001\000\004\102\216\001\001\000\006" +
    "\040\215\100\226\001\001\000\004\054\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\224\015\044" +
    "\017\053\020\036\021\041\022\035\023\047\024\055\057" +
    "\054\060\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\103\234\104" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\313\015\044\017\053\020\036\021" +
    "\041\022\035\023\047\024\055\057\054\060\037\001\001" +
    "\000\006\040\227\101\312\001\001\000\026\014\307\015" +
    "\044\017\053\020\036\021\041\022\035\023\047\024\055" +
    "\057\054\060\037\001\001\000\002\001\001\000\032\014" +
    "\273\015\044\016\272\017\053\020\036\021\271\022\035" +
    "\023\047\024\055\035\267\057\274\060\270\001\001\000" +
    "\002\001\001\000\026\014\245\015\044\017\053\020\036" +
    "\021\041\022\035\023\047\024\055\057\054\060\037\001" +
    "\001\000\004\023\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\227\101\250\001\001\000\004\105\253\001\001\000\002" +
    "\001\001\000\026\014\256\015\044\017\053\020\036\021" +
    "\041\022\035\023\047\024\055\057\054\060\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\227\101\261" +
    "\001\001\000\004\105\262\001\001\000\002\001\001\000" +
    "\006\040\227\101\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\277\001" +
    "\001\000\002\001\001\000\026\014\301\015\044\017\053" +
    "\020\036\021\041\022\035\023\047\024\055\057\054\060" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\227\101\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\327\063\330\001\001\000\004\032" +
    "\u0169\001\001\000\006\040\331\061\332\001\001\000\014" +
    "\005\340\013\336\025\342\054\334\056\337\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\u0162\001\001\000\006\040\331\061\u0161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\u0154\001\001\000\004\026\u0148\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\357\010\355\025\356\054" +
    "\334\056\354\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\362\010\355\025\356\054" +
    "\334\056\354\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\054\201\065\365\066\364\001\001\000\002\001\001" +
    "\000\004\067\366\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\040\372\073\373\001\001" +
    "\000\060\014\273\015\044\016\u010a\017\053\020\u010f\021" +
    "\271\022\035\023\u0109\024\u0104\033\377\035\267\042\u0103" +
    "\043\376\044\u010b\045\u0107\046\u0101\047\u0110\050\u0102\051" +
    "\u0111\054\u010c\057\274\060\270\071\u010e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\u0136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\u0127\015\044\017\053\020\036\021\041" +
    "\022\035\023\047\024\055\057\054\060\037\001\001\000" +
    "\026\014\u0125\015\044\017\053\020\036\021\041\022\035" +
    "\023\047\024\055\057\054\060\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\014\u0115\015" +
    "\044\017\053\020\036\021\041\022\035\023\047\024\055" +
    "\057\054\060\037\001\001\000\006\040\372\073\u0114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\040\372" +
    "\073\u0118\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\u011e\015\044" +
    "\017\053\020\036\021\041\022\035\023\047\024\055\057" +
    "\054\060\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\u0121\015\044\017\053\020" +
    "\036\021\041\022\035\023\047\024\055\057\054\060\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\040\372\073" +
    "\u012a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\045\u0130\072\u012f\001\001\000\006\040" +
    "\372\073\u0131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\u0139\015\044\017\053\020\036\021" +
    "\041\022\035\023\047\024\055\057\054\060\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\014\u013c\015" +
    "\044\017\053\020\036\021\041\022\035\023\047\024\055" +
    "\057\054\060\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\040\372\073\u0140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\372\073\u0145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\054\201\065\365\066\u014b" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\u014e\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\372\073\u0151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\u0157\015\044\017\053\020\036\021\041\022" +
    "\035\023\047\024\055\057\054\060\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\014\u015a\015\044\017" +
    "\053\020\036\021\041\022\035\023\047\024\055\057\054" +
    "\060\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\u015f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\014\u0167\015\044\017\053\020\036\021\041\022\035\023" +
    "\047\024\055\057\054\060\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\040\327\063" +
    "\u016d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\u016f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	protected String filename = "";


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 

	private WPos pos(int left, int right) {
		return AST.WPos(parser.filename, left, right);
	}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // JasselseIfs ::= ENDIF NL 
            {
              WStatements RESULT =null;
		 RESULT = AST.WStatements(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JasselseIfs",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // JasselseIfs ::= ELSE NL JassStatements ENDIF NL 
            {
              WStatements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements s = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JasselseIfs",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // JasselseIfs ::= ELSEIF Expr THEN NL JassStatements JasselseIfs 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int thenStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int thenStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatements thenStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements elseStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.WStatements(AST.StmtIf(pos(xleft, xright), cond,  thenStatements, elseStatements)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JasselseIfs",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // JassStatementIf ::= IF Expr THEN NL JassStatements JasselseIfs 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int thenStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int thenStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatements thenStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements elseStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.StmtIf(pos(xleft, xright), cond, thenStatements, elseStatements); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatementIf",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // JassStatement ::= CALL ExprFunctionCall 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprFunctionCall call = (ExprFunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = call; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // JassStatement ::= SET ExprAssignable EQ Expr NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAssignable left = (ExprAssignable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.StmtSet(pos(xleft, xright), left, AST.OpAssign(),  right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // JassStatement ::= RETURN Expr NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.StmtReturn(pos(xleft, xright), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // JassStatement ::= RETURN NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.StmtReturn(pos(xleft, xright), AST.NoExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // JassStatement ::= EXITWHEN Expr NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.StmtExitwhen(pos(xleft, xright), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // JassStatement ::= LOOP NL JassStatements ENDLOOP NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.StmtLoop(pos(xleft, xright), body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // JassStatement ::= JassStatementIf 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatement x = (WStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // JassStatements ::= Newlines 
            {
              WStatements RESULT =null;
		 RESULT = AST.WStatements(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatements",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // JassStatements ::= Newlines JassStatement JassStatements 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatement x = (WStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements xs = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatements",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // JassLocal ::= LOCAL TypeExpr IDENTIFIER NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.LocalVarDef(pos(xleft, xright), false, typ, name, AST.NoExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassLocal",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // JassLocal ::= LOCAL TypeExpr IDENTIFIER EQ Expr NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.LocalVarDef(pos(xleft, xright), false, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassLocal",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // JassLocals ::= Newlines 
            {
              WStatements RESULT =null;
		 RESULT = AST.WStatements(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassLocals",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // JassLocals ::= Newlines JassLocal JassLocals 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatement x = (WStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements xs = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassLocals",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // JassParameters ::= Parameter OtherParameters 
            {
              WParameters RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WParameter x = (WParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WParameters xs = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassParameters",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // JassParameters ::= NOTHING 
            {
              WParameters RESULT =null;
		 RESULT = AST.WParameters(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassParameters",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // JassFuncSignature ::= IDENTIFIER TAKES JassParameters RETURNS NOTHING 
            {
              FuncSignature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WParameters parameters = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.FuncSignature(pos(nameleft, nameright), name, parameters, AST.NoTypeExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassFuncSignature",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // JassFuncSignature ::= IDENTIFIER TAKES JassParameters RETURNS TypeExpr 
            {
              FuncSignature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WParameters parameters = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.FuncSignature(pos(nameleft, nameright), name, parameters, typ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassFuncSignature",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // JassFuncDef ::= FUNCTION JassFuncSignature NL JassLocals JassStatements ENDFUNCTION NL 
            {
              FuncDef RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FuncSignature sig = (FuncSignature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int body1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int body1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WStatements body1 = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int body2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int body2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body2 = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.FuncDef(pos(xleft, xright), sig, body1.addAll(body2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassFuncDef",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // JassNativeDecl ::= CONSTANT NATIVE JassFuncSignature NL 
            {
              NativeFunc RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FuncSignature sig = (FuncSignature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.NativeFunc(pos(xleft, xright), sig); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassNativeDecl",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // JassNativeDecl ::= NATIVE JassFuncSignature NL 
            {
              NativeFunc RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FuncSignature sig = (FuncSignature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.NativeFunc(pos(xleft, xright), sig); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassNativeDecl",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // JassGlobalDecl ::= TypeExpr IDENTIFIER NL 
            {
              GlobalVarDef RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.GlobalVarDef(typ.source(), false, typ, name, AST.NoExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalDecl",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // JassGlobalDecl ::= TypeExpr IDENTIFIER EQ Expr NL 
            {
              GlobalVarDef RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.GlobalVarDef(typ.source(), false, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalDecl",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // JassGlobalDecl ::= CONSTANT TypeExpr IDENTIFIER EQ Expr NL 
            {
              GlobalVarDef RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.GlobalVarDef(pos(xleft, xright), true, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalDecl",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // JassGlobalDecls ::= Newlines 
            {
              JassGlobalBlock RESULT =null;
		 RESULT = AST.JassGlobalBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalDecls",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // JassGlobalDecls ::= Newlines JassGlobalDecl JassGlobalDecls 
            {
              JassGlobalBlock RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GlobalVarDef x = (GlobalVarDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JassGlobalBlock xs = (JassGlobalBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalDecls",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // JassGlobalBlock ::= GLOBALS NL JassGlobalDecls ENDGLOBALS NL 
            {
              JassGlobalBlock RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JassGlobalBlock x = (JassGlobalBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalBlock",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // JassTypeDecl ::= TYPE IDENTIFIER EXTENDS TypeExpr NL 
            {
              NativeType RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int extendsNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int extendsNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeExpr extendsName = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.NativeType(pos(xleft, xright), name, extendsName); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassTypeDecl",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // JassToplevelDeclaration ::= JassNativeDecl 
            {
              JassToplevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NativeFunc x = (NativeFunc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassToplevelDeclaration",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // JassToplevelDeclaration ::= JassTypeDecl 
            {
              JassToplevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NativeType x = (NativeType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassToplevelDeclaration",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // JassToplevelDeclaration ::= JassFuncDef 
            {
              JassToplevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDef x = (FuncDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassToplevelDeclaration",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // JassToplevelDeclaration ::= JassGlobalBlock 
            {
              JassToplevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JassGlobalBlock x = (JassGlobalBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassToplevelDeclaration",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ExprFunctionCall ::= IDENTIFIER LPAR Arguments RPAR 
            {
              ExprFunctionCall RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.ExprFunctionCall(pos(nameleft, nameright), name, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprFunctionCall",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ExprUnary ::= MINUS Expr 
            {
              ExprUnary RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprUnary(pos(xleft, xright), AST.OpMinus(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprUnary",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ExprUnary ::= NOT Expr 
            {
              ExprUnary RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprUnary(pos(xleft, xright), AST.OpNot(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprUnary",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ExprBinary ::= Expr NOTEQ Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpUnequals(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ExprBinary ::= Expr GT Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpGreater(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ExprBinary ::= Expr LT Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpLess(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ExprBinary ::= Expr LTEQ Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpLessEq(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ExprBinary ::= Expr GTEQ Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpGreaterEq(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ExprBinary ::= Expr EQEQ Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpEquals(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ExprBinary ::= Expr MOD_INT Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpModInt(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ExprBinary ::= Expr MOD_REAL Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpModReal(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ExprBinary ::= Expr DIV_INT Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpDivInt(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExprBinary ::= Expr DIV_REAL Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpDivReal(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExprBinary ::= Expr MULT Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpMult(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExprBinary ::= Expr MINUS Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpMinus(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ExprBinary ::= Expr PLUS Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpPlus(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExprBinary ::= Expr AND Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpAnd(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExprBinary ::= Expr OR Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpOr(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ArgumentRest ::= 
            {
              Arguments RESULT =null;
		 RESULT = AST.Arguments(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgumentRest",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ArgumentRest ::= COMMA Expr ArgumentRest 
            {
              Arguments RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arguments xs = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgumentRest",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Arguments ::= 
            {
              Arguments RESULT =null;
		 RESULT = AST.Arguments(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arguments",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Arguments ::= Expr ArgumentRest 
            {
              Arguments RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arguments xs = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arguments",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Indexes ::= LSQUARE Expr RSQUARE 
            {
              Indexes RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.Indexes(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Indexes",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Indexes ::= LSQUARE Expr RSQUARE Indexes 
            {
              Indexes RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Indexes xs = (Indexes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Indexes",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExprNewObject ::= NEW IDENTIFIER LPAR Arguments RPAR 
            {
              ExprNewObject RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.ExprNewObject(pos(xleft, xright), name, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprNewObject",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExprAtomic ::= ExprVarArrayAccess 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprVarArrayAccess x = (ExprVarArrayAccess)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExprAtomic ::= ExprVarAccess 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprVarAccess x = (ExprVarAccess)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExprAtomic ::= REAL_LITERAL 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprRealVal(pos(xleft, xright), x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExprAtomic ::= FUNCTION IDENTIFIER 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprFuncRef(pos(xleft, xright), name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExprAtomic ::= THIS 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprThis(pos(xleft, xright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExprAtomic ::= FALSE 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBoolVal(pos(xleft, xright), false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ExprAtomic ::= TRUE 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBoolVal(pos(xleft, xright), true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ExprAtomic ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExprAtomic ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprStringVal(pos(sleft, sright), s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExprAtomic ::= NULL 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprNull(pos(xleft, xright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ExprAtomic ::= INTEGER_LITERAL 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprIntVal(pos(ileft, iright), i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExprMemberMethod ::= Expr DOT IDENTIFIER LPAR Arguments RPAR 
            {
              ExprMemberMethod RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.ExprMemberMethod(left.source(), left, name, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprMemberMethod",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExprMemberArrayVar ::= Expr DOT IDENTIFIER Indexes 
            {
              ExprMemberArrayVar RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int indexesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int indexesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Indexes indexes = (Indexes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprMemberArrayVar(left.source(), left, name, indexes); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprMemberArrayVar",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExprMemberVar ::= Expr DOT IDENTIFIER 
            {
              ExprMemberVar RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprMemberVar(left.source(), left, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprMemberVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= ExprAtomic 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= ExprNewObject 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNewObject x = (ExprNewObject)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= ExprFunctionCall 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprFunctionCall x = (ExprFunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= ExprMemberMethod 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprMemberMethod x = (ExprMemberMethod)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= ExprMemberVar 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprMemberVar x = (ExprMemberVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= ExprUnary 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprUnary x = (ExprUnary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= ExprBinary 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary x = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // StmtCall ::= ExprNewObject NL 
            {
              StmtCall RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNewObject x = (ExprNewObject)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtCall",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // StmtCall ::= ExprFunctionCall NL 
            {
              StmtCall RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprFunctionCall x = (ExprFunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtCall",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // StmtCall ::= ExprMemberMethod NL 
            {
              StmtCall RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprMemberMethod x = (ExprMemberMethod)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtCall",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExprVarArrayAccess ::= IDENTIFIER Indexes 
            {
              ExprVarArrayAccess RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Indexesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Indexesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Indexes Indexes = (Indexes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprVarArrayAccess(pos(nameleft, nameright), name, Indexes); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprVarArrayAccess",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExprVarAccess ::= IDENTIFIER 
            {
              ExprVarAccess RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprVarAccess(pos(nameleft, nameright), name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprVarAccess",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ExprAssignable ::= ExprVarArrayAccess 
            {
              ExprAssignable RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprVarArrayAccess x = (ExprVarArrayAccess)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAssignable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ExprAssignable ::= ExprVarAccess 
            {
              ExprAssignable RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprVarAccess x = (ExprVarAccess)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAssignable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExprAssignable ::= ExprMemberArrayVar 
            {
              ExprAssignable RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprMemberArrayVar x = (ExprMemberArrayVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAssignable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExprAssignable ::= ExprMemberVar 
            {
              ExprAssignable RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprMemberVar x = (ExprMemberVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAssignable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // StmtSet ::= ExprAssignable EQ Expr NL 
            {
              StmtSet RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAssignable left = (ExprAssignable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.StmtSet(left.source(), left, AST.OpAssign(),  right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtSet",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LocalVarDef ::= TypeExpr IDENTIFIER NL 
            {
              LocalVarDef RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.LocalVarDef(pos(typleft, typright), false, typ, name, AST.NoExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LocalVarDef",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LocalVarDef ::= TypeExpr IDENTIFIER EQ Expr NL 
            {
              LocalVarDef RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.LocalVarDef(pos(typleft, typright), false, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LocalVarDef",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LocalVarDef ::= VAL TypeExpr IDENTIFIER EQ Expr NL 
            {
              LocalVarDef RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.LocalVarDef(pos(xleft, xright), true, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LocalVarDef",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LocalVarDef ::= VAL IDENTIFIER EQ Expr NL 
            {
              LocalVarDef RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.LocalVarDef(pos(xleft, xright), true, AST.NoTypeExpr(), name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LocalVarDef",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StmtWhile ::= WHILE Expr LBRACK NL Statements RBRACK NL 
            {
              StmtWhile RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.StmtWhile(pos(xleft, xright), cond, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtWhile",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ElseStatements ::= LBRACK Statements RBRACK NL 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements x = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElseStatements",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ElseStatements ::= StmtIf 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtIf x = (StmtIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.WStatements(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElseStatements",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // StmtIf ::= IF Expr LBRACK NL Statements RBRACK ELSE ElseStatements 
            {
              StmtIf RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int thenStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int thenStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WStatements thenStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements elseStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.StmtIf(pos(xleft, xright), cond, thenStatements, elseStatements); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtIf",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StmtIf ::= IF Expr LBRACK NL Statements RBRACK NL 
            {
              StmtIf RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int thenStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int thenStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements thenStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.StmtIf(pos(xleft, xright), cond, thenStatements, AST.WStatements()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtIf",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StmtReturn ::= RETURN Expr NL 
            {
              StmtReturn RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int resultleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr result = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.StmtReturn(pos(xleft, xright), result); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtReturn",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= error NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.StmtErr(pos(xleft, xright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Statement ::= StmtDecRefCount 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtDecRefCount x = (StmtDecRefCount)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Statement ::= StmtIncRefCount 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtIncRefCount x = (StmtIncRefCount)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Statement ::= StmtDestroy 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtDestroy x = (StmtDestroy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= StmtReturn 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtReturn x = (StmtReturn)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= StmtCall 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtCall x = (StmtCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= StmtSet 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtSet x = (StmtSet)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= LocalVarDef 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LocalVarDef x = (LocalVarDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= StmtWhile 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtWhile x = (StmtWhile)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= StmtIf 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtIf x = (StmtIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statements ::= Newlines 
            {
              WStatements RESULT =null;
		 RESULT = AST.WStatements(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Statements ::= Newlines Statement Statements 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatement x = (WStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements xs = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VarDef ::= TypeExpr IDENTIFIER NL 
            {
              GlobalVarDef RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.GlobalVarDef(pos(typleft, typright), false, typ, name, AST.NoExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VarDef ::= TypeExpr IDENTIFIER EQ Expr NL 
            {
              GlobalVarDef RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.GlobalVarDef(pos(typleft, typright), false, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VarDef ::= VAL TypeExpr IDENTIFIER EQ Expr NL 
            {
              GlobalVarDef RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.GlobalVarDef(pos(xleft, xright), true, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VarDef ::= VAL IDENTIFIER EQ Expr NL 
            {
              GlobalVarDef RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.GlobalVarDef(pos(xleft, xright), true, AST.NoTypeExpr(), name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ArraySizes ::= 
            {
              ArraySizes RESULT =null;
		 RESULT = AST.ArraySizes(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArraySizes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ArraySizes ::= LSQUARE Expr RSQUARE ArraySizes 
            {
              ArraySizes RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArraySizes xs = (ArraySizes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArraySizes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TypeExpr ::= IDENTIFIER ARRAY ArraySizes 
            {
              TypeExpr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sizesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sizesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArraySizes sizes = (ArraySizes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.TypeExpr(pos(nameleft, nameright), name, true, sizes); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeExpr",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TypeExpr ::= IDENTIFIER 
            {
              TypeExpr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.TypeExpr(pos(nameleft, nameright), name, false, AST.ArraySizes()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeExpr",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Parameter ::= TypeExpr IDENTIFIER 
            {
              WParameter RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.WParameter(pos(typleft, typright), typ, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parameter",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OtherParameters ::= 
            {
              WParameters RESULT =null;
		 RESULT = AST.WParameters(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherParameters",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OtherParameters ::= COMMA Parameter OtherParameters 
            {
              WParameters RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WParameter x = (WParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WParameters xs = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherParameters",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Parameters ::= 
            {
              WParameters RESULT =null;
		 RESULT = AST.WParameters(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parameters",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Parameters ::= Parameter OtherParameters 
            {
              WParameters RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WParameter x = (WParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WParameters xs = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parameters",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FuncSignature ::= IDENTIFIER LPAR Parameters RPAR 
            {
              FuncSignature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WParameters parameters = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.FuncSignature(pos(nameleft, nameright), name, parameters, AST.NoTypeExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncSignature",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FuncSignature ::= IDENTIFIER LPAR Parameters RPAR RETURNS TypeExpr 
            {
              FuncSignature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WParameters parameters = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.FuncSignature(pos(nameleft, nameright), name, parameters, typ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncSignature",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FuncDef ::= FUNCTION FuncSignature LBRACK NL Statements RBRACK 
            {
              FuncDef RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		FuncSignature sig = (FuncSignature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.FuncDef(pos(xleft, xright), sig, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncDef",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassSlot ::= FuncDef 
            {
              ClassSlot RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDef x = (FuncDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassSlot ::= VarDef 
            {
              ClassSlot RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GlobalVarDef x = (GlobalVarDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassSlot ::= ONDESTROY LBRACK NL Statements RBRACK NL 
            {
              ClassSlot RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.OnDestroyDef(pos(xleft, xright), body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ClassSlot ::= CONSTRUCT LPAR Parameters RPAR LBRACK NL Statements RBRACK NL 
            {
              ClassSlot RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		WParameters params = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.ConstructorDef(pos(xleft, xright), params, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ClassSlots ::= 
            {
              ClassSlots RESULT =null;
		 RESULT = AST.ClassSlots(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlots",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ClassSlots ::= ClassSlot ClassSlots 
            {
              ClassSlots RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassSlot x = (ClassSlot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassSlots xs = (ClassSlots)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlots",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ClassDef ::= CLASS IDENTIFIER LBRACK NL ClassSlots RBRACK NL 
            {
              ClassDef RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slotsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slotsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ClassSlots slots = (ClassSlots)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.ClassDef(pos(xleft, xright), name, false, slots); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDef",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Entity ::= ClassDef 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef x = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Entity ::= NATIVE FuncSignature NL 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FuncSignature sig = (FuncSignature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.NativeFunc(pos(xleft, xright), sig); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Entity ::= INIT LBRACK NL Statements RBRACK NL 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.InitBlock(pos(xleft, xright), body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Entity ::= VarDef 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GlobalVarDef x = (GlobalVarDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Entity ::= FuncDef 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDef x = (FuncDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Entity ::= NATIVETYPE IDENTIFIER NL 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.NativeType(pos(xleft, xright), name, AST.NoTypeExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Entity ::= NATIVETYPE IDENTIFIER EXTENDS TypeExpr NL 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int extendsNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int extendsNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeExpr extendsName = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.NativeType(pos(xleft, xright), name, extendsName); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Entities ::= Newlines 
            {
              WEntities RESULT =null;
		 RESULT = AST.WEntities(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entities",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Entities ::= Newlines Entity Entities 
            {
              WEntities RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WEntity x = (WEntity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WEntities xs = (WEntities)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entities",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Import ::= IMPORT IDENTIFIER NL 
            {
              WImport RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.WImport(pos(xleft, xright), i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Imports ::= Newlines 
            {
              WImports RESULT =null;
		 RESULT = AST.WImports(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Imports",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Imports ::= Newlines Import Imports 
            {
              WImports RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WImport i = (WImport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int importsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int importsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WImports imports = (WImports)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = imports.appFront(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Imports",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PackageDeclaration ::= PACKAGE IDENTIFIER LBRACK NL Imports Entities RBRACK 
            {
              WPackage RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int importsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int importsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WImports imports = (WImports)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int entitiesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int entitiesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WEntities entities = (WEntities)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.WPackage(pos(xleft, xright), name, imports, entities); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PackageDeclaration",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TopLevelDeclaration ::= JassToplevelDeclaration 
            {
              TopLevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JassToplevelDeclaration x = (JassToplevelDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TopLevelDeclaration",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TopLevelDeclaration ::= PackageDeclaration 
            {
              TopLevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WPackage x = (WPackage)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TopLevelDeclaration",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CompilationUnit ::= Newlines 
            {
              CompilationUnit RESULT =null;
		 RESULT = AST.CompilationUnit(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompilationUnit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CompilationUnit ::= Newlines TopLevelDeclaration CompilationUnit 
            {
              CompilationUnit RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TopLevelDeclaration p = (TopLevelDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompilationUnit c = (CompilationUnit)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c.appFront(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompilationUnit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Newlines ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Newlines",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Newlines ::= NL Newlines 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Newlines",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CompilationUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CompilationUnit start_val = (CompilationUnit)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

