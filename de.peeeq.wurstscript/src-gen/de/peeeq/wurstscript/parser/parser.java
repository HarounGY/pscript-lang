
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 21 22:52:03 CET 2011
//----------------------------------------------------

package de.peeeq.wurstscript.parser;

import java_cup.runtime.*;
import de.peeeq.wurstscript.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 21 22:52:03 CET 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\004\000\002\041\004\000\002\041" +
    "\002\000\002\012\005\000\002\012\003\000\002\054\003" +
    "\000\002\054\003\000\002\063\011\000\002\062\005\000" +
    "\002\062\003\000\002\033\005\000\002\060\005\000\002" +
    "\060\003\000\002\013\010\000\002\013\006\000\002\013" +
    "\003\000\002\013\003\000\002\013\010\000\002\013\005" +
    "\000\002\013\003\000\002\013\003\000\002\005\012\000" +
    "\002\111\012\000\002\007\005\000\002\007\003\000\002" +
    "\010\014\000\002\010\006\000\002\010\010\000\002\010" +
    "\003\000\002\010\003\000\002\026\011\000\002\110\004" +
    "\000\002\110\002\000\002\107\003\000\002\107\003\000" +
    "\002\107\003\000\002\107\003\000\002\027\010\000\002" +
    "\027\006\000\002\065\004\000\002\065\002\000\002\066" +
    "\005\000\002\066\002\000\002\064\004\000\002\053\003" +
    "\000\002\053\005\000\002\004\006\000\002\004\002\000" +
    "\002\055\010\000\002\055\006\000\002\072\005\000\002" +
    "\072\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\070\003\000\002\070\004\000\002\044\005\000" +
    "\002\046\005\000\002\045\011\000\002\045\012\000\002" +
    "\071\003\000\002\071\006\000\002\050\011\000\002\034" +
    "\007\000\002\034\010\000\002\034\007\000\002\034\005" +
    "\000\002\047\006\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\056\003\000\002" +
    "\057\004\000\002\043\004\000\002\043\004\000\002\043" +
    "\004\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\020\005\000\002" +
    "\022\005\000\002\036\006\000\002\021\010\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\005" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\004\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\025\007\000\002\032\006\000\002\032" +
    "\005\000\002\002\004\000\002\002\002\000\002\003\005" +
    "\000\002\003\002\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\023\004\000\002\023\004\000\002\024\006\000\002" +
    "\106\003\000\002\106\003\000\002\106\003\000\002\106" +
    "\003\000\002\052\007\000\002\073\007\000\002\075\005" +
    "\000\002\075\003\000\002\076\010\000\002\076\007\000" +
    "\002\076\005\000\002\105\005\000\002\105\006\000\002" +
    "\074\011\000\002\030\007\000\002\030\007\000\002\067" +
    "\003\000\002\067\004\000\002\077\005\000\002\077\003" +
    "\000\002\101\010\000\002\101\006\000\002\100\005\000" +
    "\002\100\003\000\002\102\003\000\002\102\007\000\002" +
    "\102\005\000\002\102\004\000\002\102\005\000\002\102" +
    "\007\000\002\102\004\000\002\103\010\000\002\104\010" +
    "\000\002\104\007\000\002\104\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017f\000\022\002\uffff\045\005\061\uffff\063\uffff\074" +
    "\uffff\113\uffff\114\uffff\116\uffff\001\002\000\004\002\u0181" +
    "\001\002\000\146\002\uffff\003\uffff\004\uffff\005\uffff\006" +
    "\uffff\007\uffff\010\uffff\011\uffff\023\uffff\025\uffff\035\uffff" +
    "\042\uffff\045\005\046\uffff\047\uffff\060\uffff\061\uffff\063" +
    "\uffff\064\uffff\065\uffff\066\uffff\067\uffff\071\uffff\072\uffff" +
    "\073\uffff\074\uffff\100\uffff\101\uffff\102\uffff\103\uffff\104" +
    "\uffff\105\uffff\106\uffff\110\uffff\111\uffff\112\uffff\113\uffff" +
    "\114\uffff\115\uffff\116\uffff\117\uffff\122\uffff\123\uffff\124" +
    "\uffff\125\uffff\126\uffff\127\uffff\131\uffff\132\uffff\133\uffff" +
    "\001\002\000\020\002\ufffd\061\011\063\021\074\015\113" +
    "\016\114\022\116\007\001\002\000\004\074\u017d\001\002" +
    "\000\022\002\uff80\045\uff80\061\uff80\063\uff80\074\uff80\113" +
    "\uff80\114\uff80\116\uff80\001\002\000\004\005\330\001\002" +
    "\000\022\002\ufffb\045\ufffb\061\ufffb\063\ufffb\074\ufffb\113" +
    "\ufffb\114\ufffb\116\ufffb\001\002\000\022\002\uff7e\045\uff7e" +
    "\061\uff7e\063\uff7e\074\uff7e\113\uff7e\114\uff7e\116\uff7e\001" +
    "\002\000\022\002\uff7f\045\uff7f\061\uff7f\063\uff7f\074\uff7f" +
    "\113\uff7f\114\uff7f\116\uff7f\001\002\000\004\005\201\001" +
    "\002\000\004\005\322\001\002\000\022\002\uffff\045\005" +
    "\061\uffff\063\uffff\074\uffff\113\uffff\114\uffff\116\uffff\001" +
    "\002\000\022\002\uff7d\045\uff7d\061\uff7d\063\uff7d\074\uff7d" +
    "\113\uff7d\114\uff7d\116\uff7d\001\002\000\004\005\201\001" +
    "\002\000\004\045\024\001\002\000\022\002\ufffc\045\ufffc" +
    "\061\ufffc\063\ufffc\074\ufffc\113\ufffc\114\ufffc\116\ufffc\001" +
    "\002\000\012\005\uffff\045\005\115\uffff\116\uffff\001\002" +
    "\000\004\115\176\001\002\000\010\005\031\115\uff79\116" +
    "\030\001\002\000\012\005\uffff\045\005\115\uffff\116\uffff" +
    "\001\002\000\004\005\031\001\002\000\064\005\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\021\uffd5" +
    "\022\uffd5\024\uffd5\025\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\036\uffd5\040\uffd5\041\uffd5\043\uffd5" +
    "\045\uffd5\077\162\130\uffd5\134\uffd5\001\002\000\004\005" +
    "\033\001\002\000\006\020\034\045\035\001\002\000\034" +
    "\004\063\005\043\006\053\007\044\010\050\011\060\023" +
    "\040\025\061\035\065\063\046\105\062\106\064\110\052" +
    "\001\002\000\012\005\uff76\045\uff76\115\uff76\116\uff76\001" +
    "\002\000\060\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf" +
    "\017\uffaf\021\uffaf\022\uffaf\024\uffaf\025\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\036\uffaf\040\uffaf" +
    "\041\uffaf\043\uffaf\045\uffaf\130\uffaf\134\uffaf\001\002\000" +
    "\060\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad" +
    "\021\uffad\022\uffad\024\uffad\025\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\033\uffad\034\uffad\036\uffad\040\uffad\041\uffad" +
    "\043\uffad\045\uffad\130\uffad\134\uffad\001\002\000\034\004" +
    "\063\005\043\006\053\007\044\010\050\011\060\023\040" +
    "\025\061\035\065\063\046\105\062\106\064\110\052\001" +
    "\002\000\060\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a" +
    "\017\uff9a\021\uff9a\022\uff9a\024\uff9a\025\uff9a\027\uff9a\030" +
    "\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\036\uff9a\040\uff9a" +
    "\041\uff9a\043\uff9a\045\uff9a\130\uff9a\134\uff9a\001\002\000" +
    "\060\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\021\uffae\022\uffae\024\uffae\025\uffae\027\uffae\030\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\036\uffae\040\uffae\041\uffae" +
    "\043\uffae\045\uffae\130\uffae\134\uffae\001\002\000\066\012" +
    "\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\035\153\036\uffb5\037\151" +
    "\040\uffb5\041\uffb5\043\uffb5\045\uffb5\130\uffb5\134\uffb5\001" +
    "\002\000\060\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\021\uff9c\022\uff9c\024\uff9c\025\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\036\uff9c\040\uff9c" +
    "\041\uff9c\043\uff9c\045\uff9c\130\uff9c\134\uff9c\001\002\000" +
    "\060\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac" +
    "\021\uffac\022\uffac\024\uffac\025\uffac\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\034\uffac\036\uffac\040\uffac\041\uffac" +
    "\043\uffac\045\uffac\130\uffac\134\uffac\001\002\000\004\005" +
    "\150\001\002\000\060\012\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\021\uffaa\022\uffaa\024\uffaa\025\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\036\uffaa" +
    "\040\uffaa\041\uffaa\043\uffaa\045\uffaa\130\uffaa\134\uffaa\001" +
    "\002\000\060\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0" +
    "\017\uffa0\021\uffa0\022\uffa0\024\uffa0\025\uffa0\027\uffa0\030" +
    "\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\036\uffa0\040\uffa0" +
    "\041\uffa0\043\uffa0\045\uffa0\130\uffa0\134\uffa0\001\002\000" +
    "\046\012\107\013\105\014\077\015\072\016\075\017\070" +
    "\021\067\022\073\024\071\025\102\027\100\030\101\031" +
    "\104\032\110\033\074\034\103\045\147\134\076\001\002" +
    "\000\060\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017" +
    "\uff9e\021\uff9e\022\uff9e\024\uff9e\025\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\033\uff9e\034\uff9e\036\uff9e\040\uff9e\041" +
    "\uff9e\043\uff9e\045\uff9e\130\uff9e\134\uff9e\001\002\000\060" +
    "\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\021" +
    "\uffa2\022\uffa2\024\uffa2\025\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\036\uffa2\040\uffa2\041\uffa2\043" +
    "\uffa2\045\uffa2\130\uffa2\134\uffa2\001\002\000\060\012\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\021\uffb0\022" +
    "\uffb0\024\uffb0\025\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\036\uffb0\040\uffb0\041\uffb0\043\uffb0\045" +
    "\uffb0\130\uffb0\134\uffb0\001\002\000\060\012\uff9b\013\uff9b" +
    "\014\uff9b\015\uff9b\016\uff9b\017\uff9b\021\uff9b\022\uff9b\024" +
    "\uff9b\025\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b" +
    "\034\uff9b\036\uff9b\040\uff9b\041\uff9b\043\uff9b\045\uff9b\130" +
    "\uff9b\134\uff9b\001\002\000\060\012\uffab\013\uffab\014\uffab" +
    "\015\uffab\016\uffab\017\uffab\021\uffab\022\uffab\024\uffab\025" +
    "\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab" +
    "\036\uffab\040\uffab\041\uffab\043\uffab\045\uffab\130\uffab\134" +
    "\uffab\001\002\000\060\012\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\021\uffa9\022\uffa9\024\uffa9\025\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\036\uffa9" +
    "\040\uffa9\041\uffa9\043\uffa9\045\uffa9\130\uffa9\134\uffa9\001" +
    "\002\000\060\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f" +
    "\017\uff9f\021\uff9f\022\uff9f\024\uff9f\025\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\036\uff9f\040\uff9f" +
    "\041\uff9f\043\uff9f\045\uff9f\130\uff9f\134\uff9f\001\002\000" +
    "\034\004\063\005\043\006\053\007\044\010\050\011\060" +
    "\023\040\025\061\035\065\063\046\105\062\106\064\110" +
    "\052\001\002\000\004\005\142\001\002\000\060\012\uffa4" +
    "\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\021\uffa4\022" +
    "\uffa4\024\uffa4\025\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\036\uffa4\040\uffa4\041\uffa4\043\uffa4\045" +
    "\uffa4\130\uffa4\134\uffa4\001\002\000\060\012\uffa3\013\uffa3" +
    "\014\uffa3\015\uffa3\016\uffa3\017\uffa3\021\uffa3\022\uffa3\024" +
    "\uffa3\025\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3" +
    "\034\uffa3\036\uffa3\040\uffa3\041\uffa3\043\uffa3\045\uffa3\130" +
    "\uffa3\134\uffa3\001\002\000\034\004\063\005\043\006\053" +
    "\007\044\010\050\011\060\023\040\025\061\035\065\063" +
    "\046\105\062\106\064\110\052\001\002\000\046\012\107" +
    "\013\105\014\077\015\072\016\075\017\070\021\067\022" +
    "\073\024\071\025\102\027\100\030\101\031\104\032\110" +
    "\033\074\034\103\036\106\134\076\001\002\000\034\004" +
    "\063\005\043\006\053\007\044\010\050\011\060\023\040" +
    "\025\061\035\065\063\046\105\062\106\064\110\052\001" +
    "\002\000\034\004\063\005\043\006\053\007\044\010\050" +
    "\011\060\023\040\025\061\035\065\063\046\105\062\106" +
    "\064\110\052\001\002\000\034\004\063\005\043\006\053" +
    "\007\044\010\050\011\060\023\040\025\061\035\065\063" +
    "\046\105\062\106\064\110\052\001\002\000\034\004\063" +
    "\005\043\006\053\007\044\010\050\011\060\023\040\025" +
    "\061\035\065\063\046\105\062\106\064\110\052\001\002" +
    "\000\034\004\063\005\043\006\053\007\044\010\050\011" +
    "\060\023\040\025\061\035\065\063\046\105\062\106\064" +
    "\110\052\001\002\000\034\004\063\005\043\006\053\007" +
    "\044\010\050\011\060\023\040\025\061\035\065\063\046" +
    "\105\062\106\064\110\052\001\002\000\034\004\063\005" +
    "\043\006\053\007\044\010\050\011\060\023\040\025\061" +
    "\035\065\063\046\105\062\106\064\110\052\001\002\000" +
    "\004\005\031\001\002\000\034\004\063\005\043\006\053" +
    "\007\044\010\050\011\060\023\040\025\061\035\065\063" +
    "\046\105\062\106\064\110\052\001\002\000\034\004\063" +
    "\005\043\006\053\007\044\010\050\011\060\023\040\025" +
    "\061\035\065\063\046\105\062\106\064\110\052\001\002" +
    "\000\034\004\063\005\043\006\053\007\044\010\050\011" +
    "\060\023\040\025\061\035\065\063\046\105\062\106\064" +
    "\110\052\001\002\000\034\004\063\005\043\006\053\007" +
    "\044\010\050\011\060\023\040\025\061\035\065\063\046" +
    "\105\062\106\064\110\052\001\002\000\004\005\115\001" +
    "\002\000\034\004\063\005\043\006\053\007\044\010\050" +
    "\011\060\023\040\025\061\035\065\063\046\105\062\106" +
    "\064\110\052\001\002\000\034\004\063\005\043\006\053" +
    "\007\044\010\050\011\060\023\040\025\061\035\065\063" +
    "\046\105\062\106\064\110\052\001\002\000\060\012\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\021\uffa1\022" +
    "\uffa1\024\uffa1\025\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1" +
    "\033\uffa1\034\uffa1\036\uffa1\040\uffa1\041\uffa1\043\uffa1\045" +
    "\uffa1\130\uffa1\134\uffa1\001\002\000\034\004\063\005\043" +
    "\006\053\007\044\010\050\011\060\023\040\025\061\035" +
    "\065\063\046\105\062\106\064\110\052\001\002\000\034" +
    "\004\063\005\043\006\053\007\044\010\050\011\060\023" +
    "\040\025\061\035\065\063\046\105\062\106\064\110\052" +
    "\001\002\000\060\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016" +
    "\uff8b\017\uff8b\021\uff8b\022\uff8b\024\uff8b\025\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\103\036\uff8b\040" +
    "\uff8b\041\uff8b\043\uff8b\045\uff8b\130\uff8b\134\076\001\002" +
    "\000\044\021\uff89\022\uff89\024\071\025\102\027\100\030" +
    "\101\031\104\032\110\033\074\034\103\036\uff89\040\uff89" +
    "\041\uff89\043\uff89\045\uff89\130\uff89\134\076\001\002\000" +
    "\044\021\uff88\022\uff88\024\071\025\102\027\100\030\101" +
    "\031\104\032\110\033\074\034\103\036\uff88\040\uff88\041" +
    "\uff88\043\uff88\045\uff88\130\uff88\134\076\001\002\000\060" +
    "\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\021" +
    "\uff8c\022\uff8c\024\uff8c\025\uff8c\027\uff8c\030\uff8c\031\uff8c" +
    "\032\uff8c\033\uff8c\034\103\036\uff8c\040\uff8c\041\uff8c\043" +
    "\uff8c\045\uff8c\130\uff8c\134\076\001\002\000\062\012\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\021\uffa7\022" +
    "\uffa7\024\uffa7\025\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\035\116\036\uffa7\040\uffa7\041\uffa7\043" +
    "\uffa7\045\uffa7\130\uffa7\134\uffa7\001\002\000\036\004\063" +
    "\005\043\006\053\007\044\010\050\011\060\023\040\025" +
    "\061\035\065\036\uff95\063\046\105\062\106\064\110\052" +
    "\001\002\000\050\012\107\013\105\014\077\015\072\016" +
    "\075\017\070\021\067\022\073\024\071\025\102\027\100" +
    "\030\101\031\104\032\110\033\074\034\103\036\uff93\043" +
    "\123\134\076\001\002\000\004\036\121\001\002\000\060" +
    "\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\021" +
    "\uffa5\022\uffa5\024\uffa5\025\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\036\uffa5\040\uffa5\041\uffa5\043" +
    "\uffa5\045\uffa5\130\uffa5\134\uffa5\001\002\000\004\036\uff96" +
    "\001\002\000\034\004\063\005\043\006\053\007\044\010" +
    "\050\011\060\023\040\025\061\035\065\063\046\105\062" +
    "\106\064\110\052\001\002\000\050\012\107\013\105\014" +
    "\077\015\072\016\075\017\070\021\067\022\073\024\071" +
    "\025\102\027\100\030\101\031\104\032\110\033\074\034" +
    "\103\036\uff93\043\123\134\076\001\002\000\004\036\uff94" +
    "\001\002\000\060\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016" +
    "\uff8f\017\uff8f\021\uff8f\022\uff8f\024\uff8f\025\uff8f\027\100" +
    "\030\101\031\104\032\110\033\074\034\103\036\uff8f\040" +
    "\uff8f\041\uff8f\043\uff8f\045\uff8f\130\uff8f\134\076\001\002" +
    "\000\060\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017" +
    "\uff8d\021\uff8d\022\uff8d\024\uff8d\025\uff8d\027\uff8d\030\uff8d" +
    "\031\uff8d\032\uff8d\033\uff8d\034\103\036\uff8d\040\uff8d\041" +
    "\uff8d\043\uff8d\045\uff8d\130\uff8d\134\076\001\002\000\060" +
    "\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\021" +
    "\uff8e\022\uff8e\024\uff8e\025\uff8e\027\uff8e\030\uff8e\031\uff8e" +
    "\032\uff8e\033\uff8e\034\103\036\uff8e\040\uff8e\041\uff8e\043" +
    "\uff8e\045\uff8e\130\uff8e\134\076\001\002\000\044\021\uff87" +
    "\022\uff87\024\071\025\102\027\100\030\101\031\104\032" +
    "\110\033\074\034\103\036\uff87\040\uff87\041\uff87\043\uff87" +
    "\045\uff87\130\uff87\134\076\001\002\000\060\012\uffa8\013" +
    "\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\021\uffa8\022\uffa8" +
    "\024\uffa8\025\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\036\uffa8\040\uffa8\041\uffa8\043\uffa8\045\uffa8" +
    "\130\uffa8\134\uffa8\001\002\000\044\021\uff85\022\uff85\024" +
    "\071\025\102\027\100\030\101\031\104\032\110\033\074" +
    "\034\103\036\uff85\040\uff85\041\uff85\043\uff85\045\uff85\130" +
    "\uff85\134\076\001\002\000\060\012\uff8a\013\uff8a\014\uff8a" +
    "\015\uff8a\016\uff8a\017\uff8a\021\uff8a\022\uff8a\024\uff8a\025" +
    "\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\103" +
    "\036\uff8a\040\uff8a\041\uff8a\043\uff8a\045\uff8a\130\uff8a\134" +
    "\076\001\002\000\060\012\107\013\105\014\077\015\072" +
    "\016\075\017\070\021\067\022\uff92\024\071\025\102\027" +
    "\100\030\101\031\104\032\110\033\074\034\103\036\uff92" +
    "\040\uff92\041\uff92\043\uff92\045\uff92\130\uff92\134\076\001" +
    "\002\000\044\021\uff84\022\uff84\024\071\025\102\027\100" +
    "\030\101\031\104\032\110\033\074\034\103\036\uff84\040" +
    "\uff84\041\uff84\043\uff84\045\uff84\130\uff84\134\076\001\002" +
    "\000\060\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017" +
    "\uff90\021\uff90\022\uff90\024\uff90\025\uff90\027\100\030\101" +
    "\031\104\032\110\033\074\034\103\036\uff90\040\uff90\041" +
    "\uff90\043\uff90\045\uff90\130\uff90\134\076\001\002\000\044" +
    "\021\uff86\022\uff86\024\071\025\102\027\100\030\101\031" +
    "\104\032\110\033\074\034\103\036\uff86\040\uff86\041\uff86" +
    "\043\uff86\045\uff86\130\uff86\134\076\001\002\000\060\012" +
    "\107\013\105\014\077\015\072\016\075\017\070\021\uff91" +
    "\022\uff91\024\071\025\102\027\100\030\101\031\104\032" +
    "\110\033\074\034\103\036\uff91\040\uff91\041\uff91\043\uff91" +
    "\045\uff91\130\uff91\134\076\001\002\000\004\035\143\001" +
    "\002\000\036\004\063\005\043\006\053\007\044\010\050" +
    "\011\060\023\040\025\061\035\065\036\uff95\063\046\105" +
    "\062\106\064\110\052\001\002\000\004\036\145\001\002" +
    "\000\060\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017" +
    "\uff99\021\uff99\022\uff99\024\uff99\025\uff99\027\uff99\030\uff99" +
    "\031\uff99\032\uff99\033\uff99\034\uff99\036\uff99\040\uff99\041" +
    "\uff99\043\uff99\045\uff99\130\uff99\134\uff99\001\002\000\060" +
    "\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82\021" +
    "\uff82\022\uff82\024\uff82\025\uff82\027\100\030\101\031\104" +
    "\032\110\033\074\034\103\036\uff82\040\uff82\041\uff82\043" +
    "\uff82\045\uff82\130\uff82\134\076\001\002\000\012\005\uff77" +
    "\045\uff77\115\uff77\116\uff77\001\002\000\060\012\uff9d\013" +
    "\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\021\uff9d\022\uff9d" +
    "\024\uff9d\025\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\036\uff9d\040\uff9d\041\uff9d\043\uff9d\045\uff9d" +
    "\130\uff9d\134\uff9d\001\002\000\034\004\063\005\043\006" +
    "\053\007\044\010\050\011\060\023\040\025\061\035\065" +
    "\063\046\105\062\106\064\110\052\001\002\000\062\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\034\uffb4\036\uffb4\040\uffb4\041\uffb4" +
    "\043\uffb4\045\uffb4\130\uffb4\134\uffb4\001\002\000\036\004" +
    "\063\005\043\006\053\007\044\010\050\011\060\023\040" +
    "\025\061\035\065\036\uff95\063\046\105\062\106\064\110" +
    "\052\001\002\000\004\036\155\001\002\000\106\012\uff81" +
    "\013\uff81\014\uff81\015\uff81\016\uff81\017\uff81\021\uff81\022" +
    "\uff81\024\uff81\025\uff81\027\uff81\030\uff81\031\uff81\032\uff81" +
    "\033\uff81\034\uff81\036\uff81\040\uff81\041\uff81\043\uff81\045" +
    "\uff81\100\uff81\101\uff81\103\uff81\117\uff81\123\uff81\124\uff81" +
    "\125\uff81\126\uff81\127\uff81\130\uff81\131\uff81\132\uff81\134" +
    "\uff81\001\002\000\046\012\107\013\105\014\077\015\072" +
    "\016\075\017\070\021\067\022\073\024\071\025\102\027" +
    "\100\030\101\031\104\032\110\033\074\034\103\040\157" +
    "\134\076\001\002\000\064\012\uff97\013\uff97\014\uff97\015" +
    "\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\024\uff97" +
    "\025\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034" +
    "\uff97\036\uff97\037\151\040\uff97\041\uff97\043\uff97\045\uff97" +
    "\130\uff97\134\uff97\001\002\000\062\012\uff98\013\uff98\014" +
    "\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98" +
    "\024\uff98\025\uff98\027\uff98\030\uff98\031\uff98\032\uff98\033" +
    "\uff98\034\uff98\036\uff98\040\uff98\041\uff98\043\uff98\045\uff98" +
    "\130\uff98\134\uff98\001\002\000\060\012\107\013\105\014" +
    "\077\015\072\016\075\017\070\021\uff83\022\uff83\024\071" +
    "\025\102\027\100\030\101\031\104\032\110\033\074\034" +
    "\103\036\uff83\040\uff83\041\uff83\043\uff83\045\uff83\130\uff83" +
    "\134\076\001\002\000\064\005\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\024\uffd2" +
    "\025\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\036\uffd2\037\163\040\uffd2\041\uffd2\043\uffd2\045\uffd2" +
    "\130\uffd2\134\uffd2\001\002\000\034\004\063\005\043\006" +
    "\053\007\044\010\050\011\060\023\040\025\061\035\065" +
    "\063\046\105\062\106\064\110\052\001\002\000\062\005" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\021\uffd4\022\uffd4\024\uffd4\025\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\036\uffd4\040\uffd4\041\uffd4" +
    "\043\uffd4\045\uffd4\130\uffd4\134\uffd4\001\002\000\046\012" +
    "\107\013\105\014\077\015\072\016\075\017\070\021\067" +
    "\022\073\024\071\025\102\027\100\030\101\031\104\032" +
    "\110\033\074\034\103\040\166\134\076\001\002\000\064" +
    "\005\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\021\uffd2\022\uffd2\024\uffd2\025\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\036\uffd2\037\163\040" +
    "\uffd2\041\uffd2\043\uffd2\045\uffd2\130\uffd2\134\uffd2\001\002" +
    "\000\062\005\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\021\uffd3\022\uffd3\024\uffd3\025\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\036\uffd3\040" +
    "\uffd3\041\uffd3\043\uffd3\045\uffd3\130\uffd3\134\uffd3\001\002" +
    "\000\004\005\171\001\002\000\004\020\172\001\002\000" +
    "\034\004\063\005\043\006\053\007\044\010\050\011\060" +
    "\023\040\025\061\035\065\063\046\105\062\106\064\110" +
    "\052\001\002\000\046\012\107\013\105\014\077\015\072" +
    "\016\075\017\070\021\067\022\073\024\071\025\102\027" +
    "\100\030\101\031\104\032\110\033\074\034\103\045\174" +
    "\134\076\001\002\000\012\005\uff78\045\uff78\115\uff78\116" +
    "\uff78\001\002\000\004\115\uff7a\001\002\000\004\045\177" +
    "\001\002\000\022\002\uff7b\045\uff7b\061\uff7b\063\uff7b\074" +
    "\uff7b\113\uff7b\114\uff7b\116\uff7b\001\002\000\004\045\217" +
    "\001\002\000\004\120\202\001\002\000\006\005\031\121" +
    "\204\001\002\000\004\062\214\001\002\000\004\062\uff70" +
    "\001\002\000\004\005\213\001\002\000\006\043\207\062" +
    "\uffd7\001\002\000\004\005\031\001\002\000\004\062\uff6f" +
    "\001\002\000\010\036\uffd7\043\207\062\uffd7\001\002\000" +
    "\006\036\uffd8\062\uffd8\001\002\000\010\036\uffd6\043\uffd6" +
    "\062\uffd6\001\002\000\006\005\031\121\215\001\002\000" +
    "\004\045\uff71\001\002\000\004\045\uff72\001\002\000\024" +
    "\045\005\100\uffff\103\uffff\117\uffff\122\uffff\123\uffff\125" +
    "\uffff\126\uffff\127\uffff\001\002\000\022\045\005\100\uffff" +
    "\103\uffff\117\uffff\123\uffff\125\uffff\126\uffff\127\uffff\001" +
    "\002\000\024\045\uff6d\100\uff6d\103\uff6d\117\uff6d\122\223" +
    "\123\uff6d\125\uff6d\126\uff6d\127\uff6d\001\002\000\024\045" +
    "\005\100\uffff\103\uffff\117\uffff\122\uffff\123\uffff\125\uffff" +
    "\126\uffff\127\uffff\001\002\000\004\005\031\001\002\000" +
    "\004\005\225\001\002\000\006\020\226\045\227\001\002" +
    "\000\034\004\063\005\043\006\053\007\044\010\050\011" +
    "\060\023\040\025\061\035\065\063\046\105\062\106\064" +
    "\110\052\001\002\000\024\045\uff6b\100\uff6b\103\uff6b\117" +
    "\uff6b\122\uff6b\123\uff6b\125\uff6b\126\uff6b\127\uff6b\001\002" +
    "\000\046\012\107\013\105\014\077\015\072\016\075\017" +
    "\070\021\067\022\073\024\071\025\102\027\100\030\101" +
    "\031\104\032\110\033\074\034\103\045\231\134\076\001" +
    "\002\000\024\045\uff6c\100\uff6c\103\uff6c\117\uff6c\122\uff6c" +
    "\123\uff6c\125\uff6c\126\uff6c\127\uff6c\001\002\000\022\045" +
    "\uff6e\100\uff6e\103\uff6e\117\uff6e\123\uff6e\125\uff6e\126\uff6e" +
    "\127\uff6e\001\002\000\030\100\245\101\uff69\103\241\117" +
    "\uff69\123\242\124\uff69\125\237\126\243\127\246\131\uff69" +
    "\132\uff69\001\002\000\004\117\235\001\002\000\004\045" +
    "\236\001\002\000\022\002\uff73\045\uff73\061\uff73\063\uff73" +
    "\074\uff73\113\uff73\114\uff73\116\uff73\001\002\000\034\004" +
    "\063\005\043\006\053\007\044\010\050\011\060\023\040" +
    "\025\061\035\065\063\046\105\062\106\064\110\052\001" +
    "\002\000\032\045\005\100\uffff\101\uffff\103\uffff\117\uffff" +
    "\123\uffff\124\uffff\125\uffff\126\uffff\127\uffff\131\uffff\132" +
    "\uffff\001\002\000\036\004\063\005\043\006\053\007\044" +
    "\010\050\011\060\023\040\025\061\035\065\045\314\063" +
    "\046\105\062\106\064\110\052\001\002\000\004\045\307" +
    "\001\002\000\034\004\063\005\043\006\053\007\044\010" +
    "\050\011\060\023\040\025\061\035\065\063\046\105\062" +
    "\106\064\110\052\001\002\000\032\045\uff68\100\uff68\101" +
    "\uff68\103\uff68\117\uff68\123\uff68\124\uff68\125\uff68\126\uff68" +
    "\127\uff68\131\uff68\132\uff68\001\002\000\034\004\063\005" +
    "\043\006\053\007\044\010\050\011\060\023\040\025\061" +
    "\035\065\063\046\105\062\106\064\110\052\001\002\000" +
    "\004\005\250\001\002\000\032\045\uff62\100\uff62\101\uff62" +
    "\103\uff62\117\uff62\123\uff62\124\uff62\125\uff62\126\uff62\127" +
    "\uff62\131\uff62\132\uff62\001\002\000\004\035\153\001\002" +
    "\000\046\012\107\013\105\014\077\015\072\016\075\017" +
    "\070\021\067\022\073\024\071\025\102\027\100\030\101" +
    "\031\104\032\110\033\074\034\103\130\252\134\076\001" +
    "\002\000\004\045\253\001\002\000\026\045\005\100\uffff" +
    "\101\uffff\103\uffff\123\uffff\125\uffff\126\uffff\127\uffff\131" +
    "\uffff\132\uffff\001\002\000\010\101\256\131\255\132\260" +
    "\001\002\000\034\004\063\005\043\006\053\007\044\010" +
    "\050\011\060\023\040\025\061\035\065\063\046\105\062" +
    "\106\064\110\052\001\002\000\004\045\262\001\002\000" +
    "\032\045\uff61\100\uff61\101\uff61\103\uff61\117\uff61\123\uff61" +
    "\124\uff61\125\uff61\126\uff61\127\uff61\131\uff61\132\uff61\001" +
    "\002\000\004\045\261\001\002\000\032\045\uff5e\100\uff5e" +
    "\101\uff5e\103\uff5e\117\uff5e\123\uff5e\124\uff5e\125\uff5e\126" +
    "\uff5e\127\uff5e\131\uff5e\132\uff5e\001\002\000\022\045\005" +
    "\100\uffff\103\uffff\123\uffff\125\uffff\126\uffff\127\uffff\132" +
    "\uffff\001\002\000\004\132\264\001\002\000\004\045\265" +
    "\001\002\000\032\045\uff5f\100\uff5f\101\uff5f\103\uff5f\117" +
    "\uff5f\123\uff5f\124\uff5f\125\uff5f\126\uff5f\127\uff5f\131\uff5f" +
    "\132\uff5f\001\002\000\046\012\107\013\105\014\077\015" +
    "\072\016\075\017\070\021\067\022\073\024\071\025\102" +
    "\027\100\030\101\031\104\032\110\033\074\034\103\130" +
    "\267\134\076\001\002\000\004\045\270\001\002\000\026" +
    "\045\005\100\uffff\101\uffff\103\uffff\123\uffff\125\uffff\126" +
    "\uffff\127\uffff\131\uffff\132\uffff\001\002\000\010\101\256" +
    "\131\255\132\260\001\002\000\032\045\uff60\100\uff60\101" +
    "\uff60\103\uff60\117\uff60\123\uff60\124\uff60\125\uff60\126\uff60" +
    "\127\uff60\131\uff60\132\uff60\001\002\000\004\020\uffb8\001" +
    "\002\000\004\020\304\001\002\000\046\012\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uffb6\021\uff9a\022" +
    "\uff9a\024\uff9a\025\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a" +
    "\033\uff9a\034\uff9a\134\uff9a\001\002\000\046\012\uffae\013" +
    "\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffb9\021\uffae" +
    "\022\uffae\024\uffae\025\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\134\uffae\001\002\000\044\012\107" +
    "\013\105\014\077\015\072\016\075\017\070\021\067\022" +
    "\073\024\071\025\102\027\100\030\101\031\104\032\110" +
    "\033\074\034\301\134\076\001\002\000\046\012\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uffb7\021\uff9b" +
    "\022\uff9b\024\uff9b\025\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\033\uff9b\034\uff9b\134\uff9b\001\002\000\004\005\302" +
    "\001\002\000\052\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\024\uffa7\025\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035" +
    "\116\037\151\134\uffa7\001\002\000\004\020\uffa6\001\002" +
    "\000\034\004\063\005\043\006\053\007\044\010\050\011" +
    "\060\023\040\025\061\035\065\063\046\105\062\106\064" +
    "\110\052\001\002\000\046\012\107\013\105\014\077\015" +
    "\072\016\075\017\070\021\067\022\073\024\071\025\102" +
    "\027\100\030\101\031\104\032\110\033\074\034\103\045" +
    "\306\134\076\001\002\000\032\045\uff63\100\uff63\101\uff63" +
    "\103\uff63\117\uff63\123\uff63\124\uff63\125\uff63\126\uff63\127" +
    "\uff63\131\uff63\132\uff63\001\002\000\022\045\005\100\uffff" +
    "\103\uffff\123\uffff\124\uffff\125\uffff\126\uffff\127\uffff\001" +
    "\002\000\004\124\311\001\002\000\004\045\312\001\002" +
    "\000\032\045\uff67\100\uff67\101\uff67\103\uff67\117\uff67\123" +
    "\uff67\124\uff67\125\uff67\126\uff67\127\uff67\131\uff67\132\uff67" +
    "\001\002\000\046\012\107\013\105\014\077\015\072\016" +
    "\075\017\070\021\067\022\073\024\071\025\102\027\100" +
    "\030\101\031\104\032\110\033\074\034\103\045\315\134" +
    "\076\001\002\000\032\045\uff65\100\uff65\101\uff65\103\uff65" +
    "\117\uff65\123\uff65\124\uff65\125\uff65\126\uff65\127\uff65\131" +
    "\uff65\132\uff65\001\002\000\032\045\uff64\100\uff64\101\uff64" +
    "\103\uff64\117\uff64\123\uff64\124\uff64\125\uff64\126\uff64\127" +
    "\uff64\131\uff64\132\uff64\001\002\000\014\101\uff6a\117\uff6a" +
    "\124\uff6a\131\uff6a\132\uff6a\001\002\000\046\012\107\013" +
    "\105\014\077\015\072\016\075\017\070\021\067\022\073" +
    "\024\071\025\102\027\100\030\101\031\104\032\110\033" +
    "\074\034\103\045\320\134\076\001\002\000\032\045\uff66" +
    "\100\uff66\101\uff66\103\uff66\117\uff66\123\uff66\124\uff66\125" +
    "\uff66\126\uff66\127\uff66\131\uff66\132\uff66\001\002\000\004" +
    "\002\ufffe\001\002\000\004\107\323\001\002\000\004\005" +
    "\031\001\002\000\004\045\325\001\002\000\022\002\uff7c" +
    "\045\uff7c\061\uff7c\063\uff7c\074\uff7c\113\uff7c\114\uff7c\116" +
    "\uff7c\001\002\000\004\045\327\001\002\000\022\002\uff75" +
    "\045\uff75\061\uff75\063\uff75\074\uff75\113\uff75\114\uff75\116" +
    "\uff75\001\002\000\004\041\331\001\002\000\004\045\332" +
    "\001\002\000\036\005\uffff\042\uffff\045\005\046\uffff\060" +
    "\uffff\063\uffff\065\uffff\066\uffff\067\uffff\071\uffff\072\uffff" +
    "\073\uffff\074\uffff\104\uffff\001\002\000\036\005\ufff8\042" +
    "\ufff8\045\ufff8\046\ufff8\060\ufff8\063\ufff8\065\ufff8\066\ufff8" +
    "\067\ufff8\071\u0179\072\ufff8\073\ufff8\074\ufff8\104\ufff8\001" +
    "\002\000\034\005\uffff\042\uffff\045\005\046\uffff\060\uffff" +
    "\063\uffff\065\uffff\066\uffff\067\uffff\072\uffff\073\uffff\074" +
    "\uffff\104\uffff\001\002\000\032\005\uffe1\042\ufff5\046\uffe1" +
    "\060\341\063\uffe1\065\342\066\350\067\351\072\uffe1\073" +
    "\352\074\344\104\uffe1\001\002\000\004\042\337\001\002" +
    "\000\022\002\ufffa\045\ufffa\061\ufffa\063\ufffa\074\ufffa\113" +
    "\ufffa\114\ufffa\116\ufffa\001\002\000\034\005\uffed\042\uffed" +
    "\045\uffed\046\uffed\060\uffed\063\uffed\065\uffed\066\uffed\067" +
    "\uffed\072\uffed\073\uffed\074\uffed\104\uffed\001\002\000\030" +
    "\005\uffdd\046\uffdd\047\uffdd\060\uffdd\063\uffdd\065\uffdd\066" +
    "\uffdd\067\uffdd\072\uffdd\104\uffdd\111\uffdd\001\002\000\030" +
    "\005\uffe0\046\uffe0\047\uffe0\060\uffe0\063\uffe0\065\uffe0\066" +
    "\uffe0\067\uffe0\072\uffe0\104\uffe0\111\uffe0\001\002\000\034" +
    "\005\uffff\042\uffff\045\005\046\uffff\060\uffff\063\uffff\065" +
    "\uffff\066\uffff\067\uffff\072\uffff\073\uffff\074\uffff\104\uffff" +
    "\001\002\000\004\005\363\001\002\000\034\005\ufff1\042" +
    "\ufff1\045\ufff1\046\ufff1\060\ufff1\063\ufff1\065\ufff1\066\ufff1" +
    "\067\ufff1\072\ufff1\073\ufff1\074\ufff1\104\ufff1\001\002\000" +
    "\034\005\uffee\042\uffee\045\uffee\046\uffee\060\uffee\063\uffee" +
    "\065\uffee\066\uffee\067\uffee\072\uffee\073\uffee\074\uffee\104" +
    "\uffee\001\002\000\034\005\ufff2\042\ufff2\045\ufff2\046\ufff2" +
    "\060\ufff2\063\ufff2\065\ufff2\066\ufff2\067\ufff2\072\ufff2\073" +
    "\ufff2\074\ufff2\104\ufff2\001\002\000\030\005\uffde\046\uffde" +
    "\047\uffde\060\uffde\063\uffde\065\uffde\066\uffde\067\uffde\072" +
    "\uffde\104\uffde\111\uffde\001\002\000\030\005\uffdf\046\uffdf" +
    "\047\uffdf\060\uffdf\063\uffdf\065\uffdf\066\uffdf\067\uffdf\072" +
    "\uffdf\104\uffdf\111\uffdf\001\002\000\004\041\u0170\001\002" +
    "\000\030\005\uffe1\046\uffe1\047\uffe1\060\341\063\uffe1\065" +
    "\342\066\350\067\351\072\uffe1\104\uffe1\111\uffe1\001\002" +
    "\000\014\005\031\046\355\063\361\072\356\104\357\001" +
    "\002\000\004\005\u0169\001\002\000\004\005\u0164\001\002" +
    "\000\004\005\u0146\001\002\000\004\005\u0141\001\002\000" +
    "\004\005\363\001\002\000\004\041\373\001\002\000\004" +
    "\035\364\001\002\000\006\005\031\036\uffd9\001\002\000" +
    "\004\036\370\001\002\000\006\036\uffd7\043\207\001\002" +
    "\000\004\036\uffda\001\002\000\010\041\uffdb\045\uffdb\062" +
    "\371\001\002\000\004\005\031\001\002\000\006\041\uffdc" +
    "\045\uffdc\001\002\000\004\045\374\001\002\000\054\003" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\023\uffff\025\uffff\035\uffff\042\uffff\045\005\063\uffff\064" +
    "\uffff\100\uffff\102\uffff\103\uffff\105\uffff\106\uffff\110\uffff" +
    "\133\uffff\001\002\000\052\003\u0109\004\063\005\u0113\006" +
    "\053\007\044\010\050\011\060\023\040\025\061\035\065" +
    "\042\uffce\063\046\064\u0101\100\u0106\102\u010e\103\u0107\105" +
    "\062\106\064\110\052\133\u0105\001\002\000\004\042\377" +
    "\001\002\000\042\005\uffe3\042\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\060\uffe3\063\uffe3\065\uffe3\066\uffe3\067\uffe3\072\uffe3" +
    "\073\uffe3\074\uffe3\104\uffe3\111\uffe3\112\uffe3\001\002\000" +
    "\054\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\023\uffcb\025\uffcb\035\uffcb\042\uffcb\045\uffcb\063" +
    "\uffcb\064\uffcb\100\uffcb\102\uffcb\103\uffcb\105\uffcb\106\uffcb" +
    "\110\uffcb\133\uffcb\001\002\000\004\005\u0138\001\002\000" +
    "\054\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\023\uffca\025\uffca\035\uffca\042\uffca\045\uffca\063" +
    "\uffca\064\uffca\100\uffca\102\uffca\103\uffca\105\uffca\106\uffca" +
    "\110\uffca\133\uffca\001\002\000\054\003\uffc9\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\023\uffc9\025\uffc9" +
    "\035\uffc9\042\uffc9\045\uffc9\063\uffc9\064\uffc9\100\uffc9\102" +
    "\uffc9\103\uffc9\105\uffc9\106\uffc9\110\uffc9\133\uffc9\001\002" +
    "\000\046\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017" +
    "\uffab\021\uffab\022\uffab\024\uffab\025\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\045\u0137\134\uffab\001" +
    "\002\000\034\004\063\005\043\006\053\007\044\010\050" +
    "\011\060\023\040\025\061\035\065\063\046\105\062\106" +
    "\064\110\052\001\002\000\034\004\063\005\043\006\053" +
    "\007\044\010\050\011\060\023\040\025\061\035\065\063" +
    "\046\105\062\106\064\110\052\001\002\000\034\004\063" +
    "\005\043\006\053\007\044\010\050\011\060\023\040\025" +
    "\061\035\065\063\046\105\062\106\064\110\052\001\002" +
    "\000\054\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\023\uffcd\025\uffcd\035\uffcd\042\uffcd\045\uffcd" +
    "\063\uffcd\064\uffcd\100\uffcd\102\uffcd\103\uffcd\105\uffcd\106" +
    "\uffcd\110\uffcd\133\uffcd\001\002\000\004\045\u0125\001\002" +
    "\000\046\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017" +
    "\uffac\021\uffac\022\uffac\024\uffac\025\uffac\027\uffac\030\uffac" +
    "\031\uffac\032\uffac\033\uffac\034\uffac\045\u0124\134\uffac\001" +
    "\002\000\004\020\u0121\001\002\000\054\003\uffc7\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\023\uffc7\025" +
    "\uffc7\035\uffc7\042\uffc7\045\uffc7\063\uffc7\064\uffc7\100\uffc7" +
    "\102\uffc7\103\uffc7\105\uffc7\106\uffc7\110\uffc7\133\uffc7\001" +
    "\002\000\004\005\u011c\001\002\000\034\004\063\005\043" +
    "\006\053\007\044\010\050\011\060\023\040\025\061\035" +
    "\065\063\046\105\062\106\064\110\052\001\002\000\054" +
    "\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011" +
    "\uffff\023\uffff\025\uffff\035\uffff\042\uffff\045\005\063\uffff" +
    "\064\uffff\100\uffff\102\uffff\103\uffff\105\uffff\106\uffff\110" +
    "\uffff\133\uffff\001\002\000\046\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\016\uffad\017\uffad\021\uffad\022\uffad\024\uffad\025" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\045\u0114\134\uffad\001\002\000\054\003\uffc8\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\023\uffc8\025\uffc8" +
    "\035\uffc8\042\uffc8\045\uffc8\063\uffc8\064\uffc8\100\uffc8\102" +
    "\uffc8\103\uffc8\105\uffc8\106\uffc8\110\uffc8\133\uffc8\001\002" +
    "\000\054\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\023\uffcc\025\uffcc\035\uffcc\042\uffcc\045\uffcc" +
    "\063\uffcc\064\uffcc\100\uffcc\102\uffcc\103\uffcc\105\uffcc\106" +
    "\uffcc\110\uffcc\133\uffcc\001\002\000\056\005\uffd5\012\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\153\037\151\077\162\134" +
    "\uffb5\001\002\000\054\003\uffb3\004\uffb3\005\uffb3\006\uffb3" +
    "\007\uffb3\010\uffb3\011\uffb3\023\uffb3\025\uffb3\035\uffb3\042" +
    "\uffb3\045\uffb3\063\uffb3\064\uffb3\100\uffb3\102\uffb3\103\uffb3" +
    "\105\uffb3\106\uffb3\110\uffb3\133\uffb3\001\002\000\004\042" +
    "\uffcf\001\002\000\046\012\107\013\105\014\077\015\072" +
    "\016\075\017\070\021\067\022\073\024\071\025\102\027" +
    "\100\030\101\031\104\032\110\033\074\034\103\041\u0117" +
    "\134\076\001\002\000\004\045\u0118\001\002\000\054\003" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\023\uffff\025\uffff\035\uffff\042\uffff\045\005\063\uffff\064" +
    "\uffff\100\uffff\102\uffff\103\uffff\105\uffff\106\uffff\110\uffff" +
    "\133\uffff\001\002\000\004\042\u011a\001\002\000\004\045" +
    "\u011b\001\002\000\054\003\uffbf\004\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\011\uffbf\023\uffbf\025\uffbf\035\uffbf\042" +
    "\uffbf\045\uffbf\063\uffbf\064\uffbf\100\uffbf\102\uffbf\103\uffbf" +
    "\105\uffbf\106\uffbf\110\uffbf\133\uffbf\001\002\000\006\020" +
    "\u011d\045\u011e\001\002\000\034\004\063\005\043\006\053" +
    "\007\044\010\050\011\060\023\040\025\061\035\065\063" +
    "\046\105\062\106\064\110\052\001\002\000\054\003\uffbb" +
    "\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\023" +
    "\uffbb\025\uffbb\035\uffbb\042\uffbb\045\uffbb\063\uffbb\064\uffbb" +
    "\100\uffbb\102\uffbb\103\uffbb\105\uffbb\106\uffbb\110\uffbb\133" +
    "\uffbb\001\002\000\046\012\107\013\105\014\077\015\072" +
    "\016\075\017\070\021\067\022\073\024\071\025\102\027" +
    "\100\030\101\031\104\032\110\033\074\034\103\045\u0120" +
    "\134\076\001\002\000\054\003\uffbc\004\uffbc\005\uffbc\006" +
    "\uffbc\007\uffbc\010\uffbc\011\uffbc\023\uffbc\025\uffbc\035\uffbc" +
    "\042\uffbc\045\uffbc\063\uffbc\064\uffbc\100\uffbc\102\uffbc\103" +
    "\uffbc\105\uffbc\106\uffbc\110\uffbc\133\uffbc\001\002\000\034" +
    "\004\063\005\043\006\053\007\044\010\050\011\060\023" +
    "\040\025\061\035\065\063\046\105\062\106\064\110\052" +
    "\001\002\000\046\012\107\013\105\014\077\015\072\016" +
    "\075\017\070\021\067\022\073\024\071\025\102\027\100" +
    "\030\101\031\104\032\110\033\074\034\103\045\u0123\134" +
    "\076\001\002\000\054\003\uffba\004\uffba\005\uffba\006\uffba" +
    "\007\uffba\010\uffba\011\uffba\023\uffba\025\uffba\035\uffba\042" +
    "\uffba\045\uffba\063\uffba\064\uffba\100\uffba\102\uffba\103\uffba" +
    "\105\uffba\106\uffba\110\uffba\133\uffba\001\002\000\054\003" +
    "\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\023\uffb2\025\uffb2\035\uffb2\042\uffb2\045\uffb2\063\uffb2\064" +
    "\uffb2\100\uffb2\102\uffb2\103\uffb2\105\uffb2\106\uffb2\110\uffb2" +
    "\133\uffb2\001\002\000\054\003\uffc6\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\023\uffc6\025\uffc6\035\uffc6" +
    "\042\uffc6\045\uffc6\063\uffc6\064\uffc6\100\uffc6\102\uffc6\103" +
    "\uffc6\105\uffc6\106\uffc6\110\uffc6\133\uffc6\001\002\000\046" +
    "\012\107\013\105\014\077\015\072\016\075\017\070\021" +
    "\067\022\073\024\071\025\102\027\100\030\101\031\104" +
    "\032\110\033\074\034\103\045\u0127\134\076\001\002\000" +
    "\054\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\023\uffc4\025\uffc4\035\uffc4\042\uffc4\045\uffc4\063" +
    "\uffc4\064\uffc4\100\uffc4\102\uffc4\103\uffc4\105\uffc4\106\uffc4" +
    "\110\uffc4\133\uffc4\001\002\000\046\012\107\013\105\014" +
    "\077\015\072\016\075\017\070\021\067\022\073\024\071" +
    "\025\102\027\100\030\101\031\104\032\110\033\074\034" +
    "\103\041\u0129\134\076\001\002\000\004\045\u012a\001\002" +
    "\000\054\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010" +
    "\uffff\011\uffff\023\uffff\025\uffff\035\uffff\042\uffff\045\005" +
    "\063\uffff\064\uffff\100\uffff\102\uffff\103\uffff\105\uffff\106" +
    "\uffff\110\uffff\133\uffff\001\002\000\004\042\u012c\001\002" +
    "\000\006\045\u012d\101\u012e\001\002\000\054\003\uffc3\004" +
    "\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\023\uffc3" +
    "\025\uffc3\035\uffc3\042\uffc3\045\uffc3\063\uffc3\064\uffc3\100" +
    "\uffc3\102\uffc3\103\uffc3\105\uffc3\106\uffc3\110\uffc3\133\uffc3" +
    "\001\002\000\006\041\u012f\100\u0106\001\002\000\054\003" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\023\uffff\025\uffff\035\uffff\042\uffff\045\005\063\uffff\064" +
    "\uffff\100\uffff\102\uffff\103\uffff\105\uffff\106\uffff\110\uffff" +
    "\133\uffff\001\002\000\054\003\uffc2\004\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\023\uffc2\025\uffc2\035\uffc2" +
    "\042\uffc2\045\uffc2\063\uffc2\064\uffc2\100\uffc2\102\uffc2\103" +
    "\uffc2\105\uffc2\106\uffc2\110\uffc2\133\uffc2\001\002\000\054" +
    "\003\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\023\uffc1\025\uffc1\035\uffc1\042\uffc1\045\uffc1\063\uffc1" +
    "\064\uffc1\100\uffc1\102\uffc1\103\uffc1\105\uffc1\106\uffc1\110" +
    "\uffc1\133\uffc1\001\002\000\004\042\u0133\001\002\000\004" +
    "\045\u0134\001\002\000\054\003\uffc0\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\010\uffc0\011\uffc0\023\uffc0\025\uffc0\035\uffc0" +
    "\042\uffc0\045\uffc0\063\uffc0\064\uffc0\100\uffc0\102\uffc0\103" +
    "\uffc0\105\uffc0\106\uffc0\110\uffc0\133\uffc0\001\002\000\046" +
    "\012\107\013\105\014\077\015\072\016\075\017\070\021" +
    "\067\022\073\024\071\025\102\027\100\030\101\031\104" +
    "\032\110\033\074\034\103\045\u0136\134\076\001\002\000" +
    "\054\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\023\uffc5\025\uffc5\035\uffc5\042\uffc5\045\uffc5\063" +
    "\uffc5\064\uffc5\100\uffc5\102\uffc5\103\uffc5\105\uffc5\106\uffc5" +
    "\110\uffc5\133\uffc5\001\002\000\054\003\uffb1\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\023\uffb1\025\uffb1" +
    "\035\uffb1\042\uffb1\045\uffb1\063\uffb1\064\uffb1\100\uffb1\102" +
    "\uffb1\103\uffb1\105\uffb1\106\uffb1\110\uffb1\133\uffb1\001\002" +
    "\000\010\005\uffd5\020\u013e\077\162\001\002\000\004\005" +
    "\u013a\001\002\000\004\020\u013b\001\002\000\034\004\063" +
    "\005\043\006\053\007\044\010\050\011\060\023\040\025" +
    "\061\035\065\063\046\105\062\106\064\110\052\001\002" +
    "\000\046\012\107\013\105\014\077\015\072\016\075\017" +
    "\070\021\067\022\073\024\071\025\102\027\100\030\101" +
    "\031\104\032\110\033\074\034\103\045\u013d\134\076\001" +
    "\002\000\054\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\023\uffbd\025\uffbd\035\uffbd\042\uffbd\045" +
    "\uffbd\063\uffbd\064\uffbd\100\uffbd\102\uffbd\103\uffbd\105\uffbd" +
    "\106\uffbd\110\uffbd\133\uffbd\001\002\000\034\004\063\005" +
    "\043\006\053\007\044\010\050\011\060\023\040\025\061" +
    "\035\065\063\046\105\062\106\064\110\052\001\002\000" +
    "\046\012\107\013\105\014\077\015\072\016\075\017\070" +
    "\021\067\022\073\024\071\025\102\027\100\030\101\031" +
    "\104\032\110\033\074\034\103\045\u0140\134\076\001\002" +
    "\000\054\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\011\uffbe\023\uffbe\025\uffbe\035\uffbe\042\uffbe\045\uffbe" +
    "\063\uffbe\064\uffbe\100\uffbe\102\uffbe\103\uffbe\105\uffbe\106" +
    "\uffbe\110\uffbe\133\uffbe\001\002\000\006\020\u0142\045\u0143" +
    "\001\002\000\034\004\063\005\043\006\053\007\044\010" +
    "\050\011\060\023\040\025\061\035\065\063\046\105\062" +
    "\106\064\110\052\001\002\000\042\005\uffd0\042\uffd0\045" +
    "\uffd0\046\uffd0\047\uffd0\060\uffd0\063\uffd0\065\uffd0\066\uffd0" +
    "\067\uffd0\072\uffd0\073\uffd0\074\uffd0\104\uffd0\111\uffd0\112" +
    "\uffd0\001\002\000\046\012\107\013\105\014\077\015\072" +
    "\016\075\017\070\021\067\022\073\024\071\025\102\027" +
    "\100\030\101\031\104\032\110\033\074\034\103\045\u0145" +
    "\134\076\001\002\000\042\005\uffd1\042\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\060\uffd1\063\uffd1\065\uffd1\066\uffd1\067\uffd1" +
    "\072\uffd1\073\uffd1\074\uffd1\104\uffd1\111\uffd1\112\uffd1\001" +
    "\002\000\004\041\u0147\001\002\000\004\045\u0148\001\002" +
    "\000\030\005\uffff\042\uffff\045\005\047\uffff\060\uffff\063" +
    "\uffff\065\uffff\066\uffff\067\uffff\111\uffff\112\uffff\001\002" +
    "\000\004\042\u0162\001\002\000\026\005\uffe1\042\uffe9\047" +
    "\uffe1\060\341\063\uffe1\065\342\066\350\067\351\111\uffe1" +
    "\112\u014b\001\002\000\004\041\u015d\001\002\000\030\005" +
    "\uffe5\042\uffe5\045\uffe5\047\uffe5\060\uffe5\063\uffe5\065\uffe5" +
    "\066\uffe5\067\uffe5\111\uffe5\112\uffe5\001\002\000\030\005" +
    "\uffff\042\uffff\045\005\047\uffff\060\uffff\063\uffff\065\uffff" +
    "\066\uffff\067\uffff\111\uffff\112\uffff\001\002\000\030\005" +
    "\uffe4\042\uffe4\045\uffe4\047\uffe4\060\uffe4\063\uffe4\065\uffe4" +
    "\066\uffe4\067\uffe4\111\uffe4\112\uffe4\001\002\000\012\005" +
    "\031\047\u0151\063\361\111\u0150\001\002\000\004\035\u0154" +
    "\001\002\000\004\005\u0152\001\002\000\004\045\u0153\001" +
    "\002\000\030\005\uffe7\042\uffe7\045\uffe7\047\uffe7\060\uffe7" +
    "\063\uffe7\065\uffe7\066\uffe7\067\uffe7\111\uffe7\112\uffe7\001" +
    "\002\000\006\005\031\036\uffd9\001\002\000\004\036\u0156" +
    "\001\002\000\004\041\u0157\001\002\000\004\045\u0158\001" +
    "\002\000\054\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff" +
    "\010\uffff\011\uffff\023\uffff\025\uffff\035\uffff\042\uffff\045" +
    "\005\063\uffff\064\uffff\100\uffff\102\uffff\103\uffff\105\uffff" +
    "\106\uffff\110\uffff\133\uffff\001\002\000\004\042\u015a\001" +
    "\002\000\004\045\u015b\001\002\000\030\005\uffe8\042\uffe8" +
    "\045\uffe8\047\uffe8\060\uffe8\063\uffe8\065\uffe8\066\uffe8\067" +
    "\uffe8\111\uffe8\112\uffe8\001\002\000\004\042\uffea\001\002" +
    "\000\004\045\u015e\001\002\000\054\003\uffff\004\uffff\005" +
    "\uffff\006\uffff\007\uffff\010\uffff\011\uffff\023\uffff\025\uffff" +
    "\035\uffff\042\uffff\045\005\063\uffff\064\uffff\100\uffff\102" +
    "\uffff\103\uffff\105\uffff\106\uffff\110\uffff\133\uffff\001\002" +
    "\000\004\042\u0160\001\002\000\004\045\u0161\001\002\000" +
    "\030\005\uffe6\042\uffe6\045\uffe6\047\uffe6\060\uffe6\063\uffe6" +
    "\065\uffe6\066\uffe6\067\uffe6\111\uffe6\112\uffe6\001\002\000" +
    "\004\045\u0163\001\002\000\034\005\uffec\042\uffec\045\uffec" +
    "\046\uffec\060\uffec\063\uffec\065\uffec\066\uffec\067\uffec\072" +
    "\uffec\073\uffec\074\uffec\104\uffec\001\002\000\006\045\u0166" +
    "\107\u0165\001\002\000\004\005\031\001\002\000\034\005" +
    "\ufff3\042\ufff3\045\ufff3\046\ufff3\060\ufff3\063\ufff3\065\ufff3" +
    "\066\ufff3\067\ufff3\072\ufff3\073\ufff3\074\ufff3\104\ufff3\001" +
    "\002\000\004\045\u0168\001\002\000\034\005\ufff4\042\ufff4" +
    "\045\ufff4\046\ufff4\060\ufff4\063\ufff4\065\ufff4\066\ufff4\067" +
    "\ufff4\072\ufff4\073\ufff4\074\ufff4\104\ufff4\001\002\000\004" +
    "\041\u016a\001\002\000\004\045\u016b\001\002\000\030\005" +
    "\uffff\042\uffff\045\005\047\uffff\060\uffff\063\uffff\065\uffff" +
    "\066\uffff\067\uffff\111\uffff\112\uffff\001\002\000\004\042" +
    "\u016d\001\002\000\004\045\u016e\001\002\000\034\005\uffeb" +
    "\042\uffeb\045\uffeb\046\uffeb\060\uffeb\063\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\072\uffeb\073\uffeb\074\uffeb\104\uffeb\001\002" +
    "\000\020\005\uffe2\046\uffe2\047\uffe2\063\uffe2\072\uffe2\104" +
    "\uffe2\111\uffe2\001\002\000\004\045\u0171\001\002\000\054" +
    "\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011" +
    "\uffff\023\uffff\025\uffff\035\uffff\042\uffff\045\005\063\uffff" +
    "\064\uffff\100\uffff\102\uffff\103\uffff\105\uffff\106\uffff\110" +
    "\uffff\133\uffff\001\002\000\004\042\u0173\001\002\000\004" +
    "\045\u0174\001\002\000\034\005\ufff0\042\ufff0\045\ufff0\046" +
    "\ufff0\060\ufff0\063\ufff0\065\ufff0\066\ufff0\067\ufff0\072\ufff0" +
    "\073\ufff0\074\ufff0\104\ufff0\001\002\000\004\045\u0176\001" +
    "\002\000\034\005\uffef\042\uffef\045\uffef\046\uffef\060\uffef" +
    "\063\uffef\065\uffef\066\uffef\067\uffef\072\uffef\073\uffef\074" +
    "\uffef\104\uffef\001\002\000\004\042\ufff6\001\002\000\036" +
    "\005\uffff\042\uffff\045\005\046\uffff\060\uffff\063\uffff\065" +
    "\uffff\066\uffff\067\uffff\071\uffff\072\uffff\073\uffff\074\uffff" +
    "\104\uffff\001\002\000\004\005\u017a\001\002\000\004\045" +
    "\u017b\001\002\000\036\005\ufff7\042\ufff7\045\ufff7\046\ufff7" +
    "\060\ufff7\063\ufff7\065\ufff7\066\ufff7\067\ufff7\071\ufff7\072" +
    "\ufff7\073\ufff7\074\ufff7\104\ufff7\001\002\000\034\005\ufff9" +
    "\042\ufff9\045\ufff9\046\ufff9\060\ufff9\063\ufff9\065\ufff9\066" +
    "\ufff9\067\ufff9\072\ufff9\073\ufff9\074\ufff9\104\ufff9\001\002" +
    "\000\004\005\201\001\002\000\004\045\u017f\001\002\000" +
    "\022\002\uff74\045\uff74\061\uff74\063\uff74\074\uff74\113\uff74" +
    "\114\uff74\116\uff74\001\002\000\146\002\000\003\000\004" +
    "\000\005\000\006\000\007\000\010\000\011\000\023\000" +
    "\025\000\035\000\042\000\045\000\046\000\047\000\060" +
    "\000\061\000\063\000\064\000\065\000\066\000\067\000" +
    "\071\000\072\000\073\000\074\000\100\000\101\000\102" +
    "\000\103\000\104\000\105\000\106\000\110\000\111\000" +
    "\112\000\113\000\114\000\115\000\116\000\117\000\122" +
    "\000\123\000\124\000\125\000\126\000\127\000\131\000" +
    "\132\000\133\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017f\000\006\012\003\041\005\001\001\000\002\001" +
    "\001\000\004\041\u017f\001\001\000\020\052\012\054\016" +
    "\063\022\073\007\074\013\105\017\106\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\325\001\001\000\002\001\001\000\006\012\320\041\005" +
    "\001\001\000\002\001\001\000\004\030\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\025\075\024" +
    "\001\001\000\002\001\001\000\006\053\031\076\026\001" +
    "\001\000\006\041\025\075\174\001\001\000\004\053\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\014\050\015\046\017\053\020\056\021\036" +
    "\022\041\023\035\024\044\025\055\056\054\057\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\014\160\015\046\017\053\020\056\021\036\022" +
    "\041\023\035\024\044\025\055\056\054\057\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\014\145\015\046\017\053\020\056\021\036" +
    "\022\041\023\035\024\044\025\055\056\054\057\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\014\065\015\046\017\053\020\056\021\036\022" +
    "\041\023\035\024\044\025\055\056\054\057\040\001\001" +
    "\000\002\001\001\000\030\014\140\015\046\017\053\020" +
    "\056\021\036\022\041\023\035\024\044\025\055\056\054" +
    "\057\040\001\001\000\030\014\137\015\046\017\053\020" +
    "\056\021\036\022\041\023\035\024\044\025\055\056\054" +
    "\057\040\001\001\000\030\014\136\015\046\017\053\020" +
    "\056\021\036\022\041\023\035\024\044\025\055\056\054" +
    "\057\040\001\001\000\030\014\135\015\046\017\053\020" +
    "\056\021\036\022\041\023\035\024\044\025\055\056\054" +
    "\057\040\001\001\000\030\014\134\015\046\017\053\020" +
    "\056\021\036\022\041\023\035\024\044\025\055\056\054" +
    "\057\040\001\001\000\030\014\133\015\046\017\053\020" +
    "\056\021\036\022\041\023\035\024\044\025\055\056\054" +
    "\057\040\001\001\000\030\014\132\015\046\017\053\020" +
    "\056\021\036\022\041\023\035\024\044\025\055\056\054" +
    "\057\040\001\001\000\004\053\131\001\001\000\030\014" +
    "\130\015\046\017\053\020\056\021\036\022\041\023\035" +
    "\024\044\025\055\056\054\057\040\001\001\000\030\014" +
    "\127\015\046\017\053\020\056\021\036\022\041\023\035" +
    "\024\044\025\055\056\054\057\040\001\001\000\030\014" +
    "\126\015\046\017\053\020\056\021\036\022\041\023\035" +
    "\024\044\025\055\056\054\057\040\001\001\000\030\014" +
    "\125\015\046\017\053\020\056\021\036\022\041\023\035" +
    "\024\044\025\055\056\054\057\040\001\001\000\002\001" +
    "\001\000\030\014\113\015\046\017\053\020\056\021\036" +
    "\022\041\023\035\024\044\025\055\056\054\057\040\001" +
    "\001\000\030\014\112\015\046\017\053\020\056\021\036" +
    "\022\041\023\035\024\044\025\055\056\054\057\040\001" +
    "\001\000\002\001\001\000\030\014\111\015\046\017\053" +
    "\020\056\021\036\022\041\023\035\024\044\025\055\056" +
    "\054\057\040\001\001\000\030\014\110\015\046\017\053" +
    "\020\056\021\036\022\041\023\035\024\044\025\055\056" +
    "\054\057\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\117\014\116\015\046\017\053\020\056\021\036" +
    "\022\041\023\035\024\044\025\055\056\054\057\040\001" +
    "\001\000\004\003\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\014\123\015\046\017" +
    "\053\020\056\021\036\022\041\023\035\024\044\025\055" +
    "\056\054\057\040\001\001\000\004\003\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\143\014\116\015\046\017\053" +
    "\020\056\021\036\022\041\023\035\024\044\025\055\056" +
    "\054\057\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\014\155\015\046\017\053\020\056\021\036\022\041" +
    "\023\035\024\044\025\055\056\054\057\040\001\001\000" +
    "\002\001\001\000\032\002\153\014\116\015\046\017\053" +
    "\020\056\021\036\022\041\023\035\024\044\025\055\056" +
    "\054\057\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\163\001\001\000\030" +
    "\014\164\015\046\017\053\020\056\021\036\022\041\023" +
    "\035\024\044\025\055\056\054\057\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\014\172\015\046\017\053\020\056\021\036\022\041\023" +
    "\035\024\044\025\055\056\054\057\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\053\204\064\205\067\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\207" +
    "\001\001\000\006\053\204\064\210\001\001\000\002\001" +
    "\001\000\004\066\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\220\077\217\001\001\000\006" +
    "\041\232\100\233\001\001\000\004\101\221\001\001\000" +
    "\006\041\220\077\231\001\001\000\004\053\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\014\227\015" +
    "\046\017\053\020\056\021\036\022\041\023\035\024\044" +
    "\025\055\056\054\057\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\102\237\103\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\014\316\015\046\017\053" +
    "\020\056\021\036\022\041\023\035\024\044\025\055\056" +
    "\054\057\040\001\001\000\006\041\232\100\315\001\001" +
    "\000\030\014\312\015\046\017\053\020\056\021\036\022" +
    "\041\023\035\024\044\025\055\056\054\057\040\001\001" +
    "\000\002\001\001\000\034\014\276\015\046\016\273\017" +
    "\053\020\056\021\036\022\275\023\035\024\044\025\055" +
    "\036\272\056\277\057\274\001\001\000\002\001\001\000" +
    "\030\014\250\015\046\017\053\020\056\021\036\022\041" +
    "\023\035\024\044\025\055\056\054\057\040\001\001\000" +
    "\004\024\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\041\232\100" +
    "\253\001\001\000\004\104\256\001\001\000\030\014\265" +
    "\015\046\017\053\020\056\021\036\022\041\023\035\024" +
    "\044\025\055\056\054\057\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\232\100\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\232\100\270\001\001\000\004\104\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\302\001" +
    "\001\000\002\001\001\000\030\014\304\015\046\017\053" +
    "\020\056\021\036\022\041\023\035\024\044\025\055\056" +
    "\054\057\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\232\100\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\332\062\333\001\001\000" +
    "\004\033\u0177\001\001\000\006\041\334\060\335\001\001" +
    "\000\020\005\345\013\342\026\346\055\344\107\352\110" +
    "\353\111\337\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\334\060\u0176\001\001\000\004\027\u0174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\107\352\110\u016e\001\001\000\004\053\357\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\361\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\053\204\064\365\065\364\001\001" +
    "\000\002\001\001\000\004\066\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\371\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\041\374\072\375\001" +
    "\001\000\056\014\276\015\046\016\u010a\017\053\020\056" +
    "\021\u010f\022\275\023\035\024\u0109\025\u0103\034\377\036" +
    "\272\043\u0102\044\u010b\045\u0107\046\u0110\047\u0101\050\u0111" +
    "\053\u010c\056\277\057\274\070\u010e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\u0138" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\014\u0134\015\046\017\053\020\056\021\036" +
    "\022\041\023\035\024\044\025\055\056\054\057\040\001" +
    "\001\000\030\014\u0127\015\046\017\053\020\056\021\036" +
    "\022\041\023\035\024\044\025\055\056\054\057\040\001" +
    "\001\000\030\014\u0125\015\046\017\053\020\056\021\036" +
    "\022\041\023\035\024\044\025\055\056\054\057\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\014\u0115\015\046\017\053\020\056\021\036\022\041" +
    "\023\035\024\044\025\055\056\054\057\040\001\001\000" +
    "\006\041\374\072\u0114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\374\072\u0118\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\014\u011e\015\046\017\053\020\056\021\036\022" +
    "\041\023\035\024\044\025\055\056\054\057\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\014\u0121\015\046\017\053\020\056\021\036\022\041" +
    "\023\035\024\044\025\055\056\054\057\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\374\072\u012a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\u0130\071\u012f\001\001\000\006\041\374\072\u0131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\014\u013b\015\046" +
    "\017\053\020\056\021\036\022\041\023\035\024\044\025" +
    "\055\056\054\057\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\014\u013e\015\046\017\053\020\056\021" +
    "\036\022\041\023\035\024\044\025\055\056\054\057\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\014\u0143\015\046\017\053\020\056\021\036" +
    "\022\041\023\035\024\044\025\055\056\054\057\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\u0148\041" +
    "\u0149\001\001\000\002\001\001\000\014\010\u014c\026\u014d" +
    "\055\u014b\107\352\110\u014e\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\u015b\041\u0149\001\001\000\002" +
    "\001\001\000\004\053\357\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\053\204\064\365\065\u0154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\374\072\u0158" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\041\374" +
    "\072\u015e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\u0166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\u016b\041\u0149\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\374\072\u0171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\041" +
    "\332\062\u017b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u017d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	protected String filename = "";


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 

	private WPos pos(int left, int right) {
		return Ast.WPos(parser.filename, left, right);
	}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // JasselseIfs ::= ENDIF NL 
            {
              WStatements RESULT =null;
		 RESULT = Ast.WStatements(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JasselseIfs",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // JasselseIfs ::= ELSE NL JassStatements ENDIF NL 
            {
              WStatements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements s = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JasselseIfs",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // JasselseIfs ::= ELSEIF Expr THEN NL JassStatements JasselseIfs 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int thenStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int thenStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatements thenStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements elseStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.WStatements(Ast.StmtIf(pos(xleft, xright), cond,  thenStatements, elseStatements)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JasselseIfs",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // JassStatementIf ::= IF Expr THEN NL JassStatements JasselseIfs 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int thenStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int thenStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatements thenStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements elseStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.StmtIf(pos(xleft, xright), cond, thenStatements, elseStatements); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatementIf",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // JassStatement ::= CALL ExprFunctionCall 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprFunctionCall call = (ExprFunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = call; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // JassStatement ::= SET ExprAssignable EQ Expr NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAssignable left = (ExprAssignable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.StmtSet(pos(xleft, xright), left, Ast.OpAssign(),  right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // JassStatement ::= RETURN Expr NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.StmtReturn(pos(xleft, xright), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // JassStatement ::= RETURN NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.StmtReturn(pos(xleft, xright), Ast.NoExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // JassStatement ::= EXITWHEN Expr NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.StmtExitwhen(pos(xleft, xright), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // JassStatement ::= LOOP NL JassStatements ENDLOOP NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = Ast.StmtLoop(pos(xleft, xright), body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // JassStatement ::= JassStatementIf 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatement x = (WStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // JassStatements ::= Newlines 
            {
              WStatements RESULT =null;
		 RESULT = Ast.WStatements(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatements",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // JassStatements ::= Newlines JassStatement JassStatements 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatement x = (WStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements xs = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 xs.addFront(x); RESULT = xs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatements",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // JassLocal ::= LOCAL TypeExpr IDENTIFIER NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.LocalVarDef(pos(xleft, xright), false, typ, name, Ast.NoExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassLocal",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // JassLocal ::= LOCAL TypeExpr IDENTIFIER EQ Expr NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.LocalVarDef(pos(xleft, xright), false, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassLocal",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // JassLocals ::= Newlines 
            {
              WStatements RESULT =null;
		 RESULT = Ast.WStatements(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassLocals",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // JassLocals ::= Newlines JassLocal JassLocals 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatement x = (WStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements xs = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 xs.addFront(x); RESULT = xs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassLocals",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // JassParameters ::= Parameter OtherParameters 
            {
              WParameters RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WParameter x = (WParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WParameters xs = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 xs.addFront(x); RESULT = xs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassParameters",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // JassParameters ::= NOTHING 
            {
              WParameters RESULT =null;
		 RESULT = Ast.WParameters(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassParameters",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // JassFuncSignature ::= IDENTIFIER TAKES JassParameters RETURNS NOTHING 
            {
              FuncSignature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WParameters parameters = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = Ast.FuncSignature(pos(nameleft, nameright), name, parameters, Ast.NoTypeExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassFuncSignature",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // JassFuncSignature ::= IDENTIFIER TAKES JassParameters RETURNS TypeExpr 
            {
              FuncSignature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WParameters parameters = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.FuncSignature(pos(nameleft, nameright), name, parameters, typ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassFuncSignature",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // JassFuncDef ::= FUNCTION JassFuncSignature NL JassLocals JassStatements ENDFUNCTION NL 
            {
              FuncDef RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FuncSignature sig = (FuncSignature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int body1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int body1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WStatements body1 = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int body2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int body2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body2 = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
			body1.addAll(body2.removeAll());
			RESULT = Ast.FuncDef(pos(xleft, xright), Ast.Modifiers(), sig, body1); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassFuncDef",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // JassNativeDecl ::= CONSTANT NATIVE JassFuncSignature NL 
            {
              NativeFunc RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FuncSignature sig = (FuncSignature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.NativeFunc(pos(xleft, xright), sig); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassNativeDecl",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // JassNativeDecl ::= NATIVE JassFuncSignature NL 
            {
              NativeFunc RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FuncSignature sig = (FuncSignature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.NativeFunc(pos(xleft, xright), sig); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassNativeDecl",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // JassGlobalDecl ::= TypeExpr IDENTIFIER NL 
            {
              GlobalVarDef RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.GlobalVarDef(typ.getSource().copy(), Ast.Modifiers(), false, typ, name, Ast.NoExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalDecl",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // JassGlobalDecl ::= TypeExpr IDENTIFIER EQ Expr NL 
            {
              GlobalVarDef RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.GlobalVarDef(typ.getSource().copy(), Ast.Modifiers(), false, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalDecl",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // JassGlobalDecl ::= CONSTANT TypeExpr IDENTIFIER EQ Expr NL 
            {
              GlobalVarDef RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.GlobalVarDef(pos(xleft, xright), Ast.Modifiers(), true, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalDecl",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // JassGlobalDecls ::= Newlines 
            {
              JassGlobalBlock RESULT =null;
		 RESULT = Ast.JassGlobalBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalDecls",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // JassGlobalDecls ::= Newlines JassGlobalDecl JassGlobalDecls 
            {
              JassGlobalBlock RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GlobalVarDef x = (GlobalVarDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JassGlobalBlock xs = (JassGlobalBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 xs.addFront(x); RESULT = xs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalDecls",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // JassGlobalBlock ::= GLOBALS NL JassGlobalDecls ENDGLOBALS NL 
            {
              JassGlobalBlock RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JassGlobalBlock x = (JassGlobalBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalBlock",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // JassTypeDecl ::= TYPE IDENTIFIER EXTENDS TypeExpr NL 
            {
              NativeType RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int extendsNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int extendsNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeExpr extendsName = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.NativeType(pos(xleft, xright), Ast.Modifiers(), name, extendsName); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassTypeDecl",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // JassToplevelDeclaration ::= JassNativeDecl 
            {
              JassToplevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NativeFunc x = (NativeFunc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassToplevelDeclaration",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // JassToplevelDeclaration ::= JassTypeDecl 
            {
              JassToplevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NativeType x = (NativeType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassToplevelDeclaration",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // JassToplevelDeclaration ::= JassFuncDef 
            {
              JassToplevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDef x = (FuncDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassToplevelDeclaration",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // JassToplevelDeclaration ::= JassGlobalBlock 
            {
              JassToplevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JassGlobalBlock x = (JassGlobalBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassToplevelDeclaration",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ExprFunctionCall ::= IDENTIFIER LPAR Arguments RPAR 
            {
              ExprFunctionCall RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.ExprFunctionCall(pos(nameleft, nameright), name, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprFunctionCall",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ExprUnary ::= MINUS Expr 
            {
              ExprUnary RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprUnary(pos(xleft, xright), Ast.OpMinus(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprUnary",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ExprUnary ::= NOT Expr 
            {
              ExprUnary RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprUnary(pos(xleft, xright), Ast.OpNot(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprUnary",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ExprBinary ::= Expr NOTEQ Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBinary(left.getSource().copy(), left, Ast.OpUnequals(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ExprBinary ::= Expr GT Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBinary(left.getSource().copy(), left, Ast.OpGreater(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ExprBinary ::= Expr LT Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBinary(left.getSource().copy(), left, Ast.OpLess(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ExprBinary ::= Expr LTEQ Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBinary(left.getSource().copy(), left, Ast.OpLessEq(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ExprBinary ::= Expr GTEQ Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBinary(left.getSource().copy(), left, Ast.OpGreaterEq(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ExprBinary ::= Expr EQEQ Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBinary(left.getSource().copy(), left, Ast.OpEquals(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ExprBinary ::= Expr MOD_INT Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBinary(left.getSource().copy(), left, Ast.OpModInt(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ExprBinary ::= Expr MOD_REAL Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBinary(left.getSource().copy(), left, Ast.OpModReal(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ExprBinary ::= Expr DIV_INT Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBinary(left.getSource().copy(), left, Ast.OpDivInt(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ExprBinary ::= Expr DIV_REAL Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBinary(left.getSource().copy(), left, Ast.OpDivReal(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ExprBinary ::= Expr MULT Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBinary(left.getSource().copy(), left, Ast.OpMult(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ExprBinary ::= Expr MINUS Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBinary(left.getSource().copy(), left, Ast.OpMinus(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ExprBinary ::= Expr PLUS Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBinary(left.getSource().copy(), left, Ast.OpPlus(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ExprBinary ::= Expr AND Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBinary(left.getSource().copy(), left, Ast.OpAnd(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ExprBinary ::= Expr OR Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBinary(left.getSource().copy(), left, Ast.OpOr(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ArgumentRest ::= 
            {
              Arguments RESULT =null;
		 RESULT = Ast.Arguments(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgumentRest",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ArgumentRest ::= COMMA Expr ArgumentRest 
            {
              Arguments RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arguments xs = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 xs.addFront(x); RESULT = xs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgumentRest",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Arguments ::= 
            {
              Arguments RESULT =null;
		 RESULT = Ast.Arguments(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arguments",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Arguments ::= Expr ArgumentRest 
            {
              Arguments RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arguments xs = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 xs.addFront(x); RESULT = xs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arguments",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Indexes ::= LSQUARE Expr RSQUARE 
            {
              Indexes RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.Indexes(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Indexes",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Indexes ::= LSQUARE Expr RSQUARE Indexes 
            {
              Indexes RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Indexes xs = (Indexes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 xs.addFront(x); RESULT = xs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Indexes",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExprNewObject ::= NEW IDENTIFIER LPAR Arguments RPAR 
            {
              ExprNewObject RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.ExprNewObject(pos(xleft, xright), name, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprNewObject",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExprAtomic ::= ExprVarArrayAccess 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprVarArrayAccess x = (ExprVarArrayAccess)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExprAtomic ::= ExprVarAccess 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprVarAccess x = (ExprVarAccess)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExprAtomic ::= REAL_LITERAL 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprRealVal(pos(xleft, xright), x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExprAtomic ::= FUNCTION IDENTIFIER 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprFuncRef(pos(xleft, xright), name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExprAtomic ::= THIS 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprThis(pos(xleft, xright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExprAtomic ::= FALSE 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBoolVal(pos(xleft, xright), false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExprAtomic ::= TRUE 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprBoolVal(pos(xleft, xright), true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExprAtomic ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExprAtomic ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprStringVal(pos(sleft, sright), s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExprAtomic ::= NULL 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprNull(pos(xleft, xright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExprAtomic ::= INTEGER_LITERAL 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprIntVal(pos(ileft, iright), i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExprMemberMethod ::= Expr DOT IDENTIFIER LPAR Arguments RPAR 
            {
              ExprMemberMethod RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.ExprMemberMethod(left.getSource().copy(), left, name, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprMemberMethod",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExprMemberArrayVar ::= Expr DOT IDENTIFIER Indexes 
            {
              ExprMemberArrayVar RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int indexesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int indexesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Indexes indexes = (Indexes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprMemberArrayVar(left.getSource().copy(), left, name, indexes); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprMemberArrayVar",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExprMemberVar ::= Expr DOT IDENTIFIER 
            {
              ExprMemberVar RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprMemberVar(left.getSource().copy(), left, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprMemberVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ExprCast ::= Expr CASTTO TypeExpr 
            {
              ExprCast RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeExpr t = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprCast(e.getSource().copy(), t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprCast",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= ExprCast 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprCast x = (ExprCast)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= ExprAtomic 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= ExprNewObject 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNewObject x = (ExprNewObject)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= ExprFunctionCall 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprFunctionCall x = (ExprFunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= ExprMemberMethod 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprMemberMethod x = (ExprMemberMethod)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= ExprMemberVar 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprMemberVar x = (ExprMemberVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= ExprUnary 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprUnary x = (ExprUnary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= ExprBinary 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary x = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // StmtCall ::= ExprNewObject NL 
            {
              StmtCall RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNewObject x = (ExprNewObject)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtCall",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // StmtCall ::= ExprFunctionCall NL 
            {
              StmtCall RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprFunctionCall x = (ExprFunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtCall",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // StmtCall ::= ExprMemberMethod NL 
            {
              StmtCall RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprMemberMethod x = (ExprMemberMethod)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtCall",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ExprVarArrayAccess ::= IDENTIFIER Indexes 
            {
              ExprVarArrayAccess RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Indexesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Indexesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Indexes Indexes = (Indexes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprVarArrayAccess(pos(nameleft, nameright), name, Indexes); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprVarArrayAccess",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExprVarAccess ::= IDENTIFIER 
            {
              ExprVarAccess RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ExprVarAccess(pos(nameleft, nameright), name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprVarAccess",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ExprAssignable ::= ExprVarArrayAccess 
            {
              ExprAssignable RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprVarArrayAccess x = (ExprVarArrayAccess)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAssignable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExprAssignable ::= ExprVarAccess 
            {
              ExprAssignable RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprVarAccess x = (ExprVarAccess)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAssignable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ExprAssignable ::= ExprMemberArrayVar 
            {
              ExprAssignable RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprMemberArrayVar x = (ExprMemberArrayVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAssignable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExprAssignable ::= ExprMemberVar 
            {
              ExprAssignable RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprMemberVar x = (ExprMemberVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAssignable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // StmtSet ::= ExprAssignable EQ Expr NL 
            {
              StmtSet RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAssignable left = (ExprAssignable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.StmtSet(left.getSource().copy(), left, Ast.OpAssign(),  right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtSet",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LocalVarDef ::= TypeExpr IDENTIFIER NL 
            {
              LocalVarDef RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.LocalVarDef(pos(typleft, typright), false, typ, name, Ast.NoExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LocalVarDef",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LocalVarDef ::= TypeExpr IDENTIFIER EQ Expr NL 
            {
              LocalVarDef RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.LocalVarDef(pos(typleft, typright), false, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LocalVarDef",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LocalVarDef ::= VAL TypeExpr IDENTIFIER EQ Expr NL 
            {
              LocalVarDef RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.LocalVarDef(pos(xleft, xright), true, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LocalVarDef",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LocalVarDef ::= VAL IDENTIFIER EQ Expr NL 
            {
              LocalVarDef RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.LocalVarDef(pos(xleft, xright), true, Ast.NoTypeExpr(), name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LocalVarDef",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // StmtWhile ::= WHILE Expr LBRACK NL Statements RBRACK NL 
            {
              StmtWhile RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = Ast.StmtWhile(pos(xleft, xright), cond, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtWhile",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ElseStatements ::= LBRACK Statements RBRACK NL 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements x = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElseStatements",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ElseStatements ::= StmtIf 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtIf x = (StmtIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.WStatements(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElseStatements",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StmtIf ::= IF Expr LBRACK NL Statements RBRACK ELSE ElseStatements 
            {
              StmtIf RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int thenStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int thenStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WStatements thenStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements elseStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.StmtIf(pos(xleft, xright), cond, thenStatements, elseStatements); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtIf",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StmtIf ::= IF Expr LBRACK NL Statements RBRACK NL 
            {
              StmtIf RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int thenStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int thenStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements thenStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = Ast.StmtIf(pos(xleft, xright), cond, thenStatements, Ast.WStatements()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtIf",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StmtReturn ::= RETURN Expr NL 
            {
              StmtReturn RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int resultleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr result = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.StmtReturn(pos(xleft, xright), result); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtReturn",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StmtDestroy ::= DESTROY Expr NL 
            {
              StmtDestroy RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.StmtDestroy(pos(xleft, xright), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtDestroy",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= error NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.StmtErr(pos(xleft, xright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= StmtDestroy 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtDestroy x = (StmtDestroy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= StmtReturn 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtReturn x = (StmtReturn)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= StmtCall 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtCall x = (StmtCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= StmtSet 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtSet x = (StmtSet)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= LocalVarDef 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LocalVarDef x = (LocalVarDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Statement ::= StmtWhile 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtWhile x = (StmtWhile)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Statement ::= StmtIf 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtIf x = (StmtIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Statements ::= Newlines 
            {
              WStatements RESULT =null;
		 RESULT = Ast.WStatements(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statements ::= Newlines Statement Statements 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatement x = (WStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements xs = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 xs.addFront(x); RESULT = xs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VarDef ::= Modifiers TypeExpr IDENTIFIER NL 
            {
              GlobalVarDef RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Modifiers mod = (Modifiers)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.GlobalVarDef(pos(typleft, typright), mod, false, typ, name, Ast.NoExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VarDef ::= Modifiers TypeExpr IDENTIFIER EQ Expr NL 
            {
              GlobalVarDef RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Modifiers mod = (Modifiers)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.GlobalVarDef(pos(typleft, typright), mod, false, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ArraySizes ::= 
            {
              ArraySizes RESULT =null;
		 RESULT = Ast.ArraySizes(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArraySizes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ArraySizes ::= LSQUARE Expr RSQUARE ArraySizes 
            {
              ArraySizes RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArraySizes xs = (ArraySizes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 xs.addFront(x); RESULT = xs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArraySizes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TypeExpr ::= IDENTIFIER ARRAY ArraySizes 
            {
              TypeExpr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sizesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sizesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArraySizes sizes = (ArraySizes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.TypeExpr(pos(nameleft, nameright), name, true, sizes); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeExpr",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TypeExpr ::= IDENTIFIER 
            {
              TypeExpr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.TypeExpr(pos(nameleft, nameright), name, false, Ast.ArraySizes()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeExpr",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Parameter ::= TypeExpr IDENTIFIER 
            {
              WParameter RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.WParameter(pos(typleft, typright), typ, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parameter",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OtherParameters ::= 
            {
              WParameters RESULT =null;
		 RESULT = Ast.WParameters(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherParameters",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OtherParameters ::= COMMA Parameter OtherParameters 
            {
              WParameters RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WParameter x = (WParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WParameters xs = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 xs.addFront(x); RESULT = xs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherParameters",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Parameters ::= 
            {
              WParameters RESULT =null;
		 RESULT = Ast.WParameters(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parameters",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Parameters ::= Parameter OtherParameters 
            {
              WParameters RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WParameter x = (WParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WParameters xs = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 xs.addFront(x); RESULT = xs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parameters",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FuncSignature ::= IDENTIFIER LPAR Parameters RPAR 
            {
              FuncSignature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WParameters parameters = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.FuncSignature(pos(nameleft, nameright), name, parameters, Ast.NoTypeExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncSignature",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FuncSignature ::= IDENTIFIER LPAR Parameters RPAR RETURNS TypeExpr 
            {
              FuncSignature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WParameters parameters = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.FuncSignature(pos(nameleft, nameright), name, parameters, typ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncSignature",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Modifier ::= STATIC 
            {
              Modifier RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.ModStatic(pos(xleft, xright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifier",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Modifier ::= PUBLICREAD 
            {
              Modifier RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.VisibilityPublicread(pos(xleft, xright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifier",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Modifier ::= PRIVATE 
            {
              Modifier RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.VisibilityPrivate(pos(xleft, xright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifier",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Modifier ::= PUBLIC 
            {
              Modifier RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Ast.VisibilityPublic(pos(xleft, xright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifier",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Modifiers ::= 
            {
              Modifiers RESULT =null;
		 RESULT = Ast.Modifiers(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifiers",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Modifiers ::= Modifier Modifiers 
            {
              Modifiers RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Modifier x = (Modifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Modifiers xs = (Modifiers)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 xs.addFront(x); RESULT = xs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modifiers",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FuncDef ::= Modifiers FUNCTION FuncSignature LBRACK NL Statements RBRACK 
            {
              FuncDef RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Modifiers mod = (Modifiers)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		FuncSignature sig = (FuncSignature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.FuncDef(pos(xleft, xright), mod, sig, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncDef",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassSlot ::= FuncDef 
            {
              ClassSlot RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDef x = (FuncDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassSlot ::= VarDef 
            {
              ClassSlot RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GlobalVarDef x = (GlobalVarDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassSlot ::= ONDESTROY LBRACK NL Statements RBRACK NL 
            {
              ClassSlot RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = Ast.OnDestroyDef(pos(xleft, xright), body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassSlot ::= Modifiers USE IDENTIFIER NL 
            {
              ClassSlot RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Modifiers mod = (Modifiers)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.ModuleUse(pos(xleft, xright), m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassSlot ::= Modifiers CONSTRUCT LPAR Parameters RPAR LBRACK NL Statements RBRACK NL 
            {
              ClassSlot RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Modifiers mod = (Modifiers)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		WParameters params = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = Ast.ConstructorDef(pos(xleft, xright), mod, params, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassSlots ::= Newlines 
            {
              ClassSlots RESULT =null;
		 RESULT = Ast.ClassSlots(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlots",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ClassSlots ::= Newlines ClassSlot ClassSlots 
            {
              ClassSlots RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassSlot x = (ClassSlot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassSlots xs = (ClassSlots)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 xs.addFront(x); RESULT = xs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlots",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ModuleDef ::= Modifiers MODULE IDENTIFIER LBRACK NL ClassSlots RBRACK NL 
            {
              ModuleDef RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Modifiers mod = (Modifiers)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slotsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slotsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ClassSlots slots = (ClassSlots)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = Ast.ModuleDef(pos(xleft, xright), mod, name, slots); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ModuleDef",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ClassDef ::= Modifiers CLASS IDENTIFIER LBRACK NL ClassSlots RBRACK NL 
            {
              ClassDef RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Modifiers mod = (Modifiers)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slotsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slotsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ClassSlots slots = (ClassSlots)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = Ast.ClassDef(pos(xleft, xright), mod, name, false, slots); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDef",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Entity ::= ModuleDef 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ModuleDef x = (ModuleDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Entity ::= ClassDef 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef x = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Entity ::= NATIVE FuncSignature NL 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FuncSignature sig = (FuncSignature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.NativeFunc(pos(xleft, xright), sig); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Entity ::= INIT LBRACK NL Statements RBRACK NL 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = Ast.InitBlock(pos(xleft, xright), body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Entity ::= VarDef 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GlobalVarDef x = (GlobalVarDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Entity ::= FuncDef 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDef x = (FuncDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Entity ::= Modifiers NATIVETYPE IDENTIFIER NL 
            {
              WEntity RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Modifiers mod = (Modifiers)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.NativeType(pos(xleft, xright), mod, name, Ast.NoTypeExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Entity ::= Modifiers NATIVETYPE IDENTIFIER EXTENDS TypeExpr NL 
            {
              WEntity RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Modifiers mod = (Modifiers)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int extendsNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int extendsNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeExpr extendsName = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.NativeType(pos(xleft, xright), mod, name, extendsName); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Entities ::= Newlines 
            {
              WEntities RESULT =null;
		 RESULT = Ast.WEntities(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entities",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Entities ::= Newlines Entity Entities 
            {
              WEntities RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WEntity x = (WEntity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WEntities xs = (WEntities)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 xs.addFront(x); RESULT = xs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entities",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Import ::= IMPORT IDENTIFIER NL 
            {
              WImport RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.WImport(pos(xleft, xright), i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Imports ::= Newlines 
            {
              WImports RESULT =null;
		 RESULT = Ast.WImports(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Imports",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Imports ::= Newlines Import Imports 
            {
              WImports RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WImport i = (WImport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int importsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int importsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WImports imports = (WImports)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 imports.addFront(i); RESULT = imports; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Imports",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PackageDeclaration ::= PACKAGE IDENTIFIER LBRACK NL Imports Entities RBRACK 
            {
              WPackage RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int importsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int importsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WImports imports = (WImports)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int entitiesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int entitiesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WEntities entities = (WEntities)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Ast.WPackage(pos(xleft, xright), name, imports, entities); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PackageDeclaration",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TopLevelDeclaration ::= JassToplevelDeclaration 
            {
              TopLevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JassToplevelDeclaration x = (JassToplevelDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TopLevelDeclaration",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TopLevelDeclaration ::= PackageDeclaration 
            {
              TopLevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WPackage x = (WPackage)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TopLevelDeclaration",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CompilationUnit ::= Newlines 
            {
              CompilationUnit RESULT =null;
		 RESULT = Ast.CompilationUnit(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompilationUnit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CompilationUnit ::= Newlines TopLevelDeclaration CompilationUnit 
            {
              CompilationUnit RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TopLevelDeclaration p = (TopLevelDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompilationUnit c = (CompilationUnit)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 c.addFront(p);  RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompilationUnit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Newlines ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Newlines",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Newlines ::= NL Newlines 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Newlines",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CompilationUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CompilationUnit start_val = (CompilationUnit)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

