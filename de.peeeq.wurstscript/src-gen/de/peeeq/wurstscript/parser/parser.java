
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 16 15:32:23 CEST 2011
//----------------------------------------------------

package de.peeeq.wurstscript.parser;

import de.peeeq.wurstscript.ast.AST;
import de.peeeq.wurstscript.ast.Arguments;
import de.peeeq.wurstscript.ast.ArraySizes;
import de.peeeq.wurstscript.ast.ClassDef;
import de.peeeq.wurstscript.ast.ClassSlot;
import de.peeeq.wurstscript.ast.ClassSlots;
import de.peeeq.wurstscript.ast.CompilationUnit;
import de.peeeq.wurstscript.ast.Expr;
import de.peeeq.wurstscript.ast.ExprAssignable;
import de.peeeq.wurstscript.ast.ExprBinary;
import de.peeeq.wurstscript.ast.ExprCast;
import de.peeeq.wurstscript.ast.ExprFunctionCall;
import de.peeeq.wurstscript.ast.ExprMemberArrayVar;
import de.peeeq.wurstscript.ast.ExprMemberMethod;
import de.peeeq.wurstscript.ast.ExprMemberVar;
import de.peeeq.wurstscript.ast.ExprNewObject;
import de.peeeq.wurstscript.ast.ExprUnary;
import de.peeeq.wurstscript.ast.ExprVarAccess;
import de.peeeq.wurstscript.ast.ExprVarArrayAccess;
import de.peeeq.wurstscript.ast.FuncDef;
import de.peeeq.wurstscript.ast.FuncSignature;
import de.peeeq.wurstscript.ast.GlobalVarDef;
import de.peeeq.wurstscript.ast.Indexes;
import de.peeeq.wurstscript.ast.JassGlobalBlock;
import de.peeeq.wurstscript.ast.JassToplevelDeclaration;
import de.peeeq.wurstscript.ast.LocalVarDef;
import de.peeeq.wurstscript.ast.NativeFunc;
import de.peeeq.wurstscript.ast.NativeType;
import de.peeeq.wurstscript.ast.StmtCall;
import de.peeeq.wurstscript.ast.StmtDecRefCount;
import de.peeeq.wurstscript.ast.StmtDestroy;
import de.peeeq.wurstscript.ast.StmtIf;
import de.peeeq.wurstscript.ast.StmtIncRefCount;
import de.peeeq.wurstscript.ast.StmtReturn;
import de.peeeq.wurstscript.ast.StmtSet;
import de.peeeq.wurstscript.ast.StmtWhile;
import de.peeeq.wurstscript.ast.TopLevelDeclaration;
import de.peeeq.wurstscript.ast.TypeExpr;
import de.peeeq.wurstscript.ast.VisibilityModifier;
import de.peeeq.wurstscript.ast.WEntities;
import de.peeeq.wurstscript.ast.WEntity;
import de.peeeq.wurstscript.ast.WImport;
import de.peeeq.wurstscript.ast.WImports;
import de.peeeq.wurstscript.ast.WPackage;
import de.peeeq.wurstscript.ast.WParameter;
import de.peeeq.wurstscript.ast.WParameters;
import de.peeeq.wurstscript.ast.WPos;
import de.peeeq.wurstscript.ast.WStatement;
import de.peeeq.wurstscript.ast.WStatements;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 16 15:32:23 CEST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\243\000\002\002\004\000\002\041\004\000\002\041" +
    "\002\000\002\012\005\000\002\012\003\000\002\056\003" +
    "\000\002\056\003\000\002\111\003\000\002\111\003\000" +
    "\002\111\003\000\002\111\002\000\002\065\011\000\002" +
    "\064\005\000\002\064\003\000\002\033\005\000\002\062" +
    "\005\000\002\062\003\000\002\013\010\000\002\013\006" +
    "\000\002\013\003\000\002\013\003\000\002\013\010\000" +
    "\002\013\005\000\002\013\003\000\002\005\012\000\002" +
    "\007\005\000\002\007\003\000\002\010\014\000\002\010" +
    "\010\000\002\010\003\000\002\010\003\000\002\026\011" +
    "\000\002\027\010\000\002\027\006\000\002\067\004\000" +
    "\002\067\002\000\002\070\005\000\002\070\002\000\002" +
    "\066\004\000\002\055\003\000\002\055\005\000\002\004" +
    "\006\000\002\004\002\000\002\057\010\000\002\057\011" +
    "\000\002\057\010\000\002\057\006\000\002\074\005\000" +
    "\002\074\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\004\000\002\045\005\000\002\050\005\000" +
    "\002\046\011\000\002\046\012\000\002\073\003\000\002" +
    "\073\006\000\002\052\011\000\002\034\007\000\002\034" +
    "\010\000\002\034\007\000\002\034\005\000\002\051\006" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\060\003\000\002\061\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\020\005\000\002\022\005\000\002" +
    "\036\006\000\002\021\010\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\005\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\004\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\025\007\000\002\032\006\000\002\032\005\000\002\002" +
    "\004\000\002\002\002\000\002\003\005\000\002\003\002" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\023\004\000" +
    "\002\023\004\000\002\024\006\000\002\110\003\000\002" +
    "\110\003\000\002\110\003\000\002\110\003\000\002\054" +
    "\007\000\002\075\007\000\002\077\005\000\002\077\003" +
    "\000\002\100\010\000\002\100\007\000\002\100\005\000" +
    "\002\107\005\000\002\107\006\000\002\076\011\000\002" +
    "\030\007\000\002\030\007\000\002\071\003\000\002\071" +
    "\004\000\002\101\005\000\002\101\003\000\002\103\010" +
    "\000\002\103\006\000\002\102\005\000\002\102\003\000" +
    "\002\104\003\000\002\104\007\000\002\104\005\000\002" +
    "\104\004\000\002\104\005\000\002\104\007\000\002\104" +
    "\004\000\002\105\010\000\002\106\010\000\002\106\007" +
    "\000\002\106\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\022\002\uffff\044\005\046\uffff\050\uffff\061" +
    "\uffff\100\uffff\101\uffff\103\uffff\001\002\000\004\002\u017f" +
    "\001\002\000\140\002\uffff\003\uffff\004\uffff\005\uffff\006" +
    "\uffff\007\uffff\010\uffff\011\uffff\023\uffff\025\uffff\035\uffff" +
    "\042\uffff\044\005\046\uffff\050\uffff\051\uffff\052\uffff\053" +
    "\uffff\054\uffff\056\uffff\057\uffff\060\uffff\061\uffff\065\uffff" +
    "\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff\073\uffff\075" +
    "\uffff\076\uffff\077\uffff\100\uffff\101\uffff\102\uffff\103\uffff" +
    "\104\uffff\107\uffff\110\uffff\111\uffff\112\uffff\113\uffff\114" +
    "\uffff\116\uffff\117\uffff\120\uffff\001\002\000\020\002\ufffd" +
    "\046\011\050\021\061\015\100\016\101\022\103\007\001" +
    "\002\000\004\061\u017b\001\002\000\022\002\uff81\044\uff81" +
    "\046\uff81\050\uff81\061\uff81\100\uff81\101\uff81\103\uff81\001" +
    "\002\000\004\005\330\001\002\000\022\002\ufffb\044\ufffb" +
    "\046\ufffb\050\ufffb\061\ufffb\100\ufffb\101\ufffb\103\ufffb\001" +
    "\002\000\022\002\uff7f\044\uff7f\046\uff7f\050\uff7f\061\uff7f" +
    "\100\uff7f\101\uff7f\103\uff7f\001\002\000\022\002\uff80\044" +
    "\uff80\046\uff80\050\uff80\061\uff80\100\uff80\101\uff80\103\uff80" +
    "\001\002\000\004\005\201\001\002\000\004\005\322\001" +
    "\002\000\022\002\uffff\044\005\046\uffff\050\uffff\061\uffff" +
    "\100\uffff\101\uffff\103\uffff\001\002\000\022\002\uff7e\044" +
    "\uff7e\046\uff7e\050\uff7e\061\uff7e\100\uff7e\101\uff7e\103\uff7e" +
    "\001\002\000\004\005\201\001\002\000\004\044\024\001" +
    "\002\000\022\002\ufffc\044\ufffc\046\ufffc\050\ufffc\061\ufffc" +
    "\100\ufffc\101\ufffc\103\ufffc\001\002\000\012\005\uffff\044" +
    "\005\102\uffff\103\uffff\001\002\000\004\102\176\001\002" +
    "\000\010\005\031\102\uff7a\103\030\001\002\000\012\005" +
    "\uffff\044\005\102\uffff\103\uffff\001\002\000\004\005\031" +
    "\001\002\000\064\005\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\021\uffda\022\uffda\024\uffda\025\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\036" +
    "\uffda\040\uffda\041\uffda\043\uffda\044\uffda\064\162\115\uffda" +
    "\121\uffda\001\002\000\004\005\033\001\002\000\006\020" +
    "\034\044\035\001\002\000\034\004\063\005\043\006\053" +
    "\007\044\010\047\011\061\023\040\025\060\035\065\050" +
    "\045\072\062\073\064\075\052\001\002\000\012\005\uff77" +
    "\044\uff77\102\uff77\103\uff77\001\002\000\060\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\021\uffb0\022\uffb0" +
    "\024\uffb0\025\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\036\uffb0\040\uffb0\041\uffb0\043\uffb0\044\uffb0" +
    "\115\uffb0\121\uffb0\001\002\000\060\012\uffae\013\uffae\014" +
    "\uffae\015\uffae\016\uffae\017\uffae\021\uffae\022\uffae\024\uffae" +
    "\025\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034" +
    "\uffae\036\uffae\040\uffae\041\uffae\043\uffae\044\uffae\115\uffae" +
    "\121\uffae\001\002\000\034\004\063\005\043\006\053\007" +
    "\044\010\047\011\061\023\040\025\060\035\065\050\045" +
    "\072\062\073\064\075\052\001\002\000\060\012\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\021\uff9b\022\uff9b" +
    "\024\uff9b\025\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033" +
    "\uff9b\034\uff9b\036\uff9b\040\uff9b\041\uff9b\043\uff9b\044\uff9b" +
    "\115\uff9b\121\uff9b\001\002\000\060\012\uffaf\013\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf\024\uffaf" +
    "\025\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\036\uffaf\040\uffaf\041\uffaf\043\uffaf\044\uffaf\115\uffaf" +
    "\121\uffaf\001\002\000\066\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\024\uffb6" +
    "\025\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\153\036\uffb6\037\151\040\uffb6\041\uffb6\043\uffb6" +
    "\044\uffb6\115\uffb6\121\uffb6\001\002\000\060\012\uff9d\013" +
    "\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d\021\uff9d\022\uff9d" +
    "\024\uff9d\025\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\036\uff9d\040\uff9d\041\uff9d\043\uff9d\044\uff9d" +
    "\115\uff9d\121\uff9d\001\002\000\004\005\150\001\002\000" +
    "\060\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab" +
    "\021\uffab\022\uffab\024\uffab\025\uffab\027\uffab\030\uffab\031" +
    "\uffab\032\uffab\033\uffab\034\uffab\036\uffab\040\uffab\041\uffab" +
    "\043\uffab\044\uffab\115\uffab\121\uffab\001\002\000\060\012" +
    "\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\021\uffa1" +
    "\022\uffa1\024\uffa1\025\uffa1\027\uffa1\030\uffa1\031\uffa1\032" +
    "\uffa1\033\uffa1\034\uffa1\036\uffa1\040\uffa1\041\uffa1\043\uffa1" +
    "\044\uffa1\115\uffa1\121\uffa1\001\002\000\060\012\uffad\013" +
    "\uffad\014\uffad\015\uffad\016\uffad\017\uffad\021\uffad\022\uffad" +
    "\024\uffad\025\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\036\uffad\040\uffad\041\uffad\043\uffad\044\uffad" +
    "\115\uffad\121\uffad\001\002\000\046\012\107\013\105\014" +
    "\077\015\072\016\075\017\070\021\067\022\073\024\071" +
    "\025\102\027\100\030\101\031\104\032\110\033\074\034" +
    "\103\044\147\121\076\001\002\000\060\012\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\017\uff9f\021\uff9f\022\uff9f\024" +
    "\uff9f\025\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f" +
    "\034\uff9f\036\uff9f\040\uff9f\041\uff9f\043\uff9f\044\uff9f\115" +
    "\uff9f\121\uff9f\001\002\000\060\012\uffa3\013\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\021\uffa3\022\uffa3\024\uffa3\025" +
    "\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3" +
    "\036\uffa3\040\uffa3\041\uffa3\043\uffa3\044\uffa3\115\uffa3\121" +
    "\uffa3\001\002\000\060\012\uffb1\013\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\021\uffb1\022\uffb1\024\uffb1\025\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\036\uffb1" +
    "\040\uffb1\041\uffb1\043\uffb1\044\uffb1\115\uffb1\121\uffb1\001" +
    "\002\000\060\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\021\uff9c\022\uff9c\024\uff9c\025\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\036\uff9c\040\uff9c" +
    "\041\uff9c\043\uff9c\044\uff9c\115\uff9c\121\uff9c\001\002\000" +
    "\060\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac" +
    "\021\uffac\022\uffac\024\uffac\025\uffac\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\034\uffac\036\uffac\040\uffac\041\uffac" +
    "\043\uffac\044\uffac\115\uffac\121\uffac\001\002\000\060\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\021\uffaa" +
    "\022\uffaa\024\uffaa\025\uffaa\027\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\033\uffaa\034\uffaa\036\uffaa\040\uffaa\041\uffaa\043\uffaa" +
    "\044\uffaa\115\uffaa\121\uffaa\001\002\000\034\004\063\005" +
    "\043\006\053\007\044\010\047\011\061\023\040\025\060" +
    "\035\065\050\045\072\062\073\064\075\052\001\002\000" +
    "\060\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0" +
    "\021\uffa0\022\uffa0\024\uffa0\025\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\032\uffa0\033\uffa0\034\uffa0\036\uffa0\040\uffa0\041\uffa0" +
    "\043\uffa0\044\uffa0\115\uffa0\121\uffa0\001\002\000\004\005" +
    "\142\001\002\000\060\012\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\021\uffa5\022\uffa5\024\uffa5\025\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\036\uffa5" +
    "\040\uffa5\041\uffa5\043\uffa5\044\uffa5\115\uffa5\121\uffa5\001" +
    "\002\000\060\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\021\uffa4\022\uffa4\024\uffa4\025\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\036\uffa4\040\uffa4" +
    "\041\uffa4\043\uffa4\044\uffa4\115\uffa4\121\uffa4\001\002\000" +
    "\034\004\063\005\043\006\053\007\044\010\047\011\061" +
    "\023\040\025\060\035\065\050\045\072\062\073\064\075" +
    "\052\001\002\000\046\012\107\013\105\014\077\015\072" +
    "\016\075\017\070\021\067\022\073\024\071\025\102\027" +
    "\100\030\101\031\104\032\110\033\074\034\103\036\106" +
    "\121\076\001\002\000\034\004\063\005\043\006\053\007" +
    "\044\010\047\011\061\023\040\025\060\035\065\050\045" +
    "\072\062\073\064\075\052\001\002\000\034\004\063\005" +
    "\043\006\053\007\044\010\047\011\061\023\040\025\060" +
    "\035\065\050\045\072\062\073\064\075\052\001\002\000" +
    "\034\004\063\005\043\006\053\007\044\010\047\011\061" +
    "\023\040\025\060\035\065\050\045\072\062\073\064\075" +
    "\052\001\002\000\034\004\063\005\043\006\053\007\044" +
    "\010\047\011\061\023\040\025\060\035\065\050\045\072" +
    "\062\073\064\075\052\001\002\000\034\004\063\005\043" +
    "\006\053\007\044\010\047\011\061\023\040\025\060\035" +
    "\065\050\045\072\062\073\064\075\052\001\002\000\034" +
    "\004\063\005\043\006\053\007\044\010\047\011\061\023" +
    "\040\025\060\035\065\050\045\072\062\073\064\075\052" +
    "\001\002\000\034\004\063\005\043\006\053\007\044\010" +
    "\047\011\061\023\040\025\060\035\065\050\045\072\062" +
    "\073\064\075\052\001\002\000\004\005\031\001\002\000" +
    "\034\004\063\005\043\006\053\007\044\010\047\011\061" +
    "\023\040\025\060\035\065\050\045\072\062\073\064\075" +
    "\052\001\002\000\034\004\063\005\043\006\053\007\044" +
    "\010\047\011\061\023\040\025\060\035\065\050\045\072" +
    "\062\073\064\075\052\001\002\000\034\004\063\005\043" +
    "\006\053\007\044\010\047\011\061\023\040\025\060\035" +
    "\065\050\045\072\062\073\064\075\052\001\002\000\034" +
    "\004\063\005\043\006\053\007\044\010\047\011\061\023" +
    "\040\025\060\035\065\050\045\072\062\073\064\075\052" +
    "\001\002\000\004\005\115\001\002\000\034\004\063\005" +
    "\043\006\053\007\044\010\047\011\061\023\040\025\060" +
    "\035\065\050\045\072\062\073\064\075\052\001\002\000" +
    "\034\004\063\005\043\006\053\007\044\010\047\011\061" +
    "\023\040\025\060\035\065\050\045\072\062\073\064\075" +
    "\052\001\002\000\060\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\021\uffa2\022\uffa2\024\uffa2\025\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\036\uffa2" +
    "\040\uffa2\041\uffa2\043\uffa2\044\uffa2\115\uffa2\121\uffa2\001" +
    "\002\000\034\004\063\005\043\006\053\007\044\010\047" +
    "\011\061\023\040\025\060\035\065\050\045\072\062\073" +
    "\064\075\052\001\002\000\034\004\063\005\043\006\053" +
    "\007\044\010\047\011\061\023\040\025\060\035\065\050" +
    "\045\072\062\073\064\075\052\001\002\000\060\012\uff8c" +
    "\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\021\uff8c\022" +
    "\uff8c\024\uff8c\025\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c" +
    "\033\uff8c\034\103\036\uff8c\040\uff8c\041\uff8c\043\uff8c\044" +
    "\uff8c\115\uff8c\121\076\001\002\000\044\021\uff8a\022\uff8a" +
    "\024\071\025\102\027\100\030\101\031\104\032\110\033" +
    "\074\034\103\036\uff8a\040\uff8a\041\uff8a\043\uff8a\044\uff8a" +
    "\115\uff8a\121\076\001\002\000\044\021\uff89\022\uff89\024" +
    "\071\025\102\027\100\030\101\031\104\032\110\033\074" +
    "\034\103\036\uff89\040\uff89\041\uff89\043\uff89\044\uff89\115" +
    "\uff89\121\076\001\002\000\060\012\uff8d\013\uff8d\014\uff8d" +
    "\015\uff8d\016\uff8d\017\uff8d\021\uff8d\022\uff8d\024\uff8d\025" +
    "\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\103" +
    "\036\uff8d\040\uff8d\041\uff8d\043\uff8d\044\uff8d\115\uff8d\121" +
    "\076\001\002\000\062\012\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\021\uffa8\022\uffa8\024\uffa8\025\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\116" +
    "\036\uffa8\040\uffa8\041\uffa8\043\uffa8\044\uffa8\115\uffa8\121" +
    "\uffa8\001\002\000\036\004\063\005\043\006\053\007\044" +
    "\010\047\011\061\023\040\025\060\035\065\036\uff96\050" +
    "\045\072\062\073\064\075\052\001\002\000\050\012\107" +
    "\013\105\014\077\015\072\016\075\017\070\021\067\022" +
    "\073\024\071\025\102\027\100\030\101\031\104\032\110" +
    "\033\074\034\103\036\uff94\043\123\121\076\001\002\000" +
    "\004\036\121\001\002\000\060\012\uffa6\013\uffa6\014\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\021\uffa6\022\uffa6\024\uffa6\025" +
    "\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6" +
    "\036\uffa6\040\uffa6\041\uffa6\043\uffa6\044\uffa6\115\uffa6\121" +
    "\uffa6\001\002\000\004\036\uff97\001\002\000\034\004\063" +
    "\005\043\006\053\007\044\010\047\011\061\023\040\025" +
    "\060\035\065\050\045\072\062\073\064\075\052\001\002" +
    "\000\050\012\107\013\105\014\077\015\072\016\075\017" +
    "\070\021\067\022\073\024\071\025\102\027\100\030\101" +
    "\031\104\032\110\033\074\034\103\036\uff94\043\123\121" +
    "\076\001\002\000\004\036\uff95\001\002\000\060\012\uff90" +
    "\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90\021\uff90\022" +
    "\uff90\024\uff90\025\uff90\027\100\030\101\031\104\032\110" +
    "\033\074\034\103\036\uff90\040\uff90\041\uff90\043\uff90\044" +
    "\uff90\115\uff90\121\076\001\002\000\060\012\uff8e\013\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\017\uff8e\021\uff8e\022\uff8e\024" +
    "\uff8e\025\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e" +
    "\034\103\036\uff8e\040\uff8e\041\uff8e\043\uff8e\044\uff8e\115" +
    "\uff8e\121\076\001\002\000\060\012\uff8f\013\uff8f\014\uff8f" +
    "\015\uff8f\016\uff8f\017\uff8f\021\uff8f\022\uff8f\024\uff8f\025" +
    "\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\103" +
    "\036\uff8f\040\uff8f\041\uff8f\043\uff8f\044\uff8f\115\uff8f\121" +
    "\076\001\002\000\044\021\uff88\022\uff88\024\071\025\102" +
    "\027\100\030\101\031\104\032\110\033\074\034\103\036" +
    "\uff88\040\uff88\041\uff88\043\uff88\044\uff88\115\uff88\121\076" +
    "\001\002\000\060\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\017\uffa9\021\uffa9\022\uffa9\024\uffa9\025\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\036\uffa9\040" +
    "\uffa9\041\uffa9\043\uffa9\044\uffa9\115\uffa9\121\uffa9\001\002" +
    "\000\044\021\uff86\022\uff86\024\071\025\102\027\100\030" +
    "\101\031\104\032\110\033\074\034\103\036\uff86\040\uff86" +
    "\041\uff86\043\uff86\044\uff86\115\uff86\121\076\001\002\000" +
    "\060\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b" +
    "\021\uff8b\022\uff8b\024\uff8b\025\uff8b\027\uff8b\030\uff8b\031" +
    "\uff8b\032\uff8b\033\uff8b\034\103\036\uff8b\040\uff8b\041\uff8b" +
    "\043\uff8b\044\uff8b\115\uff8b\121\076\001\002\000\060\012" +
    "\107\013\105\014\077\015\072\016\075\017\070\021\067" +
    "\022\uff93\024\071\025\102\027\100\030\101\031\104\032" +
    "\110\033\074\034\103\036\uff93\040\uff93\041\uff93\043\uff93" +
    "\044\uff93\115\uff93\121\076\001\002\000\044\021\uff85\022" +
    "\uff85\024\071\025\102\027\100\030\101\031\104\032\110" +
    "\033\074\034\103\036\uff85\040\uff85\041\uff85\043\uff85\044" +
    "\uff85\115\uff85\121\076\001\002\000\060\012\uff91\013\uff91" +
    "\014\uff91\015\uff91\016\uff91\017\uff91\021\uff91\022\uff91\024" +
    "\uff91\025\uff91\027\100\030\101\031\104\032\110\033\074" +
    "\034\103\036\uff91\040\uff91\041\uff91\043\uff91\044\uff91\115" +
    "\uff91\121\076\001\002\000\044\021\uff87\022\uff87\024\071" +
    "\025\102\027\100\030\101\031\104\032\110\033\074\034" +
    "\103\036\uff87\040\uff87\041\uff87\043\uff87\044\uff87\115\uff87" +
    "\121\076\001\002\000\060\012\107\013\105\014\077\015" +
    "\072\016\075\017\070\021\uff92\022\uff92\024\071\025\102" +
    "\027\100\030\101\031\104\032\110\033\074\034\103\036" +
    "\uff92\040\uff92\041\uff92\043\uff92\044\uff92\115\uff92\121\076" +
    "\001\002\000\004\035\143\001\002\000\036\004\063\005" +
    "\043\006\053\007\044\010\047\011\061\023\040\025\060" +
    "\035\065\036\uff96\050\045\072\062\073\064\075\052\001" +
    "\002\000\004\036\145\001\002\000\060\012\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\016\uff9a\017\uff9a\021\uff9a\022\uff9a\024" +
    "\uff9a\025\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a" +
    "\034\uff9a\036\uff9a\040\uff9a\041\uff9a\043\uff9a\044\uff9a\115" +
    "\uff9a\121\uff9a\001\002\000\060\012\uff83\013\uff83\014\uff83" +
    "\015\uff83\016\uff83\017\uff83\021\uff83\022\uff83\024\uff83\025" +
    "\uff83\027\100\030\101\031\104\032\110\033\074\034\103" +
    "\036\uff83\040\uff83\041\uff83\043\uff83\044\uff83\115\uff83\121" +
    "\076\001\002\000\012\005\uff78\044\uff78\102\uff78\103\uff78" +
    "\001\002\000\060\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016" +
    "\uff9e\017\uff9e\021\uff9e\022\uff9e\024\uff9e\025\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\036\uff9e\040" +
    "\uff9e\041\uff9e\043\uff9e\044\uff9e\115\uff9e\121\uff9e\001\002" +
    "\000\034\004\063\005\043\006\053\007\044\010\047\011" +
    "\061\023\040\025\060\035\065\050\045\072\062\073\064" +
    "\075\052\001\002\000\062\012\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\024\uffb5" +
    "\025\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\036\uffb5\040\uffb5\041\uffb5\043\uffb5\044\uffb5\115\uffb5" +
    "\121\uffb5\001\002\000\036\004\063\005\043\006\053\007" +
    "\044\010\047\011\061\023\040\025\060\035\065\036\uff96" +
    "\050\045\072\062\073\064\075\052\001\002\000\004\036" +
    "\155\001\002\000\106\012\uff82\013\uff82\014\uff82\015\uff82" +
    "\016\uff82\017\uff82\021\uff82\022\uff82\024\uff82\025\uff82\027" +
    "\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\036\uff82" +
    "\040\uff82\041\uff82\043\uff82\044\uff82\065\uff82\066\uff82\070" +
    "\uff82\104\uff82\110\uff82\111\uff82\112\uff82\113\uff82\114\uff82" +
    "\115\uff82\116\uff82\117\uff82\121\uff82\001\002\000\046\012" +
    "\107\013\105\014\077\015\072\016\075\017\070\021\067" +
    "\022\073\024\071\025\102\027\100\030\101\031\104\032" +
    "\110\033\074\034\103\040\157\121\076\001\002\000\064" +
    "\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020" +
    "\uff98\021\uff98\022\uff98\024\uff98\025\uff98\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\036\uff98\037\151\040" +
    "\uff98\041\uff98\043\uff98\044\uff98\115\uff98\121\uff98\001\002" +
    "\000\062\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017" +
    "\uff99\020\uff99\021\uff99\022\uff99\024\uff99\025\uff99\027\uff99" +
    "\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\036\uff99\040" +
    "\uff99\041\uff99\043\uff99\044\uff99\115\uff99\121\uff99\001\002" +
    "\000\060\012\107\013\105\014\077\015\072\016\075\017" +
    "\070\021\uff84\022\uff84\024\071\025\102\027\100\030\101" +
    "\031\104\032\110\033\074\034\103\036\uff84\040\uff84\041" +
    "\uff84\043\uff84\044\uff84\115\uff84\121\076\001\002\000\064" +
    "\005\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\021\uffd7\022\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\036\uffd7\037\163\040" +
    "\uffd7\041\uffd7\043\uffd7\044\uffd7\115\uffd7\121\uffd7\001\002" +
    "\000\034\004\063\005\043\006\053\007\044\010\047\011" +
    "\061\023\040\025\060\035\065\050\045\072\062\073\064" +
    "\075\052\001\002\000\062\005\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\024\uffd9" +
    "\025\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\036\uffd9\040\uffd9\041\uffd9\043\uffd9\044\uffd9\115\uffd9" +
    "\121\uffd9\001\002\000\046\012\107\013\105\014\077\015" +
    "\072\016\075\017\070\021\067\022\073\024\071\025\102" +
    "\027\100\030\101\031\104\032\110\033\074\034\103\040" +
    "\166\121\076\001\002\000\064\005\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7\024" +
    "\uffd7\025\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\036\uffd7\037\163\040\uffd7\041\uffd7\043\uffd7\044" +
    "\uffd7\115\uffd7\121\uffd7\001\002\000\062\005\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\021\uffd8\022" +
    "\uffd8\024\uffd8\025\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\036\uffd8\040\uffd8\041\uffd8\043\uffd8\044" +
    "\uffd8\115\uffd8\121\uffd8\001\002\000\004\005\171\001\002" +
    "\000\004\020\172\001\002\000\034\004\063\005\043\006" +
    "\053\007\044\010\047\011\061\023\040\025\060\035\065" +
    "\050\045\072\062\073\064\075\052\001\002\000\046\012" +
    "\107\013\105\014\077\015\072\016\075\017\070\021\067" +
    "\022\073\024\071\025\102\027\100\030\101\031\104\032" +
    "\110\033\074\034\103\044\174\121\076\001\002\000\012" +
    "\005\uff79\044\uff79\102\uff79\103\uff79\001\002\000\004\102" +
    "\uff7b\001\002\000\004\044\177\001\002\000\022\002\uff7c" +
    "\044\uff7c\046\uff7c\050\uff7c\061\uff7c\100\uff7c\101\uff7c\103" +
    "\uff7c\001\002\000\004\044\217\001\002\000\004\105\202" +
    "\001\002\000\006\005\031\106\204\001\002\000\004\047" +
    "\214\001\002\000\004\047\uff71\001\002\000\004\005\213" +
    "\001\002\000\006\043\207\047\uffdc\001\002\000\004\005" +
    "\031\001\002\000\004\047\uff70\001\002\000\010\036\uffdc" +
    "\043\207\047\uffdc\001\002\000\006\036\uffdd\047\uffdd\001" +
    "\002\000\010\036\uffdb\043\uffdb\047\uffdb\001\002\000\006" +
    "\005\031\106\215\001\002\000\004\044\uff72\001\002\000" +
    "\004\044\uff73\001\002\000\024\044\005\065\uffff\070\uffff" +
    "\104\uffff\107\uffff\110\uffff\112\uffff\113\uffff\114\uffff\001" +
    "\002\000\022\044\005\065\uffff\070\uffff\104\uffff\110\uffff" +
    "\112\uffff\113\uffff\114\uffff\001\002\000\024\044\uff6e\065" +
    "\uff6e\070\uff6e\104\uff6e\107\223\110\uff6e\112\uff6e\113\uff6e" +
    "\114\uff6e\001\002\000\024\044\005\065\uffff\070\uffff\104" +
    "\uffff\107\uffff\110\uffff\112\uffff\113\uffff\114\uffff\001\002" +
    "\000\004\005\031\001\002\000\004\005\225\001\002\000" +
    "\006\020\226\044\227\001\002\000\034\004\063\005\043" +
    "\006\053\007\044\010\047\011\061\023\040\025\060\035" +
    "\065\050\045\072\062\073\064\075\052\001\002\000\024" +
    "\044\uff6c\065\uff6c\070\uff6c\104\uff6c\107\uff6c\110\uff6c\112" +
    "\uff6c\113\uff6c\114\uff6c\001\002\000\046\012\107\013\105" +
    "\014\077\015\072\016\075\017\070\021\067\022\073\024" +
    "\071\025\102\027\100\030\101\031\104\032\110\033\074" +
    "\034\103\044\231\121\076\001\002\000\024\044\uff6d\065" +
    "\uff6d\070\uff6d\104\uff6d\107\uff6d\110\uff6d\112\uff6d\113\uff6d" +
    "\114\uff6d\001\002\000\022\044\uff6f\065\uff6f\070\uff6f\104" +
    "\uff6f\110\uff6f\112\uff6f\113\uff6f\114\uff6f\001\002\000\030" +
    "\065\245\066\uff6a\070\241\104\uff6a\110\242\111\uff6a\112" +
    "\237\113\243\114\246\116\uff6a\117\uff6a\001\002\000\004" +
    "\104\235\001\002\000\004\044\236\001\002\000\022\002" +
    "\uff74\044\uff74\046\uff74\050\uff74\061\uff74\100\uff74\101\uff74" +
    "\103\uff74\001\002\000\034\004\063\005\043\006\053\007" +
    "\044\010\047\011\061\023\040\025\060\035\065\050\045" +
    "\072\062\073\064\075\052\001\002\000\032\044\005\065" +
    "\uffff\066\uffff\070\uffff\104\uffff\110\uffff\111\uffff\112\uffff" +
    "\113\uffff\114\uffff\116\uffff\117\uffff\001\002\000\036\004" +
    "\063\005\043\006\053\007\044\010\047\011\061\023\040" +
    "\025\060\035\065\044\314\050\045\072\062\073\064\075" +
    "\052\001\002\000\004\044\307\001\002\000\034\004\063" +
    "\005\043\006\053\007\044\010\047\011\061\023\040\025" +
    "\060\035\065\050\045\072\062\073\064\075\052\001\002" +
    "\000\032\044\uff69\065\uff69\066\uff69\070\uff69\104\uff69\110" +
    "\uff69\111\uff69\112\uff69\113\uff69\114\uff69\116\uff69\117\uff69" +
    "\001\002\000\034\004\063\005\043\006\053\007\044\010" +
    "\047\011\061\023\040\025\060\035\065\050\045\072\062" +
    "\073\064\075\052\001\002\000\004\005\250\001\002\000" +
    "\032\044\uff63\065\uff63\066\uff63\070\uff63\104\uff63\110\uff63" +
    "\111\uff63\112\uff63\113\uff63\114\uff63\116\uff63\117\uff63\001" +
    "\002\000\004\035\153\001\002\000\046\012\107\013\105" +
    "\014\077\015\072\016\075\017\070\021\067\022\073\024" +
    "\071\025\102\027\100\030\101\031\104\032\110\033\074" +
    "\034\103\115\252\121\076\001\002\000\004\044\253\001" +
    "\002\000\026\044\005\065\uffff\066\uffff\070\uffff\110\uffff" +
    "\112\uffff\113\uffff\114\uffff\116\uffff\117\uffff\001\002\000" +
    "\010\066\256\116\255\117\260\001\002\000\034\004\063" +
    "\005\043\006\053\007\044\010\047\011\061\023\040\025" +
    "\060\035\065\050\045\072\062\073\064\075\052\001\002" +
    "\000\004\044\262\001\002\000\032\044\uff62\065\uff62\066" +
    "\uff62\070\uff62\104\uff62\110\uff62\111\uff62\112\uff62\113\uff62" +
    "\114\uff62\116\uff62\117\uff62\001\002\000\004\044\261\001" +
    "\002\000\032\044\uff5f\065\uff5f\066\uff5f\070\uff5f\104\uff5f" +
    "\110\uff5f\111\uff5f\112\uff5f\113\uff5f\114\uff5f\116\uff5f\117" +
    "\uff5f\001\002\000\022\044\005\065\uffff\070\uffff\110\uffff" +
    "\112\uffff\113\uffff\114\uffff\117\uffff\001\002\000\004\117" +
    "\264\001\002\000\004\044\265\001\002\000\032\044\uff60" +
    "\065\uff60\066\uff60\070\uff60\104\uff60\110\uff60\111\uff60\112" +
    "\uff60\113\uff60\114\uff60\116\uff60\117\uff60\001\002\000\046" +
    "\012\107\013\105\014\077\015\072\016\075\017\070\021" +
    "\067\022\073\024\071\025\102\027\100\030\101\031\104" +
    "\032\110\033\074\034\103\115\267\121\076\001\002\000" +
    "\004\044\270\001\002\000\026\044\005\065\uffff\066\uffff" +
    "\070\uffff\110\uffff\112\uffff\113\uffff\114\uffff\116\uffff\117" +
    "\uffff\001\002\000\010\066\256\116\255\117\260\001\002" +
    "\000\032\044\uff61\065\uff61\066\uff61\070\uff61\104\uff61\110" +
    "\uff61\111\uff61\112\uff61\113\uff61\114\uff61\116\uff61\117\uff61" +
    "\001\002\000\004\020\uffb9\001\002\000\004\020\304\001" +
    "\002\000\046\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b" +
    "\017\uff9b\020\uffb7\021\uff9b\022\uff9b\024\uff9b\025\uff9b\027" +
    "\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\121\uff9b" +
    "\001\002\000\046\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffba\021\uffaf\022\uffaf\024\uffaf\025\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\121" +
    "\uffaf\001\002\000\044\012\107\013\105\014\077\015\072" +
    "\016\075\017\070\021\067\022\073\024\071\025\102\027" +
    "\100\030\101\031\104\032\110\033\074\034\301\121\076" +
    "\001\002\000\046\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016" +
    "\uff9c\017\uff9c\020\uffb8\021\uff9c\022\uff9c\024\uff9c\025\uff9c" +
    "\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\121" +
    "\uff9c\001\002\000\004\005\302\001\002\000\052\012\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021" +
    "\uffa8\022\uffa8\024\uffa8\025\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\034\uffa8\035\116\037\151\121\uffa8\001" +
    "\002\000\004\020\uffa7\001\002\000\034\004\063\005\043" +
    "\006\053\007\044\010\047\011\061\023\040\025\060\035" +
    "\065\050\045\072\062\073\064\075\052\001\002\000\046" +
    "\012\107\013\105\014\077\015\072\016\075\017\070\021" +
    "\067\022\073\024\071\025\102\027\100\030\101\031\104" +
    "\032\110\033\074\034\103\044\306\121\076\001\002\000" +
    "\032\044\uff64\065\uff64\066\uff64\070\uff64\104\uff64\110\uff64" +
    "\111\uff64\112\uff64\113\uff64\114\uff64\116\uff64\117\uff64\001" +
    "\002\000\022\044\005\065\uffff\070\uffff\110\uffff\111\uffff" +
    "\112\uffff\113\uffff\114\uffff\001\002\000\004\111\311\001" +
    "\002\000\004\044\312\001\002\000\032\044\uff68\065\uff68" +
    "\066\uff68\070\uff68\104\uff68\110\uff68\111\uff68\112\uff68\113" +
    "\uff68\114\uff68\116\uff68\117\uff68\001\002\000\046\012\107" +
    "\013\105\014\077\015\072\016\075\017\070\021\067\022" +
    "\073\024\071\025\102\027\100\030\101\031\104\032\110" +
    "\033\074\034\103\044\315\121\076\001\002\000\032\044" +
    "\uff66\065\uff66\066\uff66\070\uff66\104\uff66\110\uff66\111\uff66" +
    "\112\uff66\113\uff66\114\uff66\116\uff66\117\uff66\001\002\000" +
    "\032\044\uff65\065\uff65\066\uff65\070\uff65\104\uff65\110\uff65" +
    "\111\uff65\112\uff65\113\uff65\114\uff65\116\uff65\117\uff65\001" +
    "\002\000\014\066\uff6b\104\uff6b\111\uff6b\116\uff6b\117\uff6b" +
    "\001\002\000\046\012\107\013\105\014\077\015\072\016" +
    "\075\017\070\021\067\022\073\024\071\025\102\027\100" +
    "\030\101\031\104\032\110\033\074\034\103\044\320\121" +
    "\076\001\002\000\032\044\uff67\065\uff67\066\uff67\070\uff67" +
    "\104\uff67\110\uff67\111\uff67\112\uff67\113\uff67\114\uff67\116" +
    "\uff67\117\uff67\001\002\000\004\002\ufffe\001\002\000\004" +
    "\074\323\001\002\000\004\005\031\001\002\000\004\044" +
    "\325\001\002\000\022\002\uff7d\044\uff7d\046\uff7d\050\uff7d" +
    "\061\uff7d\100\uff7d\101\uff7d\103\uff7d\001\002\000\004\044" +
    "\327\001\002\000\022\002\uff76\044\uff76\046\uff76\050\uff76" +
    "\061\uff76\100\uff76\101\uff76\103\uff76\001\002\000\004\041" +
    "\331\001\002\000\004\044\332\001\002\000\034\005\uffff" +
    "\042\uffff\044\005\050\uffff\051\uffff\052\uffff\053\uffff\054" +
    "\uffff\056\uffff\057\uffff\060\uffff\061\uffff\071\uffff\001\002" +
    "\000\034\005\ufff4\042\ufff4\044\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\054\ufff4\056\u0176\057\ufff4\060\ufff4\061\ufff4" +
    "\071\ufff4\001\002\000\032\005\uffff\042\uffff\044\005\050" +
    "\uffff\051\uffff\052\uffff\053\uffff\054\uffff\057\uffff\060\uffff" +
    "\061\uffff\071\uffff\001\002\000\030\005\ufff7\042\ufff1\050" +
    "\ufff7\051\ufff7\052\340\053\346\054\347\057\ufff7\060\351" +
    "\061\341\071\ufff7\001\002\000\004\042\337\001\002\000" +
    "\022\002\ufff6\044\ufff6\046\ufff6\050\ufff6\061\ufff6\100\ufff6" +
    "\101\ufff6\103\ufff6\001\002\000\016\005\ufffa\050\ufffa\051" +
    "\ufffa\057\ufffa\071\ufffa\076\ufffa\001\002\000\004\005\u0139" +
    "\001\002\000\032\005\uffff\042\uffff\044\005\050\uffff\051" +
    "\uffff\052\uffff\053\uffff\054\uffff\057\uffff\060\uffff\061\uffff" +
    "\071\uffff\001\002\000\032\005\uffed\042\uffed\044\uffed\050" +
    "\uffed\051\uffed\052\uffed\053\uffed\054\uffed\057\uffed\060\uffed" +
    "\061\uffed\071\uffed\001\002\000\032\005\uffea\042\uffea\044" +
    "\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\057\uffea" +
    "\060\uffea\061\uffea\071\uffea\001\002\000\032\005\uffee\042" +
    "\uffee\044\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee" +
    "\057\uffee\060\uffee\061\uffee\071\uffee\001\002\000\016\005" +
    "\ufff8\050\ufff8\051\ufff8\057\ufff8\071\ufff8\076\ufff8\001\002" +
    "\000\016\005\ufff9\050\ufff9\051\ufff9\057\ufff9\071\ufff9\076" +
    "\ufff9\001\002\000\014\005\031\050\u0137\051\u0134\057\u0133" +
    "\071\u0135\001\002\000\004\041\352\001\002\000\004\044" +
    "\353\001\002\000\054\003\uffff\004\uffff\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\023\uffff\025\uffff\035\uffff\042" +
    "\uffff\044\005\050\uffff\051\uffff\065\uffff\067\uffff\070\uffff" +
    "\072\uffff\073\uffff\075\uffff\120\uffff\001\002\000\052\003" +
    "\373\004\063\005\u0105\006\053\007\044\010\047\011\061" +
    "\023\040\025\060\035\065\042\uffd1\050\045\051\362\065" +
    "\370\067\u0100\070\371\072\062\073\064\075\052\120\367" +
    "\001\002\000\004\042\356\001\002\000\004\044\357\001" +
    "\002\000\032\005\uffec\042\uffec\044\uffec\050\uffec\051\uffec" +
    "\052\uffec\053\uffec\054\uffec\057\uffec\060\uffec\061\uffec\071" +
    "\uffec\001\002\000\054\003\uffce\004\uffce\005\uffce\006\uffce" +
    "\007\uffce\010\uffce\011\uffce\023\uffce\025\uffce\035\uffce\042" +
    "\uffce\044\uffce\050\uffce\051\uffce\065\uffce\067\uffce\070\uffce" +
    "\072\uffce\073\uffce\075\uffce\120\uffce\001\002\000\054\003" +
    "\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\023\uffc8\025\uffc8\035\uffc8\042\uffc8\044\uffc8\050\uffc8\051" +
    "\uffc8\065\uffc8\067\uffc8\070\uffc8\072\uffc8\073\uffc8\075\uffc8" +
    "\120\uffc8\001\002\000\004\005\u012a\001\002\000\054\003" +
    "\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\023\uffcd\025\uffcd\035\uffcd\042\uffcd\044\uffcd\050\uffcd\051" +
    "\uffcd\065\uffcd\067\uffcd\070\uffcd\072\uffcd\073\uffcd\075\uffcd" +
    "\120\uffcd\001\002\000\054\003\uffc9\004\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\023\uffc9\025\uffc9\035\uffc9" +
    "\042\uffc9\044\uffc9\050\uffc9\051\uffc9\065\uffc9\067\uffc9\070" +
    "\uffc9\072\uffc9\073\uffc9\075\uffc9\120\uffc9\001\002\000\054" +
    "\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\023\uffcc\025\uffcc\035\uffcc\042\uffcc\044\uffcc\050\uffcc" +
    "\051\uffcc\065\uffcc\067\uffcc\070\uffcc\072\uffcc\073\uffcc\075" +
    "\uffcc\120\uffcc\001\002\000\046\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\021\uffac\022\uffac\024\uffac\025" +
    "\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac" +
    "\044\u0129\121\uffac\001\002\000\034\004\063\005\043\006" +
    "\053\007\044\010\047\011\061\023\040\025\060\035\065" +
    "\050\045\072\062\073\064\075\052\001\002\000\034\004" +
    "\063\005\043\006\053\007\044\010\047\011\061\023\040" +
    "\025\060\035\065\050\045\072\062\073\064\075\052\001" +
    "\002\000\034\004\063\005\043\006\053\007\044\010\047" +
    "\011\061\023\040\025\060\035\065\050\045\072\062\073" +
    "\064\075\052\001\002\000\054\003\uffd0\004\uffd0\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\011\uffd0\023\uffd0\025\uffd0\035" +
    "\uffd0\042\uffd0\044\uffd0\050\uffd0\051\uffd0\065\uffd0\067\uffd0" +
    "\070\uffd0\072\uffd0\073\uffd0\075\uffd0\120\uffd0\001\002\000" +
    "\004\044\u0117\001\002\000\046\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\016\uffad\017\uffad\021\uffad\022\uffad\024\uffad\025" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad" +
    "\044\u0116\121\uffad\001\002\000\004\020\u0113\001\002\000" +
    "\054\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\023\uffca\025\uffca\035\uffca\042\uffca\044\uffca\050" +
    "\uffca\051\uffca\065\uffca\067\uffca\070\uffca\072\uffca\073\uffca" +
    "\075\uffca\120\uffca\001\002\000\004\005\u010e\001\002\000" +
    "\034\004\063\005\043\006\053\007\044\010\047\011\061" +
    "\023\040\025\060\035\065\050\045\072\062\073\064\075" +
    "\052\001\002\000\054\003\uffff\004\uffff\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\023\uffff\025\uffff\035\uffff\042" +
    "\uffff\044\005\050\uffff\051\uffff\065\uffff\067\uffff\070\uffff" +
    "\072\uffff\073\uffff\075\uffff\120\uffff\001\002\000\046\012" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\021\uffae" +
    "\022\uffae\024\uffae\025\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\044\u0106\121\uffae\001\002\000\054" +
    "\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\023\uffcb\025\uffcb\035\uffcb\042\uffcb\044\uffcb\050\uffcb" +
    "\051\uffcb\065\uffcb\067\uffcb\070\uffcb\072\uffcb\073\uffcb\075" +
    "\uffcb\120\uffcb\001\002\000\054\003\uffcf\004\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\023\uffcf\025\uffcf\035" +
    "\uffcf\042\uffcf\044\uffcf\050\uffcf\051\uffcf\065\uffcf\067\uffcf" +
    "\070\uffcf\072\uffcf\073\uffcf\075\uffcf\120\uffcf\001\002\000" +
    "\056\005\uffda\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\024\uffb6\025\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\153" +
    "\037\151\064\162\121\uffb6\001\002\000\054\003\uffb4\004" +
    "\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\023\uffb4" +
    "\025\uffb4\035\uffb4\042\uffb4\044\uffb4\050\uffb4\051\uffb4\065" +
    "\uffb4\067\uffb4\070\uffb4\072\uffb4\073\uffb4\075\uffb4\120\uffb4" +
    "\001\002\000\004\042\uffd2\001\002\000\046\012\107\013" +
    "\105\014\077\015\072\016\075\017\070\021\067\022\073" +
    "\024\071\025\102\027\100\030\101\031\104\032\110\033" +
    "\074\034\103\041\u0109\121\076\001\002\000\004\044\u010a" +
    "\001\002\000\054\003\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\023\uffff\025\uffff\035\uffff\042\uffff" +
    "\044\005\050\uffff\051\uffff\065\uffff\067\uffff\070\uffff\072" +
    "\uffff\073\uffff\075\uffff\120\uffff\001\002\000\004\042\u010c" +
    "\001\002\000\004\044\u010d\001\002\000\054\003\uffc0\004" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\023\uffc0" +
    "\025\uffc0\035\uffc0\042\uffc0\044\uffc0\050\uffc0\051\uffc0\065" +
    "\uffc0\067\uffc0\070\uffc0\072\uffc0\073\uffc0\075\uffc0\120\uffc0" +
    "\001\002\000\006\020\u010f\044\u0110\001\002\000\034\004" +
    "\063\005\043\006\053\007\044\010\047\011\061\023\040" +
    "\025\060\035\065\050\045\072\062\073\064\075\052\001" +
    "\002\000\054\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\023\uffbc\025\uffbc\035\uffbc\042\uffbc\044" +
    "\uffbc\050\uffbc\051\uffbc\065\uffbc\067\uffbc\070\uffbc\072\uffbc" +
    "\073\uffbc\075\uffbc\120\uffbc\001\002\000\046\012\107\013" +
    "\105\014\077\015\072\016\075\017\070\021\067\022\073" +
    "\024\071\025\102\027\100\030\101\031\104\032\110\033" +
    "\074\034\103\044\u0112\121\076\001\002\000\054\003\uffbd" +
    "\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\023" +
    "\uffbd\025\uffbd\035\uffbd\042\uffbd\044\uffbd\050\uffbd\051\uffbd" +
    "\065\uffbd\067\uffbd\070\uffbd\072\uffbd\073\uffbd\075\uffbd\120" +
    "\uffbd\001\002\000\034\004\063\005\043\006\053\007\044" +
    "\010\047\011\061\023\040\025\060\035\065\050\045\072" +
    "\062\073\064\075\052\001\002\000\046\012\107\013\105" +
    "\014\077\015\072\016\075\017\070\021\067\022\073\024" +
    "\071\025\102\027\100\030\101\031\104\032\110\033\074" +
    "\034\103\044\u0115\121\076\001\002\000\054\003\uffbb\004" +
    "\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\023\uffbb" +
    "\025\uffbb\035\uffbb\042\uffbb\044\uffbb\050\uffbb\051\uffbb\065" +
    "\uffbb\067\uffbb\070\uffbb\072\uffbb\073\uffbb\075\uffbb\120\uffbb" +
    "\001\002\000\054\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\011\uffb3\023\uffb3\025\uffb3\035\uffb3\042\uffb3" +
    "\044\uffb3\050\uffb3\051\uffb3\065\uffb3\067\uffb3\070\uffb3\072" +
    "\uffb3\073\uffb3\075\uffb3\120\uffb3\001\002\000\054\003\uffc7" +
    "\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\023" +
    "\uffc7\025\uffc7\035\uffc7\042\uffc7\044\uffc7\050\uffc7\051\uffc7" +
    "\065\uffc7\067\uffc7\070\uffc7\072\uffc7\073\uffc7\075\uffc7\120" +
    "\uffc7\001\002\000\046\012\107\013\105\014\077\015\072" +
    "\016\075\017\070\021\067\022\073\024\071\025\102\027" +
    "\100\030\101\031\104\032\110\033\074\034\103\044\u0119" +
    "\121\076\001\002\000\054\003\uffc5\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\023\uffc5\025\uffc5\035\uffc5" +
    "\042\uffc5\044\uffc5\050\uffc5\051\uffc5\065\uffc5\067\uffc5\070" +
    "\uffc5\072\uffc5\073\uffc5\075\uffc5\120\uffc5\001\002\000\046" +
    "\012\107\013\105\014\077\015\072\016\075\017\070\021" +
    "\067\022\073\024\071\025\102\027\100\030\101\031\104" +
    "\032\110\033\074\034\103\041\u011b\121\076\001\002\000" +
    "\004\044\u011c\001\002\000\054\003\uffff\004\uffff\005\uffff" +
    "\006\uffff\007\uffff\010\uffff\011\uffff\023\uffff\025\uffff\035" +
    "\uffff\042\uffff\044\005\050\uffff\051\uffff\065\uffff\067\uffff" +
    "\070\uffff\072\uffff\073\uffff\075\uffff\120\uffff\001\002\000" +
    "\004\042\u011e\001\002\000\006\044\u011f\066\u0120\001\002" +
    "\000\054\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\011\uffc4\023\uffc4\025\uffc4\035\uffc4\042\uffc4\044\uffc4" +
    "\050\uffc4\051\uffc4\065\uffc4\067\uffc4\070\uffc4\072\uffc4\073" +
    "\uffc4\075\uffc4\120\uffc4\001\002\000\006\041\u0121\065\370" +
    "\001\002\000\054\003\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\023\uffff\025\uffff\035\uffff\042\uffff" +
    "\044\005\050\uffff\051\uffff\065\uffff\067\uffff\070\uffff\072" +
    "\uffff\073\uffff\075\uffff\120\uffff\001\002\000\054\003\uffc3" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\023" +
    "\uffc3\025\uffc3\035\uffc3\042\uffc3\044\uffc3\050\uffc3\051\uffc3" +
    "\065\uffc3\067\uffc3\070\uffc3\072\uffc3\073\uffc3\075\uffc3\120" +
    "\uffc3\001\002\000\054\003\uffc2\004\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\011\uffc2\023\uffc2\025\uffc2\035\uffc2\042" +
    "\uffc2\044\uffc2\050\uffc2\051\uffc2\065\uffc2\067\uffc2\070\uffc2" +
    "\072\uffc2\073\uffc2\075\uffc2\120\uffc2\001\002\000\004\042" +
    "\u0125\001\002\000\004\044\u0126\001\002\000\054\003\uffc1" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\023" +
    "\uffc1\025\uffc1\035\uffc1\042\uffc1\044\uffc1\050\uffc1\051\uffc1" +
    "\065\uffc1\067\uffc1\070\uffc1\072\uffc1\073\uffc1\075\uffc1\120" +
    "\uffc1\001\002\000\046\012\107\013\105\014\077\015\072" +
    "\016\075\017\070\021\067\022\073\024\071\025\102\027" +
    "\100\030\101\031\104\032\110\033\074\034\103\044\u0128" +
    "\121\076\001\002\000\054\003\uffc6\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\023\uffc6\025\uffc6\035\uffc6" +
    "\042\uffc6\044\uffc6\050\uffc6\051\uffc6\065\uffc6\067\uffc6\070" +
    "\uffc6\072\uffc6\073\uffc6\075\uffc6\120\uffc6\001\002\000\054" +
    "\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011" +
    "\uffb2\023\uffb2\025\uffb2\035\uffb2\042\uffb2\044\uffb2\050\uffb2" +
    "\051\uffb2\065\uffb2\067\uffb2\070\uffb2\072\uffb2\073\uffb2\075" +
    "\uffb2\120\uffb2\001\002\000\010\005\uffda\020\u0130\064\162" +
    "\001\002\000\004\005\u012c\001\002\000\004\020\u012d\001" +
    "\002\000\034\004\063\005\043\006\053\007\044\010\047" +
    "\011\061\023\040\025\060\035\065\050\045\072\062\073" +
    "\064\075\052\001\002\000\046\012\107\013\105\014\077" +
    "\015\072\016\075\017\070\021\067\022\073\024\071\025" +
    "\102\027\100\030\101\031\104\032\110\033\074\034\103" +
    "\044\u012f\121\076\001\002\000\054\003\uffbe\004\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\023\uffbe\025\uffbe" +
    "\035\uffbe\042\uffbe\044\uffbe\050\uffbe\051\uffbe\065\uffbe\067" +
    "\uffbe\070\uffbe\072\uffbe\073\uffbe\075\uffbe\120\uffbe\001\002" +
    "\000\034\004\063\005\043\006\053\007\044\010\047\011" +
    "\061\023\040\025\060\035\065\050\045\072\062\073\064" +
    "\075\052\001\002\000\046\012\107\013\105\014\077\015" +
    "\072\016\075\017\070\021\067\022\073\024\071\025\102" +
    "\027\100\030\101\031\104\032\110\033\074\034\103\044" +
    "\u0132\121\076\001\002\000\054\003\uffbf\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\023\uffbf\025\uffbf\035" +
    "\uffbf\042\uffbf\044\uffbf\050\uffbf\051\uffbf\065\uffbf\067\uffbf" +
    "\070\uffbf\072\uffbf\073\uffbf\075\uffbf\120\uffbf\001\002\000" +
    "\004\005\u016e\001\002\000\004\005\u0165\001\002\000\004" +
    "\005\u014a\001\002\000\004\005\u0145\001\002\000\004\005" +
    "\u0139\001\002\000\004\041\u0141\001\002\000\004\035\u013a" +
    "\001\002\000\006\005\031\036\uffde\001\002\000\004\036" +
    "\u013e\001\002\000\006\036\uffdc\043\207\001\002\000\004" +
    "\036\uffdf\001\002\000\010\041\uffe0\044\uffe0\047\u013f\001" +
    "\002\000\004\005\031\001\002\000\006\041\uffe1\044\uffe1" +
    "\001\002\000\004\044\u0142\001\002\000\054\003\uffff\004" +
    "\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\023\uffff" +
    "\025\uffff\035\uffff\042\uffff\044\005\050\uffff\051\uffff\065" +
    "\uffff\067\uffff\070\uffff\072\uffff\073\uffff\075\uffff\120\uffff" +
    "\001\002\000\004\042\u0144\001\002\000\036\005\uffe2\042" +
    "\uffe2\044\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\071\uffe2\076\uffe2\077\uffe2\001" +
    "\002\000\006\020\u0146\044\u0147\001\002\000\034\004\063" +
    "\005\043\006\053\007\044\010\047\011\061\023\040\025" +
    "\060\035\065\050\045\072\062\073\064\075\052\001\002" +
    "\000\036\005\uffd3\042\uffd3\044\uffd3\050\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\054\uffd3\057\uffd3\060\uffd3\061\uffd3\071\uffd3" +
    "\076\uffd3\077\uffd3\001\002\000\046\012\107\013\105\014" +
    "\077\015\072\016\075\017\070\021\067\022\073\024\071" +
    "\025\102\027\100\030\101\031\104\032\110\033\074\034" +
    "\103\044\u0149\121\076\001\002\000\036\005\uffd4\042\uffd4" +
    "\044\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\057" +
    "\uffd4\060\uffd4\061\uffd4\071\uffd4\076\uffd4\077\uffd4\001\002" +
    "\000\004\041\u014b\001\002\000\004\044\u014c\001\002\000" +
    "\026\005\uffff\042\uffff\044\005\050\uffff\051\uffff\052\uffff" +
    "\053\uffff\054\uffff\076\uffff\077\uffff\001\002\000\004\042" +
    "\u0163\001\002\000\024\005\ufff7\042\uffe7\050\ufff7\051\ufff7" +
    "\052\340\053\346\054\347\076\ufff7\077\u0150\001\002\000" +
    "\026\005\uffff\042\uffff\044\005\050\uffff\051\uffff\052\uffff" +
    "\053\uffff\054\uffff\076\uffff\077\uffff\001\002\000\004\041" +
    "\u015d\001\002\000\026\005\uffe4\042\uffe4\044\uffe4\050\uffe4" +
    "\051\uffe4\052\uffe4\053\uffe4\054\uffe4\076\uffe4\077\uffe4\001" +
    "\002\000\012\005\031\050\u0137\051\u0134\076\u0154\001\002" +
    "\000\026\005\uffe3\042\uffe3\044\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\076\uffe3\077\uffe3\001\002\000\004" +
    "\035\u0155\001\002\000\006\005\031\036\uffde\001\002\000" +
    "\004\036\u0157\001\002\000\004\041\u0158\001\002\000\004" +
    "\044\u0159\001\002\000\054\003\uffff\004\uffff\005\uffff\006" +
    "\uffff\007\uffff\010\uffff\011\uffff\023\uffff\025\uffff\035\uffff" +
    "\042\uffff\044\005\050\uffff\051\uffff\065\uffff\067\uffff\070" +
    "\uffff\072\uffff\073\uffff\075\uffff\120\uffff\001\002\000\004" +
    "\042\u015b\001\002\000\004\044\u015c\001\002\000\026\005" +
    "\uffe6\042\uffe6\044\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\076\uffe6\077\uffe6\001\002\000\004\044\u015e\001" +
    "\002\000\054\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff" +
    "\010\uffff\011\uffff\023\uffff\025\uffff\035\uffff\042\uffff\044" +
    "\005\050\uffff\051\uffff\065\uffff\067\uffff\070\uffff\072\uffff" +
    "\073\uffff\075\uffff\120\uffff\001\002\000\004\042\u0160\001" +
    "\002\000\004\044\u0161\001\002\000\026\005\uffe5\042\uffe5" +
    "\044\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\076" +
    "\uffe5\077\uffe5\001\002\000\004\042\uffe8\001\002\000\004" +
    "\044\u0164\001\002\000\032\005\uffe9\042\uffe9\044\uffe9\050" +
    "\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\057\uffe9\060\uffe9" +
    "\061\uffe9\071\uffe9\001\002\000\010\005\uffda\020\u016b\064" +
    "\162\001\002\000\004\005\u0167\001\002\000\004\020\u0168" +
    "\001\002\000\034\004\063\005\043\006\053\007\044\010" +
    "\047\011\061\023\040\025\060\035\065\050\045\072\062" +
    "\073\064\075\052\001\002\000\046\012\107\013\105\014" +
    "\077\015\072\016\075\017\070\021\067\022\073\024\071" +
    "\025\102\027\100\030\101\031\104\032\110\033\074\034" +
    "\103\044\u016a\121\076\001\002\000\036\005\uffd5\042\uffd5" +
    "\044\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\057" +
    "\uffd5\060\uffd5\061\uffd5\071\uffd5\076\uffd5\077\uffd5\001\002" +
    "\000\034\004\063\005\043\006\053\007\044\010\047\011" +
    "\061\023\040\025\060\035\065\050\045\072\062\073\064" +
    "\075\052\001\002\000\046\012\107\013\105\014\077\015" +
    "\072\016\075\017\070\021\067\022\073\024\071\025\102" +
    "\027\100\030\101\031\104\032\110\033\074\034\103\044" +
    "\u016d\121\076\001\002\000\036\005\uffd6\042\uffd6\044\uffd6" +
    "\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\057\uffd6\060" +
    "\uffd6\061\uffd6\071\uffd6\076\uffd6\077\uffd6\001\002\000\006" +
    "\044\u0170\074\u016f\001\002\000\004\005\031\001\002\000" +
    "\032\005\uffef\042\uffef\044\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\057\uffef\060\uffef\061\uffef\071\uffef\001" +
    "\002\000\004\044\u0172\001\002\000\032\005\ufff0\042\ufff0" +
    "\044\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\057" +
    "\ufff0\060\ufff0\061\ufff0\071\ufff0\001\002\000\004\042\ufff2" +
    "\001\002\000\004\044\u0175\001\002\000\032\005\uffeb\042" +
    "\uffeb\044\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\071\uffeb\001\002\000\004\005" +
    "\u0179\001\002\000\034\005\uffff\042\uffff\044\005\050\uffff" +
    "\051\uffff\052\uffff\053\uffff\054\uffff\056\uffff\057\uffff\060" +
    "\uffff\061\uffff\071\uffff\001\002\000\032\005\ufff5\042\ufff5" +
    "\044\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\057" +
    "\ufff5\060\ufff5\061\ufff5\071\ufff5\001\002\000\004\044\u017a" +
    "\001\002\000\034\005\ufff3\042\ufff3\044\ufff3\050\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\054\ufff3\056\ufff3\057\ufff3\060\ufff3" +
    "\061\ufff3\071\ufff3\001\002\000\004\005\201\001\002\000" +
    "\004\044\u017d\001\002\000\022\002\uff75\044\uff75\046\uff75" +
    "\050\uff75\061\uff75\100\uff75\101\uff75\103\uff75\001\002\000" +
    "\140\002\000\003\000\004\000\005\000\006\000\007\000" +
    "\010\000\011\000\023\000\025\000\035\000\042\000\044" +
    "\000\046\000\050\000\051\000\052\000\053\000\054\000" +
    "\056\000\057\000\060\000\061\000\065\000\066\000\067" +
    "\000\070\000\071\000\072\000\073\000\075\000\076\000" +
    "\077\000\100\000\101\000\102\000\103\000\104\000\107" +
    "\000\110\000\111\000\112\000\113\000\114\000\116\000" +
    "\117\000\120\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\006\012\003\041\005\001\001\000\002\001" +
    "\001\000\004\041\u017d\001\001\000\020\054\012\056\016" +
    "\065\022\075\007\076\013\107\017\110\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\325\001\001\000\002\001\001\000\006\012\320\041\005" +
    "\001\001\000\002\001\001\000\004\030\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\025\077\024" +
    "\001\001\000\002\001\001\000\006\055\031\100\026\001" +
    "\001\000\006\041\025\077\174\001\001\000\004\055\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\014\050\015\045\017\053\020\056\021\036" +
    "\022\041\023\035\024\047\025\055\060\054\061\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\014\160\015\045\017\053\020\056\021\036\022" +
    "\041\023\035\024\047\025\055\060\054\061\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\014" +
    "\145\015\045\017\053\020\056\021\036\022\041\023\035" +
    "\024\047\025\055\060\054\061\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\014\065\015\045\017\053\020\056\021\036\022" +
    "\041\023\035\024\047\025\055\060\054\061\040\001\001" +
    "\000\002\001\001\000\030\014\140\015\045\017\053\020" +
    "\056\021\036\022\041\023\035\024\047\025\055\060\054" +
    "\061\040\001\001\000\030\014\137\015\045\017\053\020" +
    "\056\021\036\022\041\023\035\024\047\025\055\060\054" +
    "\061\040\001\001\000\030\014\136\015\045\017\053\020" +
    "\056\021\036\022\041\023\035\024\047\025\055\060\054" +
    "\061\040\001\001\000\030\014\135\015\045\017\053\020" +
    "\056\021\036\022\041\023\035\024\047\025\055\060\054" +
    "\061\040\001\001\000\030\014\134\015\045\017\053\020" +
    "\056\021\036\022\041\023\035\024\047\025\055\060\054" +
    "\061\040\001\001\000\030\014\133\015\045\017\053\020" +
    "\056\021\036\022\041\023\035\024\047\025\055\060\054" +
    "\061\040\001\001\000\030\014\132\015\045\017\053\020" +
    "\056\021\036\022\041\023\035\024\047\025\055\060\054" +
    "\061\040\001\001\000\004\055\131\001\001\000\030\014" +
    "\130\015\045\017\053\020\056\021\036\022\041\023\035" +
    "\024\047\025\055\060\054\061\040\001\001\000\030\014" +
    "\127\015\045\017\053\020\056\021\036\022\041\023\035" +
    "\024\047\025\055\060\054\061\040\001\001\000\030\014" +
    "\126\015\045\017\053\020\056\021\036\022\041\023\035" +
    "\024\047\025\055\060\054\061\040\001\001\000\030\014" +
    "\125\015\045\017\053\020\056\021\036\022\041\023\035" +
    "\024\047\025\055\060\054\061\040\001\001\000\002\001" +
    "\001\000\030\014\113\015\045\017\053\020\056\021\036" +
    "\022\041\023\035\024\047\025\055\060\054\061\040\001" +
    "\001\000\030\014\112\015\045\017\053\020\056\021\036" +
    "\022\041\023\035\024\047\025\055\060\054\061\040\001" +
    "\001\000\002\001\001\000\030\014\111\015\045\017\053" +
    "\020\056\021\036\022\041\023\035\024\047\025\055\060" +
    "\054\061\040\001\001\000\030\014\110\015\045\017\053" +
    "\020\056\021\036\022\041\023\035\024\047\025\055\060" +
    "\054\061\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\117\014\116\015\045\017\053\020\056\021\036" +
    "\022\041\023\035\024\047\025\055\060\054\061\040\001" +
    "\001\000\004\003\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\014\123\015\045\017" +
    "\053\020\056\021\036\022\041\023\035\024\047\025\055" +
    "\060\054\061\040\001\001\000\004\003\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\002\143\014\116\015\045\017\053" +
    "\020\056\021\036\022\041\023\035\024\047\025\055\060" +
    "\054\061\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\014\155\015\045\017\053\020\056\021\036\022\041" +
    "\023\035\024\047\025\055\060\054\061\040\001\001\000" +
    "\002\001\001\000\032\002\153\014\116\015\045\017\053" +
    "\020\056\021\036\022\041\023\035\024\047\025\055\060" +
    "\054\061\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\163\001\001\000\030" +
    "\014\164\015\045\017\053\020\056\021\036\022\041\023" +
    "\035\024\047\025\055\060\054\061\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\014\172\015\045\017\053\020\056\021\036\022\041\023" +
    "\035\024\047\025\055\060\054\061\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\055\204\066\205\071\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\207" +
    "\001\001\000\006\055\204\066\210\001\001\000\002\001" +
    "\001\000\004\070\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\220\101\217\001\001\000\006" +
    "\041\232\102\233\001\001\000\004\103\221\001\001\000" +
    "\006\041\220\101\231\001\001\000\004\055\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\014\227\015" +
    "\045\017\053\020\056\021\036\022\041\023\035\024\047" +
    "\025\055\060\054\061\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\104\237\105\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\014\316\015\045\017\053" +
    "\020\056\021\036\022\041\023\035\024\047\025\055\060" +
    "\054\061\040\001\001\000\006\041\232\102\315\001\001" +
    "\000\030\014\312\015\045\017\053\020\056\021\036\022" +
    "\041\023\035\024\047\025\055\060\054\061\040\001\001" +
    "\000\002\001\001\000\034\014\276\015\045\016\273\017" +
    "\053\020\056\021\036\022\275\023\035\024\047\025\055" +
    "\036\272\060\277\061\274\001\001\000\002\001\001\000" +
    "\030\014\250\015\045\017\053\020\056\021\036\022\041" +
    "\023\035\024\047\025\055\060\054\061\040\001\001\000" +
    "\004\024\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\041\232\102" +
    "\253\001\001\000\004\106\256\001\001\000\030\014\265" +
    "\015\045\017\053\020\056\021\036\022\041\023\035\024" +
    "\047\025\055\060\054\061\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\232\102\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\232\102\270\001\001\000\004\106\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\302\001" +
    "\001\000\002\001\001\000\030\014\304\015\045\017\053" +
    "\020\056\021\036\022\041\023\035\024\047\025\055\060" +
    "\054\061\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\232\102\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\332\064\333\001\001\000" +
    "\004\033\u0176\001\001\000\006\041\334\062\335\001\001" +
    "\000\014\005\343\013\341\026\344\057\342\111\347\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\u0173\001\001\000\006\041\334\062\u0172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\u0135\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\041\353" +
    "\074\354\001\001\000\062\014\276\015\045\016\374\017" +
    "\053\020\056\021\u0101\022\275\023\035\024\373\025\365" +
    "\034\357\036\272\043\364\044\360\045\375\046\371\047" +
    "\363\050\u0102\051\362\052\u0103\055\376\060\277\061\274" +
    "\072\u0100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\u012a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\014\u0126\015\045" +
    "\017\053\020\056\021\036\022\041\023\035\024\047\025" +
    "\055\060\054\061\040\001\001\000\030\014\u0119\015\045" +
    "\017\053\020\056\021\036\022\041\023\035\024\047\025" +
    "\055\060\054\061\040\001\001\000\030\014\u0117\015\045" +
    "\017\053\020\056\021\036\022\041\023\035\024\047\025" +
    "\055\060\054\061\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\014\u0107\015\045\017\053" +
    "\020\056\021\036\022\041\023\035\024\047\025\055\060" +
    "\054\061\040\001\001\000\006\041\353\074\u0106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\041\353\074" +
    "\u010a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\014\u0110\015\045\017" +
    "\053\020\056\021\036\022\041\023\035\024\047\025\055" +
    "\060\054\061\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\014\u0113\015\045\017\053" +
    "\020\056\021\036\022\041\023\035\024\047\025\055\060" +
    "\054\061\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\041\353\074\u011c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\046\u0122\073\u0121\001\001" +
    "\000\006\041\353\074\u0123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\014\u012d\015\045\017\053\020\056\021\036\022" +
    "\041\023\035\024\047\025\055\060\054\061\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\014\u0130\015" +
    "\045\017\053\020\056\021\036\022\041\023\035\024\047" +
    "\025\055\060\054\061\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\u0165\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\u0137\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\055\204" +
    "\066\u013b\067\u013a\001\001\000\002\001\001\000\004\070" +
    "\u013c\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\u013f\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\353\074\u0142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\014\u0147\015\045\017" +
    "\053\020\056\021\036\022\041\023\035\024\047\025\055" +
    "\060\054\061\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\u014c\041\u014d\001\001\000\002\001\001\000" +
    "\012\010\u014e\026\u0152\057\u0150\111\u0151\001\001\000\006" +
    "\007\u0161\041\u014d\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\u0135\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\055\204\066\u013b\067\u0155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\041\353\074\u0159\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\041\353" +
    "\074\u015e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\014\u0168\015\045\017\053\020\056\021\036" +
    "\022\041\023\035\024\047\025\055\060\054\061\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\014\u016b" +
    "\015\045\017\053\020\056\021\036\022\041\023\035\024" +
    "\047\025\055\060\054\061\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\u0170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\332\064\u0177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\u017b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
	protected String filename = "";


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 

	private WPos pos(int left, int right) {
		return AST.WPos(parser.filename, left, right);
	}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // JasselseIfs ::= ENDIF NL 
            {
              WStatements RESULT =null;
		 RESULT = AST.WStatements(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JasselseIfs",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // JasselseIfs ::= ELSE NL JassStatements ENDIF NL 
            {
              WStatements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements s = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JasselseIfs",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // JasselseIfs ::= ELSEIF Expr THEN NL JassStatements JasselseIfs 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int thenStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int thenStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatements thenStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements elseStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.WStatements(AST.StmtIf(pos(xleft, xright), cond,  thenStatements, elseStatements)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JasselseIfs",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // JassStatementIf ::= IF Expr THEN NL JassStatements JasselseIfs 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int thenStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int thenStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatements thenStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements elseStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.StmtIf(pos(xleft, xright), cond, thenStatements, elseStatements); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatementIf",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // JassStatement ::= CALL ExprFunctionCall 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprFunctionCall call = (ExprFunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = call; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // JassStatement ::= SET ExprAssignable EQ Expr NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAssignable left = (ExprAssignable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.StmtSet(pos(xleft, xright), left, AST.OpAssign(),  right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // JassStatement ::= RETURN Expr NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.StmtReturn(pos(xleft, xright), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // JassStatement ::= RETURN NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.StmtReturn(pos(xleft, xright), AST.NoExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // JassStatement ::= EXITWHEN Expr NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.StmtExitwhen(pos(xleft, xright), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // JassStatement ::= LOOP NL JassStatements ENDLOOP NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.StmtLoop(pos(xleft, xright), body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // JassStatement ::= JassStatementIf 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatement x = (WStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatement",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // JassStatements ::= Newlines 
            {
              WStatements RESULT =null;
		 RESULT = AST.WStatements(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatements",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // JassStatements ::= Newlines JassStatement JassStatements 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatement x = (WStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements xs = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassStatements",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // JassLocal ::= LOCAL TypeExpr IDENTIFIER NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.LocalVarDef(pos(xleft, xright), false, typ, name, AST.NoExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassLocal",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // JassLocal ::= LOCAL TypeExpr IDENTIFIER EQ Expr NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.LocalVarDef(pos(xleft, xright), false, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassLocal",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // JassLocals ::= Newlines 
            {
              WStatements RESULT =null;
		 RESULT = AST.WStatements(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassLocals",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // JassLocals ::= Newlines JassLocal JassLocals 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatement x = (WStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements xs = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassLocals",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // JassParameters ::= Parameter OtherParameters 
            {
              WParameters RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WParameter x = (WParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WParameters xs = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassParameters",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // JassParameters ::= NOTHING 
            {
              WParameters RESULT =null;
		 RESULT = AST.WParameters(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassParameters",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // JassFuncSignature ::= IDENTIFIER TAKES JassParameters RETURNS NOTHING 
            {
              FuncSignature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WParameters parameters = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.FuncSignature(pos(nameleft, nameright), name, parameters, AST.NoTypeExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassFuncSignature",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // JassFuncSignature ::= IDENTIFIER TAKES JassParameters RETURNS TypeExpr 
            {
              FuncSignature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WParameters parameters = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.FuncSignature(pos(nameleft, nameright), name, parameters, typ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassFuncSignature",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // JassFuncDef ::= FUNCTION JassFuncSignature NL JassLocals JassStatements ENDFUNCTION NL 
            {
              FuncDef RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FuncSignature sig = (FuncSignature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int body1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int body1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WStatements body1 = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int body2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int body2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body2 = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.FuncDef(pos(xleft, xright), AST.VisibilityDefault(), sig, body1.addAll(body2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassFuncDef",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // JassNativeDecl ::= CONSTANT NATIVE JassFuncSignature NL 
            {
              NativeFunc RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FuncSignature sig = (FuncSignature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.NativeFunc(pos(xleft, xright), sig); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassNativeDecl",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // JassNativeDecl ::= NATIVE JassFuncSignature NL 
            {
              NativeFunc RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FuncSignature sig = (FuncSignature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.NativeFunc(pos(xleft, xright), sig); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassNativeDecl",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // JassGlobalDecl ::= TypeExpr IDENTIFIER NL 
            {
              GlobalVarDef RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.GlobalVarDef(typ.source(), AST.VisibilityDefault(), false, typ, name, AST.NoExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalDecl",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // JassGlobalDecl ::= TypeExpr IDENTIFIER EQ Expr NL 
            {
              GlobalVarDef RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.GlobalVarDef(typ.source(), AST.VisibilityDefault(), false, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalDecl",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // JassGlobalDecl ::= CONSTANT TypeExpr IDENTIFIER EQ Expr NL 
            {
              GlobalVarDef RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.GlobalVarDef(pos(xleft, xright), AST.VisibilityDefault(), true, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalDecl",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // JassGlobalDecls ::= Newlines 
            {
              JassGlobalBlock RESULT =null;
		 RESULT = AST.JassGlobalBlock(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalDecls",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // JassGlobalDecls ::= Newlines JassGlobalDecl JassGlobalDecls 
            {
              JassGlobalBlock RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GlobalVarDef x = (GlobalVarDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JassGlobalBlock xs = (JassGlobalBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalDecls",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // JassGlobalBlock ::= GLOBALS NL JassGlobalDecls ENDGLOBALS NL 
            {
              JassGlobalBlock RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		JassGlobalBlock x = (JassGlobalBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassGlobalBlock",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // JassTypeDecl ::= TYPE IDENTIFIER EXTENDS TypeExpr NL 
            {
              NativeType RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int extendsNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int extendsNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeExpr extendsName = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.NativeType(pos(xleft, xright), AST.VisibilityDefault(), name, extendsName); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassTypeDecl",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // JassToplevelDeclaration ::= JassNativeDecl 
            {
              JassToplevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NativeFunc x = (NativeFunc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassToplevelDeclaration",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // JassToplevelDeclaration ::= JassTypeDecl 
            {
              JassToplevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NativeType x = (NativeType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassToplevelDeclaration",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // JassToplevelDeclaration ::= JassFuncDef 
            {
              JassToplevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDef x = (FuncDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassToplevelDeclaration",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // JassToplevelDeclaration ::= JassGlobalBlock 
            {
              JassToplevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JassGlobalBlock x = (JassGlobalBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("JassToplevelDeclaration",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ExprFunctionCall ::= IDENTIFIER LPAR Arguments RPAR 
            {
              ExprFunctionCall RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.ExprFunctionCall(pos(nameleft, nameright), name, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprFunctionCall",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ExprUnary ::= MINUS Expr 
            {
              ExprUnary RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprUnary(pos(xleft, xright), AST.OpMinus(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprUnary",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ExprUnary ::= NOT Expr 
            {
              ExprUnary RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprUnary(pos(xleft, xright), AST.OpNot(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprUnary",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ExprBinary ::= Expr NOTEQ Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpUnequals(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ExprBinary ::= Expr GT Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpGreater(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ExprBinary ::= Expr LT Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpLess(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ExprBinary ::= Expr LTEQ Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpLessEq(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ExprBinary ::= Expr GTEQ Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpGreaterEq(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ExprBinary ::= Expr EQEQ Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpEquals(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ExprBinary ::= Expr MOD_INT Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpModInt(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ExprBinary ::= Expr MOD_REAL Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpModReal(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ExprBinary ::= Expr DIV_INT Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpDivInt(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ExprBinary ::= Expr DIV_REAL Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpDivReal(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ExprBinary ::= Expr MULT Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpMult(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ExprBinary ::= Expr MINUS Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpMinus(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ExprBinary ::= Expr PLUS Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpPlus(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ExprBinary ::= Expr AND Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpAnd(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ExprBinary ::= Expr OR Expr 
            {
              ExprBinary RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBinary(left.source(), left, AST.OpOr(), right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprBinary",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ArgumentRest ::= 
            {
              Arguments RESULT =null;
		 RESULT = AST.Arguments(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgumentRest",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ArgumentRest ::= COMMA Expr ArgumentRest 
            {
              Arguments RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arguments xs = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgumentRest",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Arguments ::= 
            {
              Arguments RESULT =null;
		 RESULT = AST.Arguments(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arguments",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Arguments ::= Expr ArgumentRest 
            {
              Arguments RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arguments xs = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arguments",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Indexes ::= LSQUARE Expr RSQUARE 
            {
              Indexes RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.Indexes(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Indexes",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Indexes ::= LSQUARE Expr RSQUARE Indexes 
            {
              Indexes RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Indexes xs = (Indexes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Indexes",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExprNewObject ::= NEW IDENTIFIER LPAR Arguments RPAR 
            {
              ExprNewObject RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.ExprNewObject(pos(xleft, xright), name, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprNewObject",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExprAtomic ::= ExprVarArrayAccess 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprVarArrayAccess x = (ExprVarArrayAccess)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExprAtomic ::= ExprVarAccess 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprVarAccess x = (ExprVarAccess)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExprAtomic ::= REAL_LITERAL 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprRealVal(pos(xleft, xright), x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExprAtomic ::= FUNCTION IDENTIFIER 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprFuncRef(pos(xleft, xright), name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExprAtomic ::= THIS 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprThis(pos(xleft, xright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExprAtomic ::= FALSE 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBoolVal(pos(xleft, xright), false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExprAtomic ::= TRUE 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprBoolVal(pos(xleft, xright), true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExprAtomic ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExprAtomic ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprStringVal(pos(sleft, sright), s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExprAtomic ::= NULL 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprNull(pos(xleft, xright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExprAtomic ::= INTEGER_LITERAL 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprIntVal(pos(ileft, iright), i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAtomic",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExprMemberMethod ::= Expr DOT IDENTIFIER LPAR Arguments RPAR 
            {
              ExprMemberMethod RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.ExprMemberMethod(left.source(), left, name, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprMemberMethod",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExprMemberArrayVar ::= Expr DOT IDENTIFIER Indexes 
            {
              ExprMemberArrayVar RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int indexesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int indexesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Indexes indexes = (Indexes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprMemberArrayVar(left.source(), left, name, indexes); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprMemberArrayVar",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ExprMemberVar ::= Expr DOT IDENTIFIER 
            {
              ExprMemberVar RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr left = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprMemberVar(left.source(), left, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprMemberVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ExprCast ::= Expr CASTTO TypeExpr 
            {
              ExprCast RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeExpr t = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprCast(e.source(), t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprCast",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= ExprCast 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprCast x = (ExprCast)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= ExprAtomic 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= ExprNewObject 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNewObject x = (ExprNewObject)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= ExprFunctionCall 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprFunctionCall x = (ExprFunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= ExprMemberMethod 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprMemberMethod x = (ExprMemberMethod)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= ExprMemberVar 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprMemberVar x = (ExprMemberVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= ExprUnary 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprUnary x = (ExprUnary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= ExprBinary 
            {
              Expr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprBinary x = (ExprBinary)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // StmtCall ::= ExprNewObject NL 
            {
              StmtCall RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNewObject x = (ExprNewObject)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtCall",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // StmtCall ::= ExprFunctionCall NL 
            {
              StmtCall RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprFunctionCall x = (ExprFunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtCall",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // StmtCall ::= ExprMemberMethod NL 
            {
              StmtCall RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprMemberMethod x = (ExprMemberMethod)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtCall",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExprVarArrayAccess ::= IDENTIFIER Indexes 
            {
              ExprVarArrayAccess RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int Indexesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Indexesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Indexes Indexes = (Indexes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprVarArrayAccess(pos(nameleft, nameright), name, Indexes); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprVarArrayAccess",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ExprVarAccess ::= IDENTIFIER 
            {
              ExprVarAccess RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.ExprVarAccess(pos(nameleft, nameright), name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprVarAccess",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExprAssignable ::= ExprVarArrayAccess 
            {
              ExprAssignable RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprVarArrayAccess x = (ExprVarArrayAccess)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAssignable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ExprAssignable ::= ExprVarAccess 
            {
              ExprAssignable RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprVarAccess x = (ExprVarAccess)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAssignable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExprAssignable ::= ExprMemberArrayVar 
            {
              ExprAssignable RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprMemberArrayVar x = (ExprMemberArrayVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAssignable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExprAssignable ::= ExprMemberVar 
            {
              ExprAssignable RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprMemberVar x = (ExprMemberVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprAssignable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // StmtSet ::= ExprAssignable EQ Expr NL 
            {
              StmtSet RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprAssignable left = (ExprAssignable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr right = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.StmtSet(left.source(), left, AST.OpAssign(),  right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtSet",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LocalVarDef ::= TypeExpr IDENTIFIER NL 
            {
              LocalVarDef RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.LocalVarDef(pos(typleft, typright), false, typ, name, AST.NoExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LocalVarDef",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LocalVarDef ::= TypeExpr IDENTIFIER EQ Expr NL 
            {
              LocalVarDef RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.LocalVarDef(pos(typleft, typright), false, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LocalVarDef",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LocalVarDef ::= VAL TypeExpr IDENTIFIER EQ Expr NL 
            {
              LocalVarDef RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.LocalVarDef(pos(xleft, xright), true, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LocalVarDef",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LocalVarDef ::= VAL IDENTIFIER EQ Expr NL 
            {
              LocalVarDef RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.LocalVarDef(pos(xleft, xright), true, AST.NoTypeExpr(), name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LocalVarDef",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // StmtWhile ::= WHILE Expr LBRACK NL Statements RBRACK NL 
            {
              StmtWhile RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.StmtWhile(pos(xleft, xright), cond, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtWhile",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ElseStatements ::= LBRACK Statements RBRACK NL 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements x = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElseStatements",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ElseStatements ::= StmtIf 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtIf x = (StmtIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.WStatements(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElseStatements",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StmtIf ::= IF Expr LBRACK NL Statements RBRACK ELSE ElseStatements 
            {
              StmtIf RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int thenStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int thenStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WStatements thenStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements elseStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.StmtIf(pos(xleft, xright), cond, thenStatements, elseStatements); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtIf",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StmtIf ::= IF Expr LBRACK NL Statements RBRACK NL 
            {
              StmtIf RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int thenStatementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int thenStatementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements thenStatements = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.StmtIf(pos(xleft, xright), cond, thenStatements, AST.WStatements()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtIf",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StmtReturn ::= RETURN Expr NL 
            {
              StmtReturn RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int resultleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr result = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.StmtReturn(pos(xleft, xright), result); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtReturn",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StmtDestroy ::= DESTROY Expr NL 
            {
              StmtDestroy RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.StmtDestroy(pos(xleft, xright), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtDestroy",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= error NL 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.StmtErr(pos(xleft, xright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= StmtDecRefCount 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtDecRefCount x = (StmtDecRefCount)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= StmtIncRefCount 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtIncRefCount x = (StmtIncRefCount)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= StmtDestroy 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtDestroy x = (StmtDestroy)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= StmtReturn 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtReturn x = (StmtReturn)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Statement ::= StmtCall 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtCall x = (StmtCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Statement ::= StmtSet 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtSet x = (StmtSet)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Statement ::= LocalVarDef 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LocalVarDef x = (LocalVarDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= StmtWhile 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtWhile x = (StmtWhile)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= StmtIf 
            {
              WStatement RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtIf x = (StmtIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statements ::= Newlines 
            {
              WStatements RESULT =null;
		 RESULT = AST.WStatements(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statements ::= Newlines Statement Statements 
            {
              WStatements RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatement x = (WStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WStatements xs = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VarDef ::= VisibilityModifier TypeExpr IDENTIFIER NL 
            {
              GlobalVarDef RESULT =null;
		int visleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VisibilityModifier vis = (VisibilityModifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.GlobalVarDef(pos(typleft, typright), vis, false, typ, name, AST.NoExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VarDef ::= VisibilityModifier TypeExpr IDENTIFIER EQ Expr NL 
            {
              GlobalVarDef RESULT =null;
		int visleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VisibilityModifier vis = (VisibilityModifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.GlobalVarDef(pos(typleft, typright), vis, false, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VarDef ::= VisibilityModifier VAL TypeExpr IDENTIFIER EQ Expr NL 
            {
              GlobalVarDef RESULT =null;
		int visleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VisibilityModifier vis = (VisibilityModifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.GlobalVarDef(pos(xleft, xright), vis, true, typ, name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VarDef ::= VisibilityModifier VAL IDENTIFIER EQ Expr NL 
            {
              GlobalVarDef RESULT =null;
		int visleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VisibilityModifier vis = (VisibilityModifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr i = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.GlobalVarDef(pos(xleft, xright), vis, true, AST.NoTypeExpr(), name, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDef",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ArraySizes ::= 
            {
              ArraySizes RESULT =null;
		 RESULT = AST.ArraySizes(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArraySizes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ArraySizes ::= LSQUARE Expr RSQUARE ArraySizes 
            {
              ArraySizes RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArraySizes xs = (ArraySizes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArraySizes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TypeExpr ::= IDENTIFIER ARRAY ArraySizes 
            {
              TypeExpr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sizesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sizesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArraySizes sizes = (ArraySizes)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.TypeExpr(pos(nameleft, nameright), name, true, sizes); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeExpr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TypeExpr ::= IDENTIFIER 
            {
              TypeExpr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.TypeExpr(pos(nameleft, nameright), name, false, AST.ArraySizes()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeExpr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Parameter ::= TypeExpr IDENTIFIER 
            {
              WParameter RESULT =null;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.WParameter(pos(typleft, typright), typ, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parameter",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OtherParameters ::= 
            {
              WParameters RESULT =null;
		 RESULT = AST.WParameters(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherParameters",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OtherParameters ::= COMMA Parameter OtherParameters 
            {
              WParameters RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WParameter x = (WParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WParameters xs = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OtherParameters",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Parameters ::= 
            {
              WParameters RESULT =null;
		 RESULT = AST.WParameters(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parameters",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Parameters ::= Parameter OtherParameters 
            {
              WParameters RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WParameter x = (WParameter)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WParameters xs = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Parameters",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FuncSignature ::= IDENTIFIER LPAR Parameters RPAR 
            {
              FuncSignature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WParameters parameters = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.FuncSignature(pos(nameleft, nameright), name, parameters, AST.NoTypeExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncSignature",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FuncSignature ::= IDENTIFIER LPAR Parameters RPAR RETURNS TypeExpr 
            {
              FuncSignature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WParameters parameters = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeExpr typ = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.FuncSignature(pos(nameleft, nameright), name, parameters, typ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncSignature",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FuncDef ::= VisibilityModifier FUNCTION FuncSignature LBRACK NL Statements RBRACK 
            {
              FuncDef RESULT =null;
		int visleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VisibilityModifier vis = (VisibilityModifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		FuncSignature sig = (FuncSignature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.FuncDef(pos(xleft, xright), vis, sig, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncDef",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassSlot ::= FuncDef 
            {
              ClassSlot RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDef x = (FuncDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassSlot ::= VarDef 
            {
              ClassSlot RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GlobalVarDef x = (GlobalVarDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassSlot ::= ONDESTROY LBRACK NL Statements RBRACK NL 
            {
              ClassSlot RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.OnDestroyDef(pos(xleft, xright), body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassSlot ::= VisibilityModifier CONSTRUCT LPAR Parameters RPAR LBRACK NL Statements RBRACK NL 
            {
              ClassSlot RESULT =null;
		int visleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		VisibilityModifier vis = (VisibilityModifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		WParameters params = (WParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.ConstructorDef(pos(xleft, xright), vis, params, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlot",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassSlots ::= Newlines 
            {
              ClassSlots RESULT =null;
		 RESULT = AST.ClassSlots(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlots",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassSlots ::= Newlines ClassSlot ClassSlots 
            {
              ClassSlots RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassSlot x = (ClassSlot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassSlots xs = (ClassSlots)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassSlots",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassDef ::= VisibilityModifier CLASS IDENTIFIER LBRACK NL ClassSlots RBRACK NL 
            {
              ClassDef RESULT =null;
		int visleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VisibilityModifier vis = (VisibilityModifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int slotsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slotsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ClassSlots slots = (ClassSlots)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.ClassDef(pos(xleft, xright), vis, name, false, slots); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDef",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Entity ::= ClassDef 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDef x = (ClassDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Entity ::= NATIVE FuncSignature NL 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FuncSignature sig = (FuncSignature)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.NativeFunc(pos(xleft, xright), sig); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Entity ::= INIT LBRACK NL Statements RBRACK NL 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WStatements body = (WStatements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = AST.InitBlock(pos(xleft, xright), body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Entity ::= VarDef 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GlobalVarDef x = (GlobalVarDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Entity ::= FuncDef 
            {
              WEntity RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncDef x = (FuncDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Entity ::= VisibilityModifier NATIVETYPE IDENTIFIER NL 
            {
              WEntity RESULT =null;
		int visleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VisibilityModifier vis = (VisibilityModifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.NativeType(pos(xleft, xright), vis, name, AST.NoTypeExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Entity ::= VisibilityModifier NATIVETYPE IDENTIFIER EXTENDS TypeExpr NL 
            {
              WEntity RESULT =null;
		int visleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int visright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VisibilityModifier vis = (VisibilityModifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int extendsNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int extendsNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeExpr extendsName = (TypeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.NativeType(pos(xleft, xright), vis, name, extendsName); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entity",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Entities ::= Newlines 
            {
              WEntities RESULT =null;
		 RESULT = AST.WEntities(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entities",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Entities ::= Newlines Entity Entities 
            {
              WEntities RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WEntity x = (WEntity)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WEntities xs = (WEntities)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = xs.appFront(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Entities",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Import ::= IMPORT IDENTIFIER NL 
            {
              WImport RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.WImport(pos(xleft, xright), i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Imports ::= Newlines 
            {
              WImports RESULT =null;
		 RESULT = AST.WImports(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Imports",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Imports ::= Newlines Import Imports 
            {
              WImports RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WImport i = (WImport)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int importsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int importsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WImports imports = (WImports)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = imports.appFront(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Imports",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PackageDeclaration ::= PACKAGE IDENTIFIER LBRACK NL Imports Entities RBRACK 
            {
              WPackage RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int importsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int importsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WImports imports = (WImports)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int entitiesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int entitiesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WEntities entities = (WEntities)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = AST.WPackage(pos(xleft, xright), name, imports, entities); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PackageDeclaration",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VisibilityModifier ::= 
            {
              VisibilityModifier RESULT =null;
		 RESULT = AST.VisibilityDefault(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VisibilityModifier",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VisibilityModifier ::= PUBLICREAD 
            {
              VisibilityModifier RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.VisibilityPublicread(pos(xleft, xright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VisibilityModifier",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VisibilityModifier ::= PRIVATE 
            {
              VisibilityModifier RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.VisibilityPrivate(pos(xleft, xright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VisibilityModifier",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VisibilityModifier ::= PUBLIC 
            {
              VisibilityModifier RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = AST.VisibilityPublic(pos(xleft, xright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VisibilityModifier",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TopLevelDeclaration ::= JassToplevelDeclaration 
            {
              TopLevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JassToplevelDeclaration x = (JassToplevelDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TopLevelDeclaration",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TopLevelDeclaration ::= PackageDeclaration 
            {
              TopLevelDeclaration RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WPackage x = (WPackage)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TopLevelDeclaration",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CompilationUnit ::= Newlines 
            {
              CompilationUnit RESULT =null;
		 RESULT = AST.CompilationUnit(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompilationUnit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CompilationUnit ::= Newlines TopLevelDeclaration CompilationUnit 
            {
              CompilationUnit RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TopLevelDeclaration p = (TopLevelDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompilationUnit c = (CompilationUnit)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c.appFront(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompilationUnit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Newlines ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Newlines",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Newlines ::= NL Newlines 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Newlines",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CompilationUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CompilationUnit start_val = (CompilationUnit)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

