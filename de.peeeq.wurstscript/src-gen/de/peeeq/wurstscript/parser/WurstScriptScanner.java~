/* The following code was generated by JFlex 1.4.3 on 29.08.11 19:18 */

package de.peeeq.wurstscript.parser;

import java_cup.runtime.*;
import de.peeeq.wurstscript.utils.Utils;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29.08.11 19:18 from the specification file
 * <tt>C:/pscript/de.peeeq.wurstscript/parserspec/wurstscript.flex</tt>
 */
public class WurstScriptScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\3\2\0\1\4\22\0\1\5\1\53\1\61\2\0"+
    "\1\51\1\0\1\60\1\37\1\40\1\7\1\47\1\41\1\50\1\46"+
    "\1\6\1\56\11\1\2\0\1\55\1\52\1\54\2\0\6\57\24\2"+
    "\1\44\1\62\1\45\1\0\1\2\1\0\1\12\1\32\1\10\1\36"+
    "\1\15\1\22\1\27\1\24\1\21\1\2\1\26\1\11\1\33\1\20"+
    "\1\30\1\25\1\2\1\14\1\13\1\16\1\17\1\31\1\23\1\35"+
    "\1\34\1\2\1\42\1\0\1\43\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\3\1\4\2\5\1\1\1\6"+
    "\1\7\21\4\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\2\1\24"+
    "\1\25\1\3\1\2\1\26\1\27\1\30\1\31\1\32"+
    "\1\1\1\0\24\4\1\33\10\4\1\34\4\4\1\35"+
    "\1\36\1\37\1\40\2\0\1\41\1\42\1\43\1\44"+
    "\1\0\6\4\1\45\1\46\13\4\1\47\1\4\1\50"+
    "\12\4\1\51\1\52\1\53\1\54\1\0\1\55\1\1"+
    "\1\4\1\56\2\4\1\57\2\4\1\60\7\4\1\61"+
    "\1\62\1\63\1\64\1\4\1\65\14\4\1\0\1\66"+
    "\1\4\1\67\1\70\3\4\1\71\4\4\1\72\5\4"+
    "\1\73\1\4\1\74\5\4\1\0\2\4\1\75\1\76"+
    "\5\4\1\77\3\4\1\100\3\4\1\101\2\4\1\102"+
    "\2\4\1\103\1\104\2\4\1\105\2\4\1\106\3\4"+
    "\1\107\1\110\1\111\1\4\1\112\3\4\1\113\3\4"+
    "\1\114\1\4\1\115\3\4\1\116\1\4\1\117\1\4"+
    "\1\120\1\121\1\122\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\146\0\377\0\u0132"+
    "\0\u0165\0\146\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\u0495\0\u04c8\0\146\0\146\0\146\0\146\0\146"+
    "\0\146\0\146\0\u04fb\0\146\0\146\0\146\0\u052e\0\u0561"+
    "\0\u0594\0\u05c7\0\u05fa\0\u062d\0\146\0\u0660\0\146\0\u0693"+
    "\0\u04fb\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8"+
    "\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990"+
    "\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\314"+
    "\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d"+
    "\0\314\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\146\0\146\0\146"+
    "\0\146\0\u0d8c\0\u0dbf\0\146\0\146\0\146\0\146\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\314\0\314"+
    "\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc"+
    "\0\u10ef\0\u1122\0\u1155\0\314\0\u1188\0\u11bb\0\u11ee\0\u1221"+
    "\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9"+
    "\0\314\0\314\0\314\0\u0d8c\0\u13ec\0\u13ec\0\146\0\u141f"+
    "\0\314\0\u1452\0\u1485\0\314\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\314\0\314"+
    "\0\314\0\314\0\u16b6\0\314\0\u16e9\0\u171c\0\u174f\0\u1782"+
    "\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a"+
    "\0\u194d\0\314\0\u1980\0\314\0\314\0\u19b3\0\u19e6\0\u1a19"+
    "\0\314\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\314\0\u1b18\0\u1b4b"+
    "\0\u1b7e\0\u1bb1\0\u1be4\0\314\0\u1c17\0\314\0\u1c4a\0\u1c7d"+
    "\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\314"+
    "\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a"+
    "\0\u1fad\0\314\0\u1fe0\0\u2013\0\u2046\0\314\0\u2079\0\u20ac"+
    "\0\146\0\u20df\0\u2112\0\314\0\314\0\u2145\0\u2178\0\314"+
    "\0\u21ab\0\u21de\0\314\0\u2211\0\u2244\0\u2277\0\314\0\314"+
    "\0\314\0\u22aa\0\314\0\u22dd\0\u2310\0\u2343\0\314\0\u2376"+
    "\0\u23a9\0\u23dc\0\314\0\u240f\0\314\0\u2442\0\u2475\0\u24a8"+
    "\0\314\0\u24db\0\314\0\u250e\0\314\0\314\0\314\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\5"+
    "\1\22\1\23\1\24\1\25\1\5\1\26\1\5\1\27"+
    "\1\30\1\31\1\5\1\32\2\5\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\5\1\54"+
    "\1\55\1\3\3\56\1\0\1\3\54\56\1\57\1\60"+
    "\64\0\1\4\44\0\1\61\7\0\1\4\5\0\2\5"+
    "\5\0\27\5\17\0\2\5\6\0\1\6\64\0\1\10"+
    "\63\0\1\62\1\63\54\0\2\5\5\0\1\5\1\64"+
    "\1\65\15\5\1\66\6\5\17\0\2\5\4\0\2\5"+
    "\5\0\20\5\1\67\6\5\17\0\2\5\4\0\2\5"+
    "\5\0\4\5\1\70\3\5\1\71\16\5\17\0\2\5"+
    "\4\0\2\5\5\0\5\5\1\72\21\5\17\0\2\5"+
    "\4\0\2\5\5\0\5\5\1\73\21\5\17\0\2\5"+
    "\4\0\2\5\5\0\1\5\1\74\6\5\1\75\14\5"+
    "\1\76\1\5\17\0\2\5\4\0\2\5\5\0\2\5"+
    "\1\77\1\5\1\100\7\5\1\101\7\5\1\102\2\5"+
    "\17\0\2\5\4\0\2\5\5\0\2\5\1\103\2\5"+
    "\1\104\1\5\1\105\10\5\1\106\6\5\17\0\2\5"+
    "\4\0\2\5\5\0\10\5\1\107\1\5\1\110\10\5"+
    "\1\111\3\5\17\0\2\5\4\0\2\5\5\0\2\5"+
    "\1\112\4\5\1\113\17\5\17\0\2\5\4\0\2\5"+
    "\5\0\14\5\1\114\12\5\17\0\2\5\4\0\2\5"+
    "\5\0\2\5\1\115\1\5\1\116\2\5\1\117\17\5"+
    "\17\0\2\5\4\0\2\5\5\0\1\5\1\120\25\5"+
    "\17\0\2\5\4\0\2\5\5\0\4\5\1\121\3\5"+
    "\1\122\16\5\17\0\2\5\4\0\2\5\5\0\2\5"+
    "\1\123\24\5\17\0\2\5\4\0\2\5\5\0\20\5"+
    "\1\124\6\5\17\0\2\5\4\0\2\5\5\0\11\5"+
    "\1\125\15\5\17\0\2\5\4\0\1\61\54\0\1\61"+
    "\56\0\1\126\62\0\1\127\62\0\1\130\62\0\1\131"+
    "\11\0\1\4\33\0\1\132\10\0\1\61\7\0\1\4"+
    "\4\0\3\133\1\0\57\133\3\56\2\0\54\56\16\0"+
    "\1\134\1\0\1\135\1\0\1\136\40\0\1\137\1\0"+
    "\3\62\2\0\56\62\7\63\1\140\53\63\1\0\2\5"+
    "\5\0\2\5\1\141\24\5\17\0\2\5\4\0\2\5"+
    "\5\0\1\5\1\142\25\5\17\0\2\5\4\0\2\5"+
    "\5\0\10\5\1\143\16\5\17\0\2\5\4\0\2\5"+
    "\5\0\1\144\17\5\1\145\6\5\17\0\2\5\4\0"+
    "\2\5\5\0\4\5\1\146\22\5\17\0\2\5\4\0"+
    "\2\5\5\0\26\5\1\147\17\0\2\5\4\0\2\5"+
    "\5\0\6\5\1\150\20\5\17\0\2\5\4\0\2\5"+
    "\5\0\6\5\1\151\20\5\17\0\2\5\4\0\2\5"+
    "\5\0\3\5\1\152\23\5\17\0\2\5\4\0\2\5"+
    "\5\0\26\5\1\153\17\0\2\5\4\0\2\5\5\0"+
    "\6\5\1\154\2\5\1\155\15\5\17\0\2\5\4\0"+
    "\2\5\5\0\16\5\1\156\10\5\17\0\2\5\4\0"+
    "\2\5\5\0\7\5\1\157\17\5\17\0\2\5\4\0"+
    "\2\5\5\0\5\5\1\160\3\5\1\161\15\5\17\0"+
    "\2\5\4\0\2\5\5\0\15\5\1\162\11\5\17\0"+
    "\2\5\4\0\2\5\5\0\6\5\1\163\20\5\17\0"+
    "\2\5\4\0\2\5\5\0\13\5\1\164\13\5\17\0"+
    "\2\5\4\0\2\5\5\0\1\5\1\165\25\5\17\0"+
    "\2\5\4\0\2\5\5\0\6\5\1\166\20\5\17\0"+
    "\2\5\4\0\2\5\5\0\6\5\1\167\20\5\17\0"+
    "\2\5\4\0\2\5\5\0\15\5\1\170\11\5\17\0"+
    "\2\5\4\0\2\5\5\0\1\5\1\171\25\5\17\0"+
    "\2\5\4\0\2\5\5\0\10\5\1\172\16\5\17\0"+
    "\2\5\4\0\2\5\5\0\11\5\1\173\15\5\17\0"+
    "\2\5\4\0\2\5\5\0\1\174\26\5\17\0\2\5"+
    "\4\0\2\5\5\0\11\5\1\175\15\5\17\0\2\5"+
    "\4\0\2\5\5\0\22\5\1\176\4\5\17\0\2\5"+
    "\4\0\2\5\5\0\20\5\1\177\6\5\17\0\2\5"+
    "\4\0\2\5\5\0\26\5\1\200\17\0\2\5\4\0"+
    "\2\5\5\0\1\5\1\201\25\5\17\0\2\5\4\0"+
    "\2\5\5\0\26\5\1\202\17\0\2\5\4\0\2\5"+
    "\5\0\21\5\1\203\5\5\17\0\2\5\4\0\1\204"+
    "\6\0\1\204\1\0\1\204\2\0\1\204\4\0\1\204"+
    "\7\0\1\204\3\0\1\204\17\0\2\204\3\0\3\205"+
    "\1\0\54\205\1\206\2\205\6\63\1\207\1\140\53\63"+
    "\1\0\2\5\5\0\3\5\1\210\23\5\17\0\2\5"+
    "\4\0\2\5\5\0\1\5\1\211\25\5\17\0\2\5"+
    "\4\0\2\5\5\0\3\5\1\212\23\5\17\0\2\5"+
    "\4\0\2\5\5\0\2\5\1\213\24\5\17\0\2\5"+
    "\4\0\2\5\5\0\15\5\1\214\11\5\17\0\2\5"+
    "\4\0\2\5\5\0\2\5\1\215\24\5\17\0\2\5"+
    "\4\0\2\5\5\0\7\5\1\216\17\5\17\0\2\5"+
    "\4\0\2\5\5\0\5\5\1\217\21\5\17\0\2\5"+
    "\4\0\2\5\5\0\1\5\1\220\7\5\1\221\1\222"+
    "\4\5\1\223\7\5\17\0\2\5\4\0\2\5\5\0"+
    "\5\5\1\224\21\5\17\0\2\5\4\0\2\5\5\0"+
    "\6\5\1\225\20\5\17\0\2\5\4\0\2\5\5\0"+
    "\5\5\1\226\21\5\17\0\2\5\4\0\2\5\5\0"+
    "\5\5\1\227\21\5\17\0\2\5\4\0\2\5\5\0"+
    "\10\5\1\230\16\5\17\0\2\5\4\0\2\5\5\0"+
    "\3\5\1\231\23\5\17\0\2\5\4\0\2\5\5\0"+
    "\5\5\1\232\21\5\17\0\2\5\4\0\2\5\5\0"+
    "\11\5\1\233\15\5\17\0\2\5\4\0\2\5\5\0"+
    "\1\5\1\234\25\5\17\0\2\5\4\0\2\5\5\0"+
    "\14\5\1\235\12\5\17\0\2\5\4\0\2\5\5\0"+
    "\5\5\1\236\21\5\17\0\2\5\4\0\2\5\5\0"+
    "\1\5\1\237\16\5\1\240\6\5\17\0\2\5\4\0"+
    "\2\5\5\0\3\5\1\241\23\5\17\0\2\5\4\0"+
    "\2\5\5\0\1\242\26\5\17\0\2\5\4\0\2\5"+
    "\5\0\1\5\1\243\25\5\17\0\2\5\4\0\2\5"+
    "\5\0\16\5\1\244\10\5\17\0\2\5\4\0\2\5"+
    "\5\0\21\5\1\245\5\5\17\0\2\5\4\0\2\5"+
    "\5\0\1\5\1\246\25\5\17\0\2\5\4\0\2\5"+
    "\5\0\22\5\1\247\4\5\17\0\2\5\4\0\2\5"+
    "\5\0\5\5\1\250\21\5\17\0\2\5\3\0\3\251"+
    "\1\0\57\251\1\0\2\5\5\0\3\5\1\252\23\5"+
    "\17\0\2\5\4\0\2\5\5\0\6\5\1\253\20\5"+
    "\17\0\2\5\4\0\2\5\5\0\1\5\1\254\25\5"+
    "\17\0\2\5\4\0\2\5\5\0\24\5\1\255\2\5"+
    "\17\0\2\5\4\0\2\5\5\0\4\5\1\256\22\5"+
    "\17\0\2\5\4\0\2\5\5\0\11\5\1\257\15\5"+
    "\17\0\2\5\4\0\2\5\5\0\20\5\1\260\6\5"+
    "\17\0\2\5\4\0\2\5\5\0\12\5\1\261\14\5"+
    "\17\0\2\5\4\0\2\5\5\0\7\5\1\262\17\5"+
    "\17\0\2\5\4\0\2\5\5\0\1\5\1\263\25\5"+
    "\17\0\2\5\4\0\2\5\5\0\10\5\1\264\16\5"+
    "\17\0\2\5\4\0\2\5\5\0\13\5\1\265\13\5"+
    "\17\0\2\5\4\0\2\5\5\0\3\5\1\266\23\5"+
    "\17\0\2\5\4\0\2\5\5\0\21\5\1\267\5\5"+
    "\17\0\2\5\4\0\2\5\5\0\11\5\1\270\15\5"+
    "\17\0\2\5\4\0\2\5\5\0\4\5\1\271\22\5"+
    "\17\0\2\5\4\0\2\5\5\0\5\5\1\272\21\5"+
    "\17\0\2\5\4\0\2\5\5\0\4\5\1\273\22\5"+
    "\17\0\2\5\4\0\2\5\5\0\5\5\1\274\21\5"+
    "\17\0\2\5\4\0\2\5\5\0\6\5\1\275\20\5"+
    "\17\0\2\5\4\0\2\5\5\0\5\5\1\276\21\5"+
    "\17\0\2\5\4\0\2\5\5\0\2\5\1\277\24\5"+
    "\17\0\2\5\4\0\2\5\5\0\2\5\1\300\24\5"+
    "\17\0\2\5\4\0\2\5\5\0\11\5\1\301\15\5"+
    "\17\0\2\5\4\0\2\5\5\0\2\5\1\302\24\5"+
    "\17\0\2\5\4\0\2\5\5\0\3\5\1\303\23\5"+
    "\17\0\2\5\3\0\3\304\1\0\57\304\1\0\2\5"+
    "\5\0\2\5\1\305\1\5\1\306\22\5\17\0\2\5"+
    "\4\0\2\5\5\0\10\5\1\307\16\5\17\0\2\5"+
    "\4\0\2\5\5\0\12\5\1\310\14\5\17\0\2\5"+
    "\4\0\2\5\5\0\20\5\1\311\6\5\17\0\2\5"+
    "\4\0\2\5\5\0\10\5\1\312\16\5\17\0\2\5"+
    "\4\0\2\5\5\0\20\5\1\313\6\5\17\0\2\5"+
    "\4\0\2\5\5\0\26\5\1\314\17\0\2\5\4\0"+
    "\2\5\5\0\14\5\1\315\12\5\17\0\2\5\4\0"+
    "\2\5\5\0\5\5\1\316\21\5\17\0\2\5\4\0"+
    "\2\5\5\0\10\5\1\317\16\5\17\0\2\5\4\0"+
    "\2\5\5\0\12\5\1\320\14\5\17\0\2\5\4\0"+
    "\2\5\5\0\23\5\1\321\3\5\17\0\2\5\4\0"+
    "\2\5\5\0\6\5\1\322\20\5\17\0\2\5\4\0"+
    "\2\5\5\0\11\5\1\323\15\5\17\0\2\5\4\0"+
    "\2\5\5\0\17\5\1\324\7\5\17\0\2\5\4\0"+
    "\2\5\5\0\6\5\1\325\20\5\17\0\2\5\4\0"+
    "\2\5\5\0\1\326\26\5\17\0\2\5\4\0\2\5"+
    "\5\0\1\5\1\327\25\5\17\0\2\5\4\0\2\5"+
    "\5\0\6\5\1\330\20\5\17\0\2\5\63\0\1\331"+
    "\3\0\2\5\5\0\10\5\1\332\16\5\17\0\2\5"+
    "\4\0\2\5\5\0\7\5\1\333\17\5\17\0\2\5"+
    "\4\0\2\5\5\0\3\5\1\334\23\5\17\0\2\5"+
    "\4\0\2\5\5\0\15\5\1\335\11\5\17\0\2\5"+
    "\4\0\2\5\5\0\1\336\26\5\17\0\2\5\4\0"+
    "\2\5\5\0\22\5\1\337\4\5\17\0\2\5\4\0"+
    "\2\5\5\0\3\5\1\340\23\5\17\0\2\5\4\0"+
    "\2\5\5\0\5\5\1\341\21\5\17\0\2\5\4\0"+
    "\2\5\5\0\6\5\1\342\20\5\17\0\2\5\4\0"+
    "\2\5\5\0\17\5\1\343\7\5\17\0\2\5\4\0"+
    "\2\5\5\0\2\5\1\344\24\5\17\0\2\5\4\0"+
    "\2\5\5\0\5\5\1\345\21\5\17\0\2\5\4\0"+
    "\2\5\5\0\20\5\1\346\6\5\17\0\2\5\4\0"+
    "\2\5\5\0\5\5\1\347\21\5\17\0\2\5\4\0"+
    "\2\5\5\0\5\5\1\350\21\5\17\0\2\5\4\0"+
    "\2\5\5\0\3\5\1\351\23\5\17\0\2\5\4\0"+
    "\2\5\5\0\4\5\1\352\22\5\17\0\2\5\4\0"+
    "\2\5\5\0\6\5\1\353\20\5\17\0\2\5\4\0"+
    "\2\5\5\0\1\354\26\5\17\0\2\5\4\0\2\5"+
    "\5\0\6\5\1\355\20\5\17\0\2\5\4\0\2\5"+
    "\5\0\2\5\1\356\24\5\17\0\2\5\4\0\2\5"+
    "\5\0\10\5\1\357\16\5\17\0\2\5\4\0\2\5"+
    "\5\0\24\5\1\360\2\5\17\0\2\5\4\0\2\5"+
    "\5\0\1\361\26\5\17\0\2\5\4\0\2\5\5\0"+
    "\10\5\1\362\16\5\17\0\2\5\4\0\2\5\5\0"+
    "\10\5\1\363\16\5\17\0\2\5\4\0\2\5\5\0"+
    "\20\5\1\364\6\5\17\0\2\5\4\0\2\5\5\0"+
    "\6\5\1\365\20\5\17\0\2\5\4\0\2\5\5\0"+
    "\11\5\1\366\15\5\17\0\2\5\4\0\2\5\5\0"+
    "\1\5\1\367\25\5\17\0\2\5\4\0\2\5\5\0"+
    "\15\5\1\370\11\5\17\0\2\5\4\0\2\5\5\0"+
    "\5\5\1\371\21\5\17\0\2\5\4\0\2\5\5\0"+
    "\6\5\1\372\20\5\17\0\2\5\4\0\2\5\5\0"+
    "\24\5\1\373\2\5\17\0\2\5\4\0\2\5\5\0"+
    "\20\5\1\374\6\5\17\0\2\5\4\0\2\5\5\0"+
    "\3\5\1\375\23\5\17\0\2\5\4\0\2\5\5\0"+
    "\5\5\1\376\21\5\17\0\2\5\4\0\2\5\5\0"+
    "\3\5\1\377\23\5\17\0\2\5\4\0\2\5\5\0"+
    "\10\5\1\u0100\16\5\17\0\2\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9537];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\11\2\1\1\11\3\1\1\11\21\1"+
    "\7\11\1\1\3\11\6\1\1\11\1\1\1\11\3\1"+
    "\1\0\42\1\4\11\2\0\4\11\1\0\44\1\1\0"+
    "\1\1\1\11\41\1\1\0\32\1\1\0\24\1\1\11"+
    "\47\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
    
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public WurstScriptScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public WurstScriptScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { return symbol(TokenType.DOT);
          }
        case 84: break;
        case 9: 
          { return symbol(TokenType.RPAR);
          }
        case 85: break;
        case 51: 
          { return symbol(TokenType.THIS);
          }
        case 86: break;
        case 73: 
          { return symbol(TokenType.GLOBALS);
          }
        case 87: break;
        case 12: 
          { return symbol(TokenType.RBRACK);
          }
        case 88: break;
        case 43: 
          { return symbol(TokenType.DIV_INT);
          }
        case 89: break;
        case 71: 
          { return symbol(TokenType.PACKAGE);
          }
        case 90: break;
        case 37: 
          { return symbol(TokenType.AND);
          }
        case 91: break;
        case 64: 
          { return symbol(TokenType.IMPORT);
          }
        case 92: break;
        case 75: 
          { return symbol(TokenType.EXITWHEN);
          }
        case 93: break;
        case 68: 
          { return symbol(TokenType.ENDLOOP);
          }
        case 94: break;
        case 50: 
          { return symbol(TokenType.THEN);
          }
        case 95: break;
        case 8: 
          { return symbol(TokenType.LPAR);
          }
        case 96: break;
        case 76: 
          { return symbol(TokenType.FUNCTION);
          }
        case 97: break;
        case 24: 
          { yybegin(YYINITIAL); 
                                   return symbol(TokenType.STRING_LITERAL, 
                                   string.toString());
          }
        case 98: break;
        case 77: 
          { return symbol(TokenType.CONSTRUCT);
          }
        case 99: break;
        case 74: 
          { return symbol(TokenType.CONSTANT);
          }
        case 100: break;
        case 40: 
          { return symbol(TokenType.NOT);
          }
        case 101: break;
        case 35: 
          { string.append('\n');
          }
        case 102: break;
        case 4: 
          { return symbol(TokenType.IDENTIFIER, yytext());
          }
        case 103: break;
        case 36: 
          { string.append('\"');
          }
        case 104: break;
        case 3: 
          { return symbol(TokenType.INTEGER_LITERAL, Utils.parseInt(yytext()));
          }
        case 105: break;
        case 11: 
          { return symbol(TokenType.LBRACK);
          }
        case 106: break;
        case 80: 
          { return symbol(TokenType.ENDGLOBALS);
          }
        case 107: break;
        case 20: 
          { return symbol(TokenType.GT);
          }
        case 108: break;
        case 42: 
          { return symbol(TokenType.MOD_INT);
          }
        case 109: break;
        case 61: 
          { return symbol(TokenType.RETURN);
          }
        case 110: break;
        case 2: 
          { return symbol(TokenType.error, yytext());
          }
        case 111: break;
        case 58: 
          { return symbol(TokenType.TAKES);
          }
        case 112: break;
        case 33: 
          { string.append('\r');
          }
        case 113: break;
        case 79: 
          { return symbol(TokenType.ONDESTROY);
          }
        case 114: break;
        case 54: 
          { return symbol(TokenType.CLASS);
          }
        case 115: break;
        case 22: 
          { string.setLength(0); yybegin(STRING);
          }
        case 116: break;
        case 19: 
          { return symbol(TokenType.EQ);
          }
        case 117: break;
        case 6: 
          { return symbol(TokenType.DIV_REAL);
          }
        case 118: break;
        case 34: 
          { string.append('\t');
          }
        case 119: break;
        case 21: 
          { return symbol(TokenType.LT);
          }
        case 120: break;
        case 59: 
          { return symbol(TokenType.FALSE);
          }
        case 121: break;
        case 83: 
          { return symbol(TokenType.ENDFUNCTION);
          }
        case 122: break;
        case 18: 
          { return symbol(TokenType.MOD_REAL);
          }
        case 123: break;
        case 52: 
          { return symbol(TokenType.TYPE);
          }
        case 124: break;
        case 32: 
          { return symbol(TokenType.LTEQ);
          }
        case 125: break;
        case 55: 
          { return symbol(TokenType.LOCAL);
          }
        case 126: break;
        case 41: 
          { return symbol(TokenType.VAL);
          }
        case 127: break;
        case 7: 
          { return symbol(TokenType.MULT);
          }
        case 128: break;
        case 28: 
          { return symbol(TokenType.OR);
          }
        case 129: break;
        case 45: 
          { return symbol(TokenType.INTEGER_LITERAL, Utils.parseAsciiInt1(yytext()));
          }
        case 130: break;
        case 65: 
          { return symbol(TokenType.PUBLIC);
          }
        case 131: break;
        case 48: 
          { return symbol(TokenType.ELSE);
          }
        case 132: break;
        case 17: 
          { return symbol(TokenType.MINUS);
          }
        case 133: break;
        case 69: 
          { return symbol(TokenType.EXTENDS);
          }
        case 134: break;
        case 31: 
          { return symbol(TokenType.GTEQ);
          }
        case 135: break;
        case 5: 
          { return symbol(TokenType.NL);
          }
        case 136: break;
        case 44: 
          { return symbol(TokenType.INTEGER_LITERAL, Utils.parseHexInt(yytext()));
          }
        case 137: break;
        case 47: 
          { return symbol(TokenType.LOOP);
          }
        case 138: break;
        case 25: 
          { string.append('\\');
          }
        case 139: break;
        case 14: 
          { return symbol(TokenType.RSQUARE);
          }
        case 140: break;
        case 82: 
          { return symbol(TokenType.IMPLEMENTS);
          }
        case 141: break;
        case 56: 
          { return symbol(TokenType.ARRAY);
          }
        case 142: break;
        case 27: 
          { return symbol(TokenType.IF);
          }
        case 143: break;
        case 70: 
          { return symbol(TokenType.NOTHING);
          }
        case 144: break;
        case 63: 
          { return symbol(TokenType.NATIVE);
          }
        case 145: break;
        case 39: 
          { return symbol(TokenType.NEW);
          }
        case 146: break;
        case 57: 
          { return symbol(TokenType.ENDIF);
          }
        case 147: break;
        case 62: 
          { return symbol(TokenType.ELSEIF);
          }
        case 148: break;
        case 66: 
          { return symbol(TokenType.INTEGER_LITERAL, Utils.parseAsciiInt4(yytext()));
          }
        case 149: break;
        case 30: 
          { return symbol(TokenType.NOTEQ);
          }
        case 150: break;
        case 60: 
          { return symbol(TokenType.WHILE);
          }
        case 151: break;
        case 23: 
          { string.append( yytext() );
          }
        case 152: break;
        case 67: 
          { return symbol(TokenType.RETURNS);
          }
        case 153: break;
        case 81: 
          { return symbol(TokenType.NATIVETYPE);
          }
        case 154: break;
        case 72: 
          { return symbol(TokenType.PRIVATE);
          }
        case 155: break;
        case 49: 
          { return symbol(TokenType.TRUE);
          }
        case 156: break;
        case 13: 
          { return symbol(TokenType.LSQUARE);
          }
        case 157: break;
        case 10: 
          { return symbol(TokenType.COMMA);
          }
        case 158: break;
        case 38: 
          { return symbol(TokenType.SET);
          }
        case 159: break;
        case 78: 
          { return symbol(TokenType.INTERFACE);
          }
        case 160: break;
        case 29: 
          { return symbol(TokenType.EQEQ);
          }
        case 161: break;
        case 53: 
          { return symbol(TokenType.NULL);
          }
        case 162: break;
        case 26: 
          { return symbol(TokenType.REAL_LITERAL, Double.parseDouble(yytext()));
          }
        case 163: break;
        case 16: 
          { return symbol(TokenType.PLUS);
          }
        case 164: break;
        case 46: 
          { return symbol(TokenType.CALL);
          }
        case 165: break;
        case 1: 
          { 
          }
        case 166: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return symbol(TokenType.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
