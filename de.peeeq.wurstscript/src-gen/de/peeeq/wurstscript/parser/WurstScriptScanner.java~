/* The following code was generated by JFlex 1.4.3 on 03.11.11 22:44 */

package de.peeeq.wurstscript.parser;

import de.peeeq.wurstscript.utils.Utils;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03.11.11 22:44 from the specification file
 * <tt>C:/pscript/de.peeeq.wurstscript/parserspec/wurstscript.flex</tt>
 */
public class WurstScriptScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\3\2\0\1\4\22\0\1\5\1\54\1\62\2\0"+
    "\1\52\1\0\1\61\1\40\1\41\1\7\1\50\1\42\1\51\1\47"+
    "\1\6\1\57\11\1\2\0\1\56\1\53\1\55\2\0\6\60\15\2"+
    "\1\37\6\2\1\45\1\63\1\46\1\0\1\2\1\0\1\12\1\31"+
    "\1\10\1\32\1\15\1\22\1\27\1\24\1\21\1\2\1\26\1\11"+
    "\1\34\1\20\1\30\1\25\1\2\1\14\1\13\1\16\1\17\1\33"+
    "\1\23\1\36\1\35\1\2\1\43\1\0\1\44\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\3\1\4\2\5\1\1\1\6"+
    "\1\7\20\4\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\2\1\24"+
    "\1\25\1\3\1\2\1\26\1\27\1\30\1\31\1\32"+
    "\1\1\1\0\24\4\1\33\10\4\1\34\4\4\1\35"+
    "\1\36\1\37\1\40\2\0\1\41\1\42\1\43\1\44"+
    "\1\0\7\4\1\45\1\46\13\4\1\47\1\4\1\50"+
    "\15\4\1\51\1\52\1\53\1\0\1\54\1\1\1\4"+
    "\1\55\3\4\1\56\2\4\1\57\7\4\1\60\1\61"+
    "\1\62\1\63\1\4\1\64\2\4\1\65\14\4\1\0"+
    "\1\66\2\4\1\67\1\70\3\4\1\71\4\4\1\72"+
    "\5\4\1\73\1\4\1\74\7\4\1\0\1\75\2\4"+
    "\1\76\1\77\5\4\1\100\3\4\1\101\4\4\1\102"+
    "\3\4\1\103\2\4\1\104\1\105\2\4\1\106\2\4"+
    "\1\107\3\4\1\110\1\111\2\4\1\112\1\4\1\113"+
    "\1\114\3\4\1\115\3\4\1\116\3\4\1\117\3\4"+
    "\1\120\1\4\1\121\1\4\1\122\1\4\1\123\1\124"+
    "\1\125\1\126\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\150\0\u0104\0\u0138"+
    "\0\u016c\0\150\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\u04ac\0\150\0\150\0\150\0\150\0\150\0\150"+
    "\0\150\0\u04e0\0\150\0\150\0\150\0\u0514\0\u0548\0\u057c"+
    "\0\u05b0\0\u05e4\0\u0618\0\150\0\u064c\0\150\0\u0680\0\u04e0"+
    "\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820"+
    "\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0"+
    "\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\320\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\320"+
    "\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\150\0\150\0\150\0\150"+
    "\0\u0d9c\0\u0dd0\0\150\0\150\0\150\0\150\0\u0e04\0\u0e38"+
    "\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\320\0\320"+
    "\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110"+
    "\0\u1144\0\u1178\0\u11ac\0\320\0\u11e0\0\u1214\0\u1248\0\u127c"+
    "\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c"+
    "\0\u1450\0\u1484\0\u14b8\0\320\0\320\0\u0d9c\0\u14ec\0\u14ec"+
    "\0\150\0\u1520\0\320\0\u1554\0\u1588\0\u15bc\0\320\0\u15f0"+
    "\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790"+
    "\0\u17c4\0\320\0\320\0\320\0\320\0\u17f8\0\320\0\u182c"+
    "\0\u1860\0\320\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998"+
    "\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\320"+
    "\0\u1b38\0\u1b6c\0\320\0\320\0\u1ba0\0\u1bd4\0\u1c08\0\320"+
    "\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\320\0\u1d0c\0\u1d40\0\u1d74"+
    "\0\u1da8\0\u1ddc\0\320\0\u1e10\0\320\0\u1e44\0\u1e78\0\u1eac"+
    "\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\320\0\u1fe4\0\u2018"+
    "\0\u204c\0\320\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184"+
    "\0\u21b8\0\u21ec\0\u2220\0\320\0\u2254\0\u2288\0\u22bc\0\u22f0"+
    "\0\u2324\0\u2358\0\u238c\0\u23c0\0\150\0\u23f4\0\u2428\0\320"+
    "\0\320\0\u245c\0\u2490\0\320\0\u24c4\0\u24f8\0\320\0\u252c"+
    "\0\u2560\0\u2594\0\320\0\320\0\u25c8\0\u25fc\0\320\0\u2630"+
    "\0\320\0\320\0\u2664\0\u2698\0\u26cc\0\320\0\u2700\0\u2734"+
    "\0\u2768\0\320\0\u279c\0\u27d0\0\u2804\0\320\0\u2838\0\u286c"+
    "\0\u28a0\0\320\0\u28d4\0\320\0\u2908\0\320\0\u293c\0\320"+
    "\0\320\0\320\0\320\0\320";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\5"+
    "\1\22\1\23\1\24\1\25\1\5\1\26\1\5\1\27"+
    "\1\30\1\5\1\31\1\5\1\32\3\5\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\5\1\53"+
    "\1\54\1\3\3\55\1\0\1\3\55\55\1\56\1\57"+
    "\65\0\1\4\45\0\1\60\7\0\1\4\5\0\2\5"+
    "\5\0\30\5\17\0\2\5\6\0\1\6\65\0\1\10"+
    "\64\0\1\61\1\62\55\0\2\5\5\0\1\5\1\63"+
    "\1\64\15\5\1\65\7\5\17\0\2\5\4\0\2\5"+
    "\5\0\20\5\1\66\7\5\17\0\2\5\4\0\2\5"+
    "\5\0\4\5\1\67\3\5\1\70\17\5\17\0\2\5"+
    "\4\0\2\5\5\0\5\5\1\71\22\5\17\0\2\5"+
    "\4\0\2\5\5\0\5\5\1\72\22\5\17\0\2\5"+
    "\4\0\2\5\5\0\1\5\1\73\6\5\1\74\15\5"+
    "\1\75\1\5\17\0\2\5\4\0\2\5\5\0\2\5"+
    "\1\76\1\5\1\77\7\5\1\100\10\5\1\101\2\5"+
    "\17\0\2\5\4\0\2\5\5\0\2\5\1\102\2\5"+
    "\1\103\1\5\1\104\10\5\1\105\7\5\17\0\2\5"+
    "\4\0\2\5\5\0\10\5\1\106\1\5\1\107\11\5"+
    "\1\110\3\5\17\0\2\5\4\0\2\5\5\0\2\5"+
    "\1\111\4\5\1\112\20\5\17\0\2\5\4\0\2\5"+
    "\5\0\14\5\1\113\13\5\17\0\2\5\4\0\2\5"+
    "\5\0\2\5\1\114\1\5\1\115\2\5\1\116\20\5"+
    "\17\0\2\5\4\0\2\5\5\0\1\5\1\117\26\5"+
    "\17\0\2\5\4\0\2\5\5\0\4\5\1\120\3\5"+
    "\1\121\17\5\17\0\2\5\4\0\2\5\5\0\5\5"+
    "\1\122\3\5\1\123\16\5\17\0\2\5\4\0\2\5"+
    "\5\0\20\5\1\124\7\5\17\0\2\5\4\0\1\60"+
    "\55\0\1\60\57\0\1\125\63\0\1\126\63\0\1\127"+
    "\63\0\1\130\11\0\1\4\34\0\1\131\10\0\1\60"+
    "\7\0\1\4\4\0\3\132\1\0\60\132\3\55\2\0"+
    "\55\55\16\0\1\133\1\0\1\134\1\0\1\135\41\0"+
    "\1\136\1\0\3\61\2\0\57\61\7\62\1\137\54\62"+
    "\1\0\2\5\5\0\2\5\1\140\25\5\17\0\2\5"+
    "\4\0\2\5\5\0\1\5\1\141\1\5\1\142\24\5"+
    "\17\0\2\5\4\0\2\5\5\0\10\5\1\143\17\5"+
    "\17\0\2\5\4\0\2\5\5\0\1\144\17\5\1\145"+
    "\7\5\17\0\2\5\4\0\2\5\5\0\4\5\1\146"+
    "\23\5\17\0\2\5\4\0\2\5\5\0\22\5\1\147"+
    "\5\5\17\0\2\5\4\0\2\5\5\0\6\5\1\150"+
    "\21\5\17\0\2\5\4\0\2\5\5\0\6\5\1\151"+
    "\21\5\17\0\2\5\4\0\2\5\5\0\3\5\1\152"+
    "\24\5\17\0\2\5\4\0\2\5\5\0\22\5\1\153"+
    "\5\5\17\0\2\5\4\0\2\5\5\0\6\5\1\154"+
    "\2\5\1\155\16\5\17\0\2\5\4\0\2\5\5\0"+
    "\16\5\1\156\11\5\17\0\2\5\4\0\2\5\5\0"+
    "\7\5\1\157\20\5\17\0\2\5\4\0\2\5\5\0"+
    "\5\5\1\160\3\5\1\161\16\5\17\0\2\5\4\0"+
    "\2\5\5\0\15\5\1\162\12\5\17\0\2\5\4\0"+
    "\2\5\5\0\6\5\1\163\21\5\17\0\2\5\4\0"+
    "\2\5\5\0\13\5\1\164\14\5\17\0\2\5\4\0"+
    "\2\5\5\0\1\5\1\165\26\5\17\0\2\5\4\0"+
    "\2\5\5\0\6\5\1\166\21\5\17\0\2\5\4\0"+
    "\2\5\5\0\6\5\1\167\2\5\1\170\16\5\17\0"+
    "\2\5\4\0\2\5\5\0\15\5\1\171\12\5\17\0"+
    "\2\5\4\0\2\5\5\0\1\5\1\172\26\5\17\0"+
    "\2\5\4\0\2\5\5\0\10\5\1\173\17\5\17\0"+
    "\2\5\4\0\2\5\5\0\11\5\1\174\16\5\17\0"+
    "\2\5\4\0\2\5\5\0\1\175\27\5\17\0\2\5"+
    "\4\0\2\5\5\0\11\5\1\176\6\5\1\177\7\5"+
    "\17\0\2\5\4\0\2\5\5\0\21\5\1\200\6\5"+
    "\17\0\2\5\4\0\2\5\5\0\20\5\1\201\7\5"+
    "\17\0\2\5\4\0\2\5\5\0\22\5\1\202\5\5"+
    "\17\0\2\5\4\0\2\5\5\0\3\5\1\203\24\5"+
    "\17\0\2\5\4\0\2\5\5\0\23\5\1\204\4\5"+
    "\17\0\2\5\4\0\2\5\5\0\22\5\1\205\5\5"+
    "\17\0\2\5\4\0\1\206\6\0\1\206\1\0\1\206"+
    "\2\0\1\206\4\0\1\206\6\0\2\206\24\0\2\206"+
    "\3\0\3\207\1\0\55\207\1\210\2\207\6\62\1\211"+
    "\1\137\54\62\1\0\2\5\5\0\3\5\1\212\24\5"+
    "\17\0\2\5\4\0\2\5\5\0\1\5\1\213\26\5"+
    "\17\0\2\5\4\0\2\5\5\0\6\5\1\214\21\5"+
    "\17\0\2\5\4\0\2\5\5\0\3\5\1\215\24\5"+
    "\17\0\2\5\4\0\2\5\5\0\2\5\1\216\25\5"+
    "\17\0\2\5\4\0\2\5\5\0\15\5\1\217\12\5"+
    "\17\0\2\5\4\0\2\5\5\0\2\5\1\220\25\5"+
    "\17\0\2\5\4\0\2\5\5\0\7\5\1\221\20\5"+
    "\17\0\2\5\4\0\2\5\5\0\5\5\1\222\22\5"+
    "\17\0\2\5\4\0\2\5\5\0\1\5\1\223\7\5"+
    "\1\224\1\225\4\5\1\226\10\5\17\0\2\5\4\0"+
    "\2\5\5\0\5\5\1\227\22\5\17\0\2\5\4\0"+
    "\2\5\5\0\6\5\1\230\21\5\17\0\2\5\4\0"+
    "\2\5\5\0\5\5\1\231\22\5\17\0\2\5\4\0"+
    "\2\5\5\0\5\5\1\232\22\5\17\0\2\5\4\0"+
    "\2\5\5\0\10\5\1\233\17\5\17\0\2\5\4\0"+
    "\2\5\5\0\3\5\1\234\24\5\17\0\2\5\4\0"+
    "\2\5\5\0\5\5\1\235\22\5\17\0\2\5\4\0"+
    "\2\5\5\0\11\5\1\236\16\5\17\0\2\5\4\0"+
    "\2\5\5\0\1\5\1\237\26\5\17\0\2\5\4\0"+
    "\2\5\5\0\14\5\1\240\13\5\17\0\2\5\4\0"+
    "\2\5\5\0\5\5\1\241\22\5\17\0\2\5\4\0"+
    "\2\5\5\0\6\5\1\242\21\5\17\0\2\5\4\0"+
    "\2\5\5\0\1\5\1\243\16\5\1\244\7\5\17\0"+
    "\2\5\4\0\2\5\5\0\3\5\1\245\24\5\17\0"+
    "\2\5\4\0\2\5\5\0\1\246\27\5\17\0\2\5"+
    "\4\0\2\5\5\0\1\5\1\247\26\5\17\0\2\5"+
    "\4\0\2\5\5\0\16\5\1\250\11\5\17\0\2\5"+
    "\4\0\2\5\5\0\23\5\1\251\4\5\17\0\2\5"+
    "\4\0\2\5\5\0\6\5\1\252\21\5\17\0\2\5"+
    "\4\0\2\5\5\0\1\5\1\253\26\5\17\0\2\5"+
    "\4\0\2\5\5\0\21\5\1\254\6\5\17\0\2\5"+
    "\4\0\2\5\5\0\5\5\1\255\22\5\17\0\2\5"+
    "\4\0\2\5\5\0\6\5\1\256\21\5\17\0\2\5"+
    "\3\0\3\257\1\0\60\257\1\0\2\5\5\0\3\5"+
    "\1\260\24\5\17\0\2\5\4\0\2\5\5\0\27\5"+
    "\1\261\17\0\2\5\4\0\2\5\5\0\6\5\1\262"+
    "\21\5\17\0\2\5\4\0\2\5\5\0\1\5\1\263"+
    "\26\5\17\0\2\5\4\0\2\5\5\0\25\5\1\264"+
    "\2\5\17\0\2\5\4\0\2\5\5\0\4\5\1\265"+
    "\23\5\17\0\2\5\4\0\2\5\5\0\11\5\1\266"+
    "\16\5\17\0\2\5\4\0\2\5\5\0\20\5\1\267"+
    "\7\5\17\0\2\5\4\0\2\5\5\0\12\5\1\270"+
    "\15\5\17\0\2\5\4\0\2\5\5\0\7\5\1\271"+
    "\20\5\17\0\2\5\4\0\2\5\5\0\1\5\1\272"+
    "\26\5\17\0\2\5\4\0\2\5\5\0\10\5\1\273"+
    "\17\5\17\0\2\5\4\0\2\5\5\0\13\5\1\274"+
    "\14\5\17\0\2\5\4\0\2\5\5\0\3\5\1\275"+
    "\24\5\17\0\2\5\4\0\2\5\5\0\23\5\1\276"+
    "\4\5\17\0\2\5\4\0\2\5\5\0\11\5\1\277"+
    "\16\5\17\0\2\5\4\0\2\5\5\0\4\5\1\300"+
    "\23\5\17\0\2\5\4\0\2\5\5\0\5\5\1\301"+
    "\22\5\17\0\2\5\4\0\2\5\5\0\4\5\1\302"+
    "\23\5\17\0\2\5\4\0\2\5\5\0\5\5\1\303"+
    "\22\5\17\0\2\5\4\0\2\5\5\0\6\5\1\304"+
    "\21\5\17\0\2\5\4\0\2\5\5\0\5\5\1\305"+
    "\22\5\17\0\2\5\4\0\2\5\5\0\2\5\1\306"+
    "\25\5\17\0\2\5\4\0\2\5\5\0\2\5\1\307"+
    "\25\5\17\0\2\5\4\0\2\5\5\0\5\5\1\310"+
    "\22\5\17\0\2\5\4\0\2\5\5\0\11\5\1\311"+
    "\16\5\17\0\2\5\4\0\2\5\5\0\2\5\1\312"+
    "\25\5\17\0\2\5\4\0\2\5\5\0\3\5\1\313"+
    "\24\5\17\0\2\5\4\0\2\5\5\0\4\5\1\314"+
    "\23\5\17\0\2\5\3\0\3\315\1\0\60\315\1\0"+
    "\2\5\5\0\20\5\1\316\7\5\17\0\2\5\4\0"+
    "\2\5\5\0\2\5\1\317\1\5\1\320\23\5\17\0"+
    "\2\5\4\0\2\5\5\0\10\5\1\321\17\5\17\0"+
    "\2\5\4\0\2\5\5\0\12\5\1\322\15\5\17\0"+
    "\2\5\4\0\2\5\5\0\20\5\1\323\7\5\17\0"+
    "\2\5\4\0\2\5\5\0\10\5\1\324\17\5\17\0"+
    "\2\5\4\0\2\5\5\0\20\5\1\325\7\5\17\0"+
    "\2\5\4\0\2\5\5\0\22\5\1\326\5\5\17\0"+
    "\2\5\4\0\2\5\5\0\14\5\1\327\13\5\17\0"+
    "\2\5\4\0\2\5\5\0\5\5\1\330\22\5\17\0"+
    "\2\5\4\0\2\5\5\0\10\5\1\331\17\5\17\0"+
    "\2\5\4\0\2\5\5\0\12\5\1\332\15\5\17\0"+
    "\2\5\4\0\2\5\5\0\24\5\1\333\3\5\17\0"+
    "\2\5\4\0\2\5\5\0\6\5\1\334\21\5\17\0"+
    "\2\5\4\0\2\5\5\0\11\5\1\335\16\5\17\0"+
    "\2\5\4\0\2\5\5\0\17\5\1\336\10\5\17\0"+
    "\2\5\4\0\2\5\5\0\6\5\1\337\21\5\17\0"+
    "\2\5\4\0\2\5\5\0\1\340\27\5\17\0\2\5"+
    "\4\0\2\5\5\0\1\341\27\5\17\0\2\5\4\0"+
    "\2\5\5\0\1\5\1\342\26\5\17\0\2\5\4\0"+
    "\2\5\5\0\6\5\1\343\21\5\17\0\2\5\4\0"+
    "\2\5\5\0\20\5\1\344\7\5\17\0\2\5\64\0"+
    "\1\345\3\0\2\5\5\0\10\5\1\346\17\5\17\0"+
    "\2\5\4\0\2\5\5\0\7\5\1\347\20\5\17\0"+
    "\2\5\4\0\2\5\5\0\3\5\1\350\24\5\17\0"+
    "\2\5\4\0\2\5\5\0\15\5\1\351\12\5\17\0"+
    "\2\5\4\0\2\5\5\0\1\352\27\5\17\0\2\5"+
    "\4\0\2\5\5\0\21\5\1\353\6\5\17\0\2\5"+
    "\4\0\2\5\5\0\3\5\1\354\24\5\17\0\2\5"+
    "\4\0\2\5\5\0\5\5\1\355\22\5\17\0\2\5"+
    "\4\0\2\5\5\0\6\5\1\356\21\5\17\0\2\5"+
    "\4\0\2\5\5\0\17\5\1\357\10\5\17\0\2\5"+
    "\4\0\2\5\5\0\2\5\1\360\25\5\17\0\2\5"+
    "\4\0\2\5\5\0\5\5\1\361\22\5\17\0\2\5"+
    "\4\0\2\5\5\0\20\5\1\362\7\5\17\0\2\5"+
    "\4\0\2\5\5\0\5\5\1\363\22\5\17\0\2\5"+
    "\4\0\2\5\5\0\5\5\1\364\22\5\17\0\2\5"+
    "\4\0\2\5\5\0\6\5\1\365\21\5\17\0\2\5"+
    "\4\0\2\5\5\0\4\5\1\366\23\5\17\0\2\5"+
    "\4\0\2\5\5\0\3\5\1\367\24\5\17\0\2\5"+
    "\4\0\2\5\5\0\4\5\1\370\23\5\17\0\2\5"+
    "\4\0\2\5\5\0\25\5\1\371\2\5\17\0\2\5"+
    "\4\0\2\5\5\0\6\5\1\372\21\5\17\0\2\5"+
    "\4\0\2\5\5\0\1\373\27\5\17\0\2\5\4\0"+
    "\2\5\5\0\6\5\1\374\21\5\17\0\2\5\4\0"+
    "\2\5\5\0\2\5\1\375\25\5\17\0\2\5\4\0"+
    "\2\5\5\0\10\5\1\376\17\5\17\0\2\5\4\0"+
    "\2\5\5\0\25\5\1\377\2\5\17\0\2\5\4\0"+
    "\2\5\5\0\1\u0100\27\5\17\0\2\5\4\0\2\5"+
    "\5\0\10\5\1\u0101\17\5\17\0\2\5\4\0\2\5"+
    "\5\0\10\5\1\u0102\17\5\17\0\2\5\4\0\2\5"+
    "\5\0\5\5\1\u0103\22\5\17\0\2\5\4\0\2\5"+
    "\5\0\5\5\1\u0104\22\5\17\0\2\5\4\0\2\5"+
    "\5\0\20\5\1\u0105\7\5\17\0\2\5\4\0\2\5"+
    "\5\0\6\5\1\u0106\21\5\17\0\2\5\4\0\2\5"+
    "\5\0\11\5\1\u0107\16\5\17\0\2\5\4\0\2\5"+
    "\5\0\1\5\1\u0108\26\5\17\0\2\5\4\0\2\5"+
    "\5\0\15\5\1\u0109\12\5\17\0\2\5\4\0\2\5"+
    "\5\0\5\5\1\u010a\22\5\17\0\2\5\4\0\2\5"+
    "\5\0\6\5\1\u010b\21\5\17\0\2\5\4\0\2\5"+
    "\5\0\22\5\1\u010c\5\5\17\0\2\5\4\0\2\5"+
    "\5\0\2\5\1\u010d\25\5\17\0\2\5\4\0\2\5"+
    "\5\0\25\5\1\u010e\2\5\17\0\2\5\4\0\2\5"+
    "\5\0\20\5\1\u010f\7\5\17\0\2\5\4\0\2\5"+
    "\5\0\3\5\1\u0110\24\5\17\0\2\5\4\0\2\5"+
    "\5\0\5\5\1\u0111\22\5\17\0\2\5\4\0\2\5"+
    "\5\0\3\5\1\u0112\24\5\17\0\2\5\4\0\2\5"+
    "\5\0\22\5\1\u0113\5\5\17\0\2\5\4\0\2\5"+
    "\5\0\10\5\1\u0114\17\5\17\0\2\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10608];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\11\2\1\1\11\3\1\1\11\20\1"+
    "\7\11\1\1\3\11\6\1\1\11\1\1\1\11\3\1"+
    "\1\0\42\1\4\11\2\0\4\11\1\0\47\1\1\0"+
    "\1\1\1\11\45\1\1\0\35\1\1\0\27\1\1\11"+
    "\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn, null);
  }
    
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public WurstScriptScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public WurstScriptScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 74: 
          { return symbol(WurstTokens.GLOBALS);
          }
        case 88: break;
        case 72: 
          { return symbol(WurstTokens.PACKAGE);
          }
        case 89: break;
        case 41: 
          { return symbol(WurstTokens.DIV_INT);
          }
        case 90: break;
        case 59: 
          { return symbol(WurstTokens.FALSE);
          }
        case 91: break;
        case 69: 
          { return symbol(WurstTokens.ENDLOOP);
          }
        case 92: break;
        case 61: 
          { return symbol(WurstTokens.CASTTO);
          }
        case 93: break;
        case 55: 
          { return symbol(WurstTokens.LOCAL);
          }
        case 94: break;
        case 67: 
          { return symbol(WurstTokens.INTEGER_LITERAL, Utils.parseAsciiInt4(yytext()));
          }
        case 95: break;
        case 43: 
          { return symbol(WurstTokens.INTEGER_LITERAL, Utils.parseHexInt(yytext()));
          }
        case 96: break;
        case 53: 
          { return symbol(WurstTokens.INIT);
          }
        case 97: break;
        case 83: 
          { return symbol(WurstTokens.ENDGLOBALS);
          }
        case 98: break;
        case 11: 
          { return symbol(WurstTokens.LBRACK);
          }
        case 99: break;
        case 3: 
          { return symbol(WurstTokens.INTEGER_LITERAL, Utils.parseInt(yytext()));
          }
        case 100: break;
        case 82: 
          { return symbol(WurstTokens.ONDESTROY);
          }
        case 101: break;
        case 75: 
          { return symbol(WurstTokens.DESTROY);
          }
        case 102: break;
        case 35: 
          { string.append('\n');
          }
        case 103: break;
        case 36: 
          { string.append('\"');
          }
        case 104: break;
        case 20: 
          { return symbol(WurstTokens.GT);
          }
        case 105: break;
        case 42: 
          { return symbol(WurstTokens.MOD_INT);
          }
        case 106: break;
        case 4: 
          { return symbol(WurstTokens.IDENTIFIER, yytext());
          }
        case 107: break;
        case 17: 
          { return symbol(WurstTokens.MINUS);
          }
        case 108: break;
        case 19: 
          { return symbol(WurstTokens.EQ);
          }
        case 109: break;
        case 24: 
          { yybegin(YYINITIAL); 
                                   return symbol(WurstTokens.STRING_LITERAL, 
                                   string.toString());
          }
        case 110: break;
        case 62: 
          { return symbol(WurstTokens.RETURN);
          }
        case 111: break;
        case 33: 
          { string.append('\r');
          }
        case 112: break;
        case 22: 
          { string.setLength(0); yybegin(STRING);
          }
        case 113: break;
        case 56: 
          { return symbol(WurstTokens.ARRAY);
          }
        case 114: break;
        case 21: 
          { return symbol(WurstTokens.LT);
          }
        case 115: break;
        case 34: 
          { string.append('\t');
          }
        case 116: break;
        case 51: 
          { return symbol(WurstTokens.TYPE);
          }
        case 117: break;
        case 32: 
          { return symbol(WurstTokens.LTEQ);
          }
        case 118: break;
        case 77: 
          { return symbol(WurstTokens.EXITWHEN);
          }
        case 119: break;
        case 57: 
          { return symbol(WurstTokens.ENDIF);
          }
        case 120: break;
        case 7: 
          { return symbol(WurstTokens.MULT);
          }
        case 121: break;
        case 87: 
          { return symbol(WurstTokens.ENDFUNCTION);
          }
        case 122: break;
        case 86: 
          { return symbol(WurstTokens.PUBLICREAD);
          }
        case 123: break;
        case 30: 
          { return symbol(WurstTokens.NOTEQ);
          }
        case 124: break;
        case 60: 
          { return symbol(WurstTokens.WHILE);
          }
        case 125: break;
        case 26: 
          { return symbol(WurstTokens.REAL_LITERAL, Double.parseDouble(yytext()));
          }
        case 126: break;
        case 66: 
          { return symbol(WurstTokens.PUBLIC);
          }
        case 127: break;
        case 28: 
          { return symbol(WurstTokens.OR);
          }
        case 128: break;
        case 10: 
          { return symbol(WurstTokens.COMMA);
          }
        case 129: break;
        case 78: 
          { return symbol(WurstTokens.FUNCTION);
          }
        case 130: break;
        case 76: 
          { return symbol(WurstTokens.CONSTANT);
          }
        case 131: break;
        case 39: 
          { return symbol(WurstTokens.NEW);
          }
        case 132: break;
        case 46: 
          { return symbol(WurstTokens.LOOP);
          }
        case 133: break;
        case 47: 
          { return symbol(WurstTokens.ELSE);
          }
        case 134: break;
        case 70: 
          { return symbol(WurstTokens.EXTENDS);
          }
        case 135: break;
        case 85: 
          { return symbol(WurstTokens.IMPLEMENTS);
          }
        case 136: break;
        case 5: 
          { return symbol(WurstTokens.NL);
          }
        case 137: break;
        case 2: 
          { return symbol(WurstTokens.error, yytext());
          }
        case 138: break;
        case 14: 
          { return symbol(WurstTokens.RSQUARE);
          }
        case 139: break;
        case 81: 
          { return symbol(WurstTokens.PROTECTED);
          }
        case 140: break;
        case 31: 
          { return symbol(WurstTokens.GTEQ);
          }
        case 141: break;
        case 27: 
          { return symbol(WurstTokens.IF);
          }
        case 142: break;
        case 25: 
          { string.append('\\');
          }
        case 143: break;
        case 38: 
          { return symbol(WurstTokens.SET);
          }
        case 144: break;
        case 71: 
          { return symbol(WurstTokens.NOTHING);
          }
        case 145: break;
        case 6: 
          { return symbol(WurstTokens.DIV_REAL);
          }
        case 146: break;
        case 63: 
          { return symbol(WurstTokens.ELSEIF);
          }
        case 147: break;
        case 84: 
          { return symbol(WurstTokens.NATIVETYPE);
          }
        case 148: break;
        case 64: 
          { return symbol(WurstTokens.NATIVE);
          }
        case 149: break;
        case 48: 
          { return symbol(WurstTokens.TRUE);
          }
        case 150: break;
        case 44: 
          { return symbol(WurstTokens.INTEGER_LITERAL, Utils.parseAsciiInt1(yytext()));
          }
        case 151: break;
        case 15: 
          { return symbol(WurstTokens.DOT);
          }
        case 152: break;
        case 80: 
          { return symbol(WurstTokens.INTERFACE);
          }
        case 153: break;
        case 52: 
          { return symbol(WurstTokens.NULL);
          }
        case 154: break;
        case 68: 
          { return symbol(WurstTokens.RETURNS);
          }
        case 155: break;
        case 37: 
          { return symbol(WurstTokens.AND);
          }
        case 156: break;
        case 73: 
          { return symbol(WurstTokens.PRIVATE);
          }
        case 157: break;
        case 16: 
          { return symbol(WurstTokens.PLUS);
          }
        case 158: break;
        case 13: 
          { return symbol(WurstTokens.LSQUARE);
          }
        case 159: break;
        case 58: 
          { return symbol(WurstTokens.TAKES);
          }
        case 160: break;
        case 18: 
          { return symbol(WurstTokens.MOD_REAL);
          }
        case 161: break;
        case 54: 
          { return symbol(WurstTokens.CLASS);
          }
        case 162: break;
        case 23: 
          { string.append( yytext() );
          }
        case 163: break;
        case 79: 
          { return symbol(WurstTokens.CONSTRUCT);
          }
        case 164: break;
        case 9: 
          { return symbol(WurstTokens.RPAR);
          }
        case 165: break;
        case 40: 
          { return symbol(WurstTokens.NOT);
          }
        case 166: break;
        case 50: 
          { return symbol(WurstTokens.THIS);
          }
        case 167: break;
        case 29: 
          { return symbol(WurstTokens.EQEQ);
          }
        case 168: break;
        case 12: 
          { return symbol(WurstTokens.RBRACK);
          }
        case 169: break;
        case 65: 
          { return symbol(WurstTokens.IMPORT);
          }
        case 170: break;
        case 49: 
          { return symbol(WurstTokens.THEN);
          }
        case 171: break;
        case 8: 
          { return symbol(WurstTokens.LPAR);
          }
        case 172: break;
        case 45: 
          { return symbol(WurstTokens.CALL);
          }
        case 173: break;
        case 1: 
          { 
          }
        case 174: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return symbol(WurstTokens.ENDINPUT);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
