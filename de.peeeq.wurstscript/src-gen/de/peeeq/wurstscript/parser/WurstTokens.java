// Output created by jacc on Thu Nov 03 23:35:18 CET 2011

package de.peeeq.wurstscript.parser;

interface WurstTokens {
    int ENDINPUT = 0;
    int AND = 1;
    int ARRAY = 2;
    int CALL = 3;
    int CASTTO = 4;
    int CLASS = 5;
    int COMMA = 6;
    int CONSTANT = 7;
    int CONSTRUCT = 8;
    int DESTROY = 9;
    int DIV_INT = 10;
    int DIV_REAL = 11;
    int DOT = 12;
    int ELSE = 13;
    int ELSEIF = 14;
    int ENDFUNCTION = 15;
    int ENDGLOBALS = 16;
    int ENDIF = 17;
    int ENDLOOP = 18;
    int EOF = 19;
    int EQ = 20;
    int EQEQ = 21;
    int EXITWHEN = 22;
    int EXTENDS = 23;
    int FALSE = 24;
    int FUNCTION = 25;
    int GLOBALS = 26;
    int GT = 27;
    int GTEQ = 28;
    int IDENTIFIER = 29;
    int IF = 30;
    int IMPLEMENTS = 31;
    int IMPORT = 32;
    int INIT = 33;
    int INTEGER_LITERAL = 34;
    int INTERFACE = 35;
    int LBRACK = 36;
    int LOCAL = 37;
    int LOOP = 38;
    int LPAR = 39;
    int LSQUARE = 40;
    int LT = 41;
    int LTEQ = 42;
    int MINUS = 43;
    int MOD_INT = 44;
    int MOD_REAL = 45;
    int MULT = 46;
    int NATIVE = 47;
    int NATIVETYPE = 48;
    int NEW = 49;
    int NL = 50;
    int NOT = 51;
    int NOTEQ = 52;
    int NOTHING = 53;
    int NULL = 54;
    int ONDESTROY = 55;
    int OR = 56;
    int PACKAGE = 57;
    int PLUS = 58;
    int PRIVATE = 59;
    int PROTECTED = 60;
    int PUBLIC = 61;
    int PUBLICREAD = 62;
    int RBRACK = 63;
    int REAL_LITERAL = 64;
    int RETURN = 65;
    int RETURNS = 66;
    int RPAR = 67;
    int RSQUARE = 68;
    int SET = 69;
    int STATIC = 70;
    int STRING_LITERAL = 71;
    int TAKES = 72;
    int THEN = 73;
    int THIS = 74;
    int TRUE = 75;
    int TYPE = 76;
    int UMINUS = 77;
    int VAL = 78;
    int WHILE = 79;
    int error = 80;
}
