/* The following code was generated by JFlex 1.4.3 on 21.11.11 22:52 */

package de.peeeq.wurstscript.parser;

import java_cup.runtime.*;
import de.peeeq.wurstscript.utils.Utils;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21.11.11 22:52 from the specification file
 * <tt>C:/pscript/de.peeeq.wurstscript/parserspec/wurstscript.flex</tt>
 */
public class WurstScriptScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\3\2\0\1\4\22\0\1\5\1\55\1\63\2\0"+
    "\1\53\1\0\1\62\1\41\1\42\1\7\1\51\1\43\1\52\1\50"+
    "\1\6\1\60\11\1\1\0\1\10\1\57\1\54\1\56\2\0\6\61"+
    "\15\2\1\40\6\2\1\46\1\64\1\47\1\0\1\2\1\0\1\13"+
    "\1\32\1\11\1\33\1\16\1\23\1\31\1\25\1\22\1\2\1\30"+
    "\1\12\1\35\1\21\1\26\1\27\1\2\1\15\1\14\1\17\1\20"+
    "\1\34\1\24\1\37\1\36\1\2\1\44\1\0\1\45\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\3\1\4\2\5\1\1\1\6"+
    "\1\7\1\10\21\4\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\2"+
    "\1\25\1\26\1\3\1\2\1\27\1\30\1\31\1\32"+
    "\1\33\1\1\1\0\26\4\1\34\1\35\1\36\5\4"+
    "\1\37\11\4\1\0\1\40\1\41\1\42\1\43\2\0"+
    "\1\44\1\45\1\46\1\47\1\0\7\4\1\50\1\4"+
    "\1\51\13\4\1\52\1\4\1\53\1\4\1\54\6\4"+
    "\1\55\11\4\1\56\1\57\1\60\1\61\1\0\1\62"+
    "\1\1\1\4\1\63\3\4\1\64\4\4\1\65\7\4"+
    "\1\66\1\67\1\70\1\71\1\4\1\72\2\4\1\73"+
    "\17\4\1\0\1\74\2\4\1\75\1\76\5\4\1\77"+
    "\4\4\1\100\7\4\1\101\1\4\1\102\11\4\1\0"+
    "\1\103\3\4\1\104\1\105\1\106\6\4\1\107\3\4"+
    "\1\110\7\4\1\111\2\4\1\112\1\113\3\4\1\114"+
    "\1\115\2\4\1\116\3\4\1\117\6\4\1\120\1\121"+
    "\2\4\1\122\1\123\1\124\1\4\1\125\2\4\1\126"+
    "\1\127\4\4\1\130\1\4\1\131\2\4\1\132\3\4"+
    "\1\133\1\4\1\134\1\135\1\136\2\4\1\137\1\140"+
    "\1\141\1\142\1\143";

  private static int [] zzUnpackAction() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\152\0\u0109\0\u013e"+
    "\0\u0173\0\152\0\152\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c"+
    "\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\152\0\152\0\152\0\152"+
    "\0\152\0\152\0\152\0\u052d\0\152\0\u0562\0\152\0\u0597"+
    "\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0\0\152\0\u06d5\0\152"+
    "\0\u070a\0\u052d\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\324\0\u0c37\0\324\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\324\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\152\0\152\0\152"+
    "\0\152\0\u0f87\0\u0fbc\0\152\0\152\0\152\0\152\0\u0ff1"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\324"+
    "\0\u1199\0\324\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7"+
    "\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\324\0\u1415\0\324"+
    "\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd"+
    "\0\324\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730"+
    "\0\u1765\0\u179a\0\324\0\u17cf\0\152\0\u0f87\0\u1804\0\u1804"+
    "\0\152\0\u1839\0\324\0\u186e\0\u18a3\0\u18d8\0\324\0\u190d"+
    "\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5"+
    "\0\u1aea\0\u1b1f\0\u1b54\0\324\0\324\0\u1b89\0\324\0\u1bbe"+
    "\0\324\0\u1bf3\0\u1c28\0\324\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc"+
    "\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4"+
    "\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\324\0\u1fad\0\u1fe2\0\324"+
    "\0\324\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb\0\324\0\u2120"+
    "\0\u2155\0\u218a\0\u21bf\0\324\0\u21f4\0\u2229\0\u225e\0\u2293"+
    "\0\u22c8\0\u22fd\0\u2332\0\324\0\u2367\0\324\0\u239c\0\u23d1"+
    "\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544\0\u2579"+
    "\0\324\0\u25ae\0\u25e3\0\u2618\0\324\0\u264d\0\324\0\u2682"+
    "\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a"+
    "\0\u285f\0\324\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d"+
    "\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\324\0\152\0\u2aa6\0\u2adb"+
    "\0\u2b10\0\324\0\324\0\u2b45\0\u2b7a\0\324\0\u2baf\0\u2be4"+
    "\0\u2c19\0\324\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\u2d57"+
    "\0\324\0\324\0\u2d8c\0\u2dc1\0\324\0\324\0\324\0\u2df6"+
    "\0\324\0\u2e2b\0\u2e60\0\324\0\324\0\u2e95\0\u2eca\0\u2eff"+
    "\0\u2f34\0\324\0\u2f69\0\324\0\u2f9e\0\u2fd3\0\324\0\u3008"+
    "\0\u303d\0\u3072\0\324\0\u30a7\0\324\0\324\0\324\0\u30dc"+
    "\0\u3111\0\324\0\324\0\324\0\324\0\324";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\5\1\30\1\31"+
    "\1\5\1\32\1\5\1\33\1\5\1\34\3\5\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\5"+
    "\1\55\1\56\1\3\3\57\1\0\1\3\56\57\1\60"+
    "\1\61\66\0\1\4\46\0\1\62\7\0\1\4\5\0"+
    "\2\5\6\0\30\5\17\0\2\5\6\0\1\6\66\0"+
    "\1\10\65\0\1\63\1\64\56\0\2\5\6\0\1\5"+
    "\1\65\1\66\12\5\1\67\12\5\17\0\2\5\4\0"+
    "\2\5\6\0\15\5\1\70\12\5\17\0\2\5\4\0"+
    "\2\5\6\0\4\5\1\71\3\5\1\72\10\5\1\73"+
    "\6\5\17\0\2\5\4\0\2\5\6\0\5\5\1\74"+
    "\1\75\21\5\17\0\2\5\4\0\2\5\6\0\5\5"+
    "\1\76\22\5\17\0\2\5\4\0\2\5\6\0\1\5"+
    "\1\77\6\5\1\100\15\5\1\101\1\5\17\0\2\5"+
    "\4\0\2\5\6\0\2\5\1\102\1\5\1\103\7\5"+
    "\1\104\10\5\1\105\2\5\17\0\2\5\4\0\2\5"+
    "\6\0\3\5\1\106\24\5\17\0\2\5\4\0\2\5"+
    "\6\0\2\5\1\107\2\5\1\110\1\5\1\111\5\5"+
    "\1\112\12\5\17\0\2\5\4\0\2\5\6\0\6\5"+
    "\1\113\1\5\1\114\1\5\1\115\11\5\1\116\3\5"+
    "\17\0\2\5\4\0\2\5\6\0\2\5\1\117\4\5"+
    "\1\120\5\5\1\121\12\5\17\0\2\5\4\0\2\5"+
    "\6\0\14\5\1\122\13\5\17\0\2\5\4\0\2\5"+
    "\6\0\4\5\1\123\3\5\1\124\12\5\1\125\4\5"+
    "\17\0\2\5\4\0\2\5\6\0\2\5\1\126\1\5"+
    "\1\127\2\5\1\130\20\5\17\0\2\5\4\0\2\5"+
    "\6\0\1\5\1\131\26\5\17\0\2\5\4\0\2\5"+
    "\6\0\5\5\1\132\3\5\1\133\16\5\17\0\2\5"+
    "\4\0\2\5\6\0\15\5\1\134\12\5\17\0\2\5"+
    "\4\0\1\62\56\0\1\62\56\0\1\135\66\0\1\136"+
    "\64\0\1\137\64\0\1\140\64\0\1\141\11\0\1\4"+
    "\35\0\1\142\10\0\1\62\7\0\1\4\4\0\3\143"+
    "\1\0\61\143\3\57\2\0\56\57\17\0\1\144\1\0"+
    "\1\145\1\0\1\146\41\0\1\147\1\0\3\63\2\0"+
    "\60\63\7\64\1\150\55\64\1\0\2\5\6\0\2\5"+
    "\1\151\25\5\17\0\2\5\4\0\2\5\6\0\1\5"+
    "\1\152\1\5\1\153\24\5\17\0\2\5\4\0\2\5"+
    "\6\0\10\5\1\154\17\5\17\0\2\5\4\0\2\5"+
    "\6\0\1\155\14\5\1\156\12\5\17\0\2\5\4\0"+
    "\2\5\6\0\4\5\1\157\23\5\17\0\2\5\4\0"+
    "\2\5\6\0\22\5\1\160\5\5\17\0\2\5\4\0"+
    "\2\5\6\0\3\5\1\161\24\5\17\0\2\5\4\0"+
    "\2\5\6\0\6\5\1\162\21\5\17\0\2\5\4\0"+
    "\2\5\6\0\2\5\1\163\25\5\17\0\2\5\4\0"+
    "\2\5\6\0\6\5\1\164\21\5\17\0\2\5\4\0"+
    "\2\5\6\0\3\5\1\165\24\5\17\0\2\5\4\0"+
    "\2\5\6\0\22\5\1\166\5\5\17\0\2\5\4\0"+
    "\2\5\6\0\6\5\1\167\2\5\1\170\16\5\17\0"+
    "\2\5\4\0\2\5\6\0\17\5\1\171\10\5\17\0"+
    "\2\5\4\0\2\5\6\0\7\5\1\172\20\5\17\0"+
    "\2\5\4\0\2\5\6\0\5\5\1\173\3\5\1\174"+
    "\16\5\17\0\2\5\4\0\2\5\6\0\16\5\1\175"+
    "\11\5\17\0\2\5\4\0\2\5\6\0\5\5\1\176"+
    "\22\5\17\0\2\5\4\0\2\5\6\0\6\5\1\177"+
    "\21\5\17\0\2\5\4\0\2\5\6\0\13\5\1\200"+
    "\14\5\17\0\2\5\4\0\2\5\6\0\1\5\1\201"+
    "\26\5\17\0\2\5\4\0\2\5\6\0\6\5\1\202"+
    "\21\5\17\0\2\5\4\0\2\5\6\0\6\5\1\203"+
    "\2\5\1\204\16\5\17\0\2\5\4\0\2\5\6\0"+
    "\16\5\1\205\5\5\1\206\3\5\17\0\2\5\4\0"+
    "\2\5\6\0\1\5\1\207\26\5\17\0\2\5\4\0"+
    "\2\5\6\0\10\5\1\210\17\5\17\0\2\5\4\0"+
    "\2\5\6\0\4\5\1\211\23\5\17\0\2\5\4\0"+
    "\2\5\6\0\11\5\1\212\16\5\17\0\2\5\4\0"+
    "\2\5\6\0\22\5\1\213\5\5\17\0\2\5\4\0"+
    "\2\5\6\0\5\5\1\214\22\5\17\0\2\5\4\0"+
    "\2\5\6\0\1\215\27\5\17\0\2\5\4\0\2\5"+
    "\6\0\11\5\1\216\3\5\1\217\12\5\17\0\2\5"+
    "\4\0\2\5\6\0\21\5\1\220\6\5\17\0\2\5"+
    "\4\0\2\5\6\0\15\5\1\221\12\5\17\0\2\5"+
    "\4\0\2\5\6\0\3\5\1\222\24\5\17\0\2\5"+
    "\4\0\2\5\6\0\23\5\1\223\4\5\17\0\2\5"+
    "\4\0\2\5\6\0\22\5\1\224\5\5\17\0\2\5"+
    "\61\0\1\225\7\0\1\226\7\0\1\226\1\0\1\226"+
    "\2\0\1\226\4\0\1\226\6\0\2\226\24\0\2\226"+
    "\3\0\3\227\1\0\56\227\1\230\2\227\6\64\1\231"+
    "\1\150\55\64\1\0\2\5\6\0\3\5\1\232\24\5"+
    "\17\0\2\5\4\0\2\5\6\0\1\5\1\233\26\5"+
    "\17\0\2\5\4\0\2\5\6\0\6\5\1\234\21\5"+
    "\17\0\2\5\4\0\2\5\6\0\3\5\1\235\24\5"+
    "\17\0\2\5\4\0\2\5\6\0\2\5\1\236\25\5"+
    "\17\0\2\5\4\0\2\5\6\0\16\5\1\237\11\5"+
    "\17\0\2\5\4\0\2\5\6\0\2\5\1\240\25\5"+
    "\17\0\2\5\4\0\2\5\6\0\6\5\1\241\21\5"+
    "\17\0\2\5\4\0\2\5\6\0\6\5\1\242\21\5"+
    "\17\0\2\5\4\0\2\5\6\0\7\5\1\243\20\5"+
    "\17\0\2\5\4\0\2\5\6\0\5\5\1\244\22\5"+
    "\17\0\2\5\4\0\2\5\6\0\1\5\1\245\7\5"+
    "\1\246\1\247\5\5\1\250\7\5\17\0\2\5\4\0"+
    "\2\5\6\0\5\5\1\251\22\5\17\0\2\5\4\0"+
    "\2\5\6\0\6\5\1\252\21\5\17\0\2\5\4\0"+
    "\2\5\6\0\5\5\1\253\22\5\17\0\2\5\4\0"+
    "\2\5\6\0\5\5\1\254\22\5\17\0\2\5\4\0"+
    "\2\5\6\0\10\5\1\255\17\5\17\0\2\5\4\0"+
    "\2\5\6\0\3\5\1\256\24\5\17\0\2\5\4\0"+
    "\2\5\6\0\5\5\1\257\22\5\17\0\2\5\4\0"+
    "\2\5\6\0\11\5\1\260\16\5\17\0\2\5\4\0"+
    "\2\5\6\0\1\5\1\261\26\5\17\0\2\5\4\0"+
    "\2\5\6\0\14\5\1\262\13\5\17\0\2\5\4\0"+
    "\2\5\6\0\5\5\1\263\22\5\17\0\2\5\4\0"+
    "\2\5\6\0\6\5\1\264\21\5\17\0\2\5\4\0"+
    "\2\5\6\0\1\5\1\265\13\5\1\266\12\5\17\0"+
    "\2\5\4\0\2\5\6\0\7\5\1\267\20\5\17\0"+
    "\2\5\4\0\2\5\6\0\3\5\1\270\24\5\17\0"+
    "\2\5\4\0\2\5\6\0\1\271\27\5\17\0\2\5"+
    "\4\0\2\5\6\0\1\5\1\272\26\5\17\0\2\5"+
    "\4\0\2\5\6\0\5\5\1\273\22\5\17\0\2\5"+
    "\4\0\2\5\6\0\4\5\1\274\23\5\17\0\2\5"+
    "\4\0\2\5\6\0\17\5\1\275\10\5\17\0\2\5"+
    "\4\0\2\5\6\0\23\5\1\276\4\5\17\0\2\5"+
    "\4\0\2\5\6\0\6\5\1\277\21\5\17\0\2\5"+
    "\4\0\2\5\6\0\1\5\1\300\26\5\17\0\2\5"+
    "\4\0\2\5\6\0\21\5\1\301\6\5\17\0\2\5"+
    "\4\0\2\5\6\0\6\5\1\302\21\5\17\0\2\5"+
    "\4\0\2\5\6\0\7\5\1\303\20\5\17\0\2\5"+
    "\3\0\3\304\1\0\61\304\1\0\2\5\6\0\3\5"+
    "\1\305\24\5\17\0\2\5\4\0\2\5\6\0\27\5"+
    "\1\306\17\0\2\5\4\0\2\5\6\0\6\5\1\307"+
    "\21\5\17\0\2\5\4\0\2\5\6\0\1\5\1\310"+
    "\26\5\17\0\2\5\4\0\2\5\6\0\25\5\1\311"+
    "\2\5\17\0\2\5\4\0\2\5\6\0\4\5\1\312"+
    "\23\5\17\0\2\5\4\0\2\5\6\0\11\5\1\313"+
    "\16\5\17\0\2\5\4\0\2\5\6\0\4\5\1\314"+
    "\23\5\17\0\2\5\4\0\2\5\6\0\11\5\1\315"+
    "\16\5\17\0\2\5\4\0\2\5\6\0\15\5\1\316"+
    "\12\5\17\0\2\5\4\0\2\5\6\0\12\5\1\317"+
    "\15\5\17\0\2\5\4\0\2\5\6\0\7\5\1\320"+
    "\20\5\17\0\2\5\4\0\2\5\6\0\1\5\1\321"+
    "\26\5\17\0\2\5\4\0\2\5\6\0\10\5\1\322"+
    "\17\5\17\0\2\5\4\0\2\5\6\0\13\5\1\323"+
    "\14\5\17\0\2\5\4\0\2\5\6\0\3\5\1\324"+
    "\24\5\17\0\2\5\4\0\2\5\6\0\6\5\1\325"+
    "\21\5\17\0\2\5\4\0\2\5\6\0\23\5\1\326"+
    "\4\5\17\0\2\5\4\0\2\5\6\0\11\5\1\327"+
    "\16\5\17\0\2\5\4\0\2\5\6\0\4\5\1\330"+
    "\23\5\17\0\2\5\4\0\2\5\6\0\5\5\1\331"+
    "\22\5\17\0\2\5\4\0\2\5\6\0\4\5\1\332"+
    "\23\5\17\0\2\5\4\0\2\5\6\0\6\5\1\333"+
    "\21\5\17\0\2\5\4\0\2\5\6\0\5\5\1\334"+
    "\22\5\17\0\2\5\4\0\2\5\6\0\6\5\1\335"+
    "\21\5\17\0\2\5\4\0\2\5\6\0\5\5\1\336"+
    "\22\5\17\0\2\5\4\0\2\5\6\0\3\5\1\337"+
    "\24\5\17\0\2\5\4\0\2\5\6\0\4\5\1\340"+
    "\23\5\17\0\2\5\4\0\2\5\6\0\2\5\1\341"+
    "\25\5\17\0\2\5\4\0\2\5\6\0\2\5\1\342"+
    "\25\5\17\0\2\5\4\0\2\5\6\0\5\5\1\343"+
    "\22\5\17\0\2\5\4\0\2\5\6\0\11\5\1\344"+
    "\16\5\17\0\2\5\4\0\2\5\6\0\2\5\1\345"+
    "\25\5\17\0\2\5\4\0\2\5\6\0\4\5\1\346"+
    "\23\5\17\0\2\5\4\0\2\5\6\0\1\5\1\347"+
    "\26\5\17\0\2\5\3\0\3\350\1\0\61\350\1\0"+
    "\2\5\6\0\15\5\1\351\12\5\17\0\2\5\4\0"+
    "\2\5\6\0\2\5\1\352\1\5\1\353\23\5\17\0"+
    "\2\5\4\0\2\5\6\0\2\5\1\354\25\5\17\0"+
    "\2\5\4\0\2\5\6\0\1\355\27\5\17\0\2\5"+
    "\4\0\2\5\6\0\10\5\1\356\17\5\17\0\2\5"+
    "\4\0\2\5\6\0\12\5\1\357\15\5\17\0\2\5"+
    "\4\0\2\5\6\0\15\5\1\360\12\5\17\0\2\5"+
    "\4\0\2\5\6\0\10\5\1\361\17\5\17\0\2\5"+
    "\4\0\2\5\6\0\15\5\1\362\12\5\17\0\2\5"+
    "\4\0\2\5\6\0\22\5\1\363\5\5\17\0\2\5"+
    "\4\0\2\5\6\0\14\5\1\364\13\5\17\0\2\5"+
    "\4\0\2\5\6\0\25\5\1\365\2\5\17\0\2\5"+
    "\4\0\2\5\6\0\5\5\1\366\22\5\17\0\2\5"+
    "\4\0\2\5\6\0\10\5\1\367\17\5\17\0\2\5"+
    "\4\0\2\5\6\0\12\5\1\370\15\5\17\0\2\5"+
    "\4\0\2\5\6\0\24\5\1\371\3\5\17\0\2\5"+
    "\4\0\2\5\6\0\6\5\1\372\21\5\17\0\2\5"+
    "\4\0\2\5\6\0\2\5\1\373\25\5\17\0\2\5"+
    "\4\0\2\5\6\0\11\5\1\374\16\5\17\0\2\5"+
    "\4\0\2\5\6\0\6\5\1\375\21\5\17\0\2\5"+
    "\4\0\2\5\6\0\11\5\1\376\16\5\17\0\2\5"+
    "\4\0\2\5\6\0\20\5\1\377\7\5\17\0\2\5"+
    "\4\0\2\5\6\0\6\5\1\u0100\21\5\17\0\2\5"+
    "\4\0\2\5\6\0\1\u0101\27\5\17\0\2\5\4\0"+
    "\2\5\6\0\1\u0102\27\5\17\0\2\5\4\0\2\5"+
    "\6\0\1\5\1\u0103\26\5\17\0\2\5\4\0\2\5"+
    "\6\0\15\5\1\u0104\12\5\17\0\2\5\4\0\2\5"+
    "\6\0\5\5\1\u0105\22\5\17\0\2\5\65\0\1\u0106"+
    "\3\0\2\5\6\0\10\5\1\u0107\17\5\17\0\2\5"+
    "\4\0\2\5\6\0\7\5\1\u0108\20\5\17\0\2\5"+
    "\4\0\2\5\6\0\1\u0109\27\5\17\0\2\5\4\0"+
    "\2\5\6\0\3\5\1\u010a\24\5\17\0\2\5\4\0"+
    "\2\5\6\0\16\5\1\u010b\11\5\17\0\2\5\4\0"+
    "\2\5\6\0\1\u010c\27\5\17\0\2\5\4\0\2\5"+
    "\6\0\21\5\1\u010d\6\5\17\0\2\5\4\0\2\5"+
    "\6\0\3\5\1\u010e\24\5\17\0\2\5\4\0\2\5"+
    "\6\0\5\5\1\u010f\22\5\17\0\2\5\4\0\2\5"+
    "\6\0\16\5\1\u0110\11\5\17\0\2\5\4\0\2\5"+
    "\6\0\6\5\1\u0111\21\5\17\0\2\5\4\0\2\5"+
    "\6\0\20\5\1\u0112\7\5\17\0\2\5\4\0\2\5"+
    "\6\0\2\5\1\u0113\25\5\17\0\2\5\4\0\2\5"+
    "\6\0\5\5\1\u0114\22\5\17\0\2\5\4\0\2\5"+
    "\6\0\21\5\1\u0115\6\5\17\0\2\5\4\0\2\5"+
    "\6\0\15\5\1\u0116\12\5\17\0\2\5\4\0\2\5"+
    "\6\0\4\5\1\u0117\23\5\17\0\2\5\4\0\2\5"+
    "\6\0\22\5\1\u0118\5\5\17\0\2\5\4\0\2\5"+
    "\6\0\5\5\1\u0119\22\5\17\0\2\5\4\0\2\5"+
    "\6\0\5\5\1\u011a\22\5\17\0\2\5\4\0\2\5"+
    "\6\0\6\5\1\u011b\21\5\17\0\2\5\4\0\2\5"+
    "\6\0\4\5\1\u011c\23\5\17\0\2\5\4\0\2\5"+
    "\6\0\3\5\1\u011d\24\5\17\0\2\5\4\0\2\5"+
    "\6\0\25\5\1\u011e\2\5\17\0\2\5\4\0\2\5"+
    "\6\0\6\5\1\u011f\21\5\17\0\2\5\4\0\2\5"+
    "\6\0\1\u0120\27\5\17\0\2\5\4\0\2\5\6\0"+
    "\6\5\1\u0121\21\5\17\0\2\5\4\0\2\5\6\0"+
    "\6\5\1\u0122\21\5\17\0\2\5\4\0\2\5\6\0"+
    "\2\5\1\u0123\25\5\17\0\2\5\4\0\2\5\6\0"+
    "\10\5\1\u0124\17\5\17\0\2\5\4\0\2\5\6\0"+
    "\5\5\1\u0125\22\5\17\0\2\5\4\0\2\5\6\0"+
    "\25\5\1\u0126\2\5\17\0\2\5\4\0\2\5\6\0"+
    "\1\u0127\27\5\17\0\2\5\4\0\2\5\6\0\10\5"+
    "\1\u0128\17\5\17\0\2\5\4\0\2\5\6\0\1\5"+
    "\1\u0129\26\5\17\0\2\5\4\0\2\5\6\0\10\5"+
    "\1\u012a\17\5\17\0\2\5\4\0\2\5\6\0\15\5"+
    "\1\u012b\12\5\17\0\2\5\4\0\2\5\6\0\5\5"+
    "\1\u012c\22\5\17\0\2\5\4\0\2\5\6\0\5\5"+
    "\1\u012d\22\5\17\0\2\5\4\0\2\5\6\0\5\5"+
    "\1\u012e\22\5\17\0\2\5\4\0\2\5\6\0\6\5"+
    "\1\u012f\21\5\17\0\2\5\4\0\2\5\6\0\11\5"+
    "\1\u0130\16\5\17\0\2\5\4\0\2\5\6\0\1\5"+
    "\1\u0131\26\5\17\0\2\5\4\0\2\5\6\0\16\5"+
    "\1\u0132\11\5\17\0\2\5\4\0\2\5\6\0\5\5"+
    "\1\u0133\22\5\17\0\2\5\4\0\2\5\6\0\6\5"+
    "\1\u0134\21\5\17\0\2\5\4\0\2\5\6\0\5\5"+
    "\1\u0135\22\5\17\0\2\5\4\0\2\5\6\0\25\5"+
    "\1\u0136\2\5\17\0\2\5\4\0\2\5\6\0\22\5"+
    "\1\u0137\5\5\17\0\2\5\4\0\2\5\6\0\2\5"+
    "\1\u0138\25\5\17\0\2\5\4\0\2\5\6\0\15\5"+
    "\1\u0139\12\5\17\0\2\5\4\0\2\5\6\0\3\5"+
    "\1\u013a\24\5\17\0\2\5\4\0\2\5\6\0\5\5"+
    "\1\u013b\22\5\17\0\2\5\4\0\2\5\6\0\3\5"+
    "\1\u013c\24\5\17\0\2\5\4\0\2\5\6\0\22\5"+
    "\1\u013d\5\5\17\0\2\5\4\0\2\5\6\0\10\5"+
    "\1\u013e\17\5\17\0\2\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12614];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\11\2\1\1\11\3\1\2\11\21\1"+
    "\7\11\1\1\1\11\1\1\1\11\6\1\1\11\1\1"+
    "\1\11\3\1\1\0\50\1\1\0\4\11\2\0\4\11"+
    "\1\0\54\1\1\11\1\1\1\0\1\1\1\11\52\1"+
    "\1\0\43\1\1\0\35\1\1\11\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn);
  }
    
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public WurstScriptScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public WurstScriptScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { return symbol(TokenType.DOT);
          }
        case 100: break;
        case 10: 
          { return symbol(TokenType.RPAR);
          }
        case 101: break;
        case 56: 
          { return symbol(TokenType.THIS);
          }
        case 102: break;
        case 82: 
          { return symbol(TokenType.GLOBALS);
          }
        case 103: break;
        case 13: 
          { return symbol(TokenType.RBRACK);
          }
        case 104: break;
        case 80: 
          { return symbol(TokenType.PACKAGE);
          }
        case 105: break;
        case 46: 
          { return symbol(TokenType.DIV_INT);
          }
        case 106: break;
        case 67: 
          { return symbol(TokenType.CASTTO);
          }
        case 107: break;
        case 40: 
          { return symbol(TokenType.AND);
          }
        case 108: break;
        case 72: 
          { return symbol(TokenType.IMPORT);
          }
        case 109: break;
        case 86: 
          { return symbol(TokenType.EXITWHEN);
          }
        case 110: break;
        case 77: 
          { return symbol(TokenType.ENDLOOP);
          }
        case 111: break;
        case 55: 
          { return symbol(TokenType.THEN);
          }
        case 112: break;
        case 9: 
          { return symbol(TokenType.LPAR);
          }
        case 113: break;
        case 88: 
          { return symbol(TokenType.FUNCTION);
          }
        case 114: break;
        case 25: 
          { yybegin(YYINITIAL); 
                                   return symbol(TokenType.STRING_LITERAL, 
                                   string.toString());
          }
        case 115: break;
        case 90: 
          { return symbol(TokenType.CONSTRUCT);
          }
        case 116: break;
        case 84: 
          { return symbol(TokenType.CONSTANT);
          }
        case 117: break;
        case 44: 
          { return symbol(TokenType.NOT);
          }
        case 118: break;
        case 59: 
          { return symbol(TokenType.INIT);
          }
        case 119: break;
        case 89: 
          { return symbol(TokenType.OVERRIDE);
          }
        case 120: break;
        case 48: 
          { return symbol(TokenType.ARROW);
          }
        case 121: break;
        case 38: 
          { string.append('\n');
          }
        case 122: break;
        case 4: 
          { return symbol(TokenType.IDENTIFIER, yytext());
          }
        case 123: break;
        case 39: 
          { string.append('\"');
          }
        case 124: break;
        case 83: 
          { return symbol(TokenType.DESTROY);
          }
        case 125: break;
        case 3: 
          { return symbol(TokenType.INTEGER_LITERAL, Utils.parseInt(yytext()));
          }
        case 126: break;
        case 12: 
          { return symbol(TokenType.LBRACK);
          }
        case 127: break;
        case 95: 
          { return symbol(TokenType.ENDGLOBALS);
          }
        case 128: break;
        case 21: 
          { return symbol(TokenType.GT);
          }
        case 129: break;
        case 47: 
          { return symbol(TokenType.MOD_INT);
          }
        case 130: break;
        case 69: 
          { return symbol(TokenType.RETURN);
          }
        case 131: break;
        case 2: 
          { return symbol(TokenType.error, yytext());
          }
        case 132: break;
        case 64: 
          { return symbol(TokenType.TAKES);
          }
        case 133: break;
        case 36: 
          { string.append('\r');
          }
        case 134: break;
        case 93: 
          { return symbol(TokenType.ONDESTROY);
          }
        case 135: break;
        case 60: 
          { return symbol(TokenType.CLASS);
          }
        case 136: break;
        case 23: 
          { string.setLength(0); yybegin(STRING);
          }
        case 137: break;
        case 20: 
          { return symbol(TokenType.EQ);
          }
        case 138: break;
        case 28: 
          { return symbol(TokenType.IT);
          }
        case 139: break;
        case 6: 
          { return symbol(TokenType.DIV_REAL);
          }
        case 140: break;
        case 37: 
          { string.append('\t');
          }
        case 141: break;
        case 42: 
          { return symbol(TokenType.USE);
          }
        case 142: break;
        case 22: 
          { return symbol(TokenType.LT);
          }
        case 143: break;
        case 65: 
          { return symbol(TokenType.FALSE);
          }
        case 144: break;
        case 99: 
          { return symbol(TokenType.ENDFUNCTION);
          }
        case 145: break;
        case 19: 
          { return symbol(TokenType.MOD_REAL);
          }
        case 146: break;
        case 57: 
          { return symbol(TokenType.TYPE);
          }
        case 147: break;
        case 92: 
          { return symbol(TokenType.IMMUTABLE);
          }
        case 148: break;
        case 35: 
          { return symbol(TokenType.LTEQ);
          }
        case 149: break;
        case 68: 
          { return symbol(TokenType.STATIC);
          }
        case 150: break;
        case 61: 
          { return symbol(TokenType.LOCAL);
          }
        case 151: break;
        case 29: 
          { return symbol(TokenType.IN);
          }
        case 152: break;
        case 7: 
          { return symbol(TokenType.MULT);
          }
        case 153: break;
        case 31: 
          { return symbol(TokenType.OR);
          }
        case 154: break;
        case 87: 
          { return symbol(TokenType.THISTYPE);
          }
        case 155: break;
        case 98: 
          { return symbol(TokenType.PUBLICREAD);
          }
        case 156: break;
        case 50: 
          { return symbol(TokenType.INTEGER_LITERAL, Utils.parseAsciiInt1(yytext()));
          }
        case 157: break;
        case 73: 
          { return symbol(TokenType.PUBLIC);
          }
        case 158: break;
        case 85: 
          { return symbol(TokenType.ABSTRACT);
          }
        case 159: break;
        case 53: 
          { return symbol(TokenType.ELSE);
          }
        case 160: break;
        case 18: 
          { return symbol(TokenType.MINUS);
          }
        case 161: break;
        case 78: 
          { return symbol(TokenType.EXTENDS);
          }
        case 162: break;
        case 34: 
          { return symbol(TokenType.GTEQ);
          }
        case 163: break;
        case 5: 
          { return symbol(TokenType.NL);
          }
        case 164: break;
        case 49: 
          { return symbol(TokenType.INTEGER_LITERAL, Utils.parseHexInt(yytext()));
          }
        case 165: break;
        case 45: 
          { return symbol(TokenType.FOR);
          }
        case 166: break;
        case 52: 
          { return symbol(TokenType.LOOP);
          }
        case 167: break;
        case 26: 
          { string.append('\\');
          }
        case 168: break;
        case 15: 
          { return symbol(TokenType.RSQUARE);
          }
        case 169: break;
        case 97: 
          { return symbol(TokenType.IMPLEMENTS);
          }
        case 170: break;
        case 62: 
          { return symbol(TokenType.ARRAY);
          }
        case 171: break;
        case 30: 
          { return symbol(TokenType.IF);
          }
        case 172: break;
        case 79: 
          { return symbol(TokenType.NOTHING);
          }
        case 173: break;
        case 71: 
          { return symbol(TokenType.NATIVE);
          }
        case 174: break;
        case 43: 
          { return symbol(TokenType.NEW);
          }
        case 175: break;
        case 94: 
          { return symbol(TokenType.PROTECTED);
          }
        case 176: break;
        case 8: 
          { return symbol(TokenType.SEMICOLON);
          }
        case 177: break;
        case 63: 
          { return symbol(TokenType.ENDIF);
          }
        case 178: break;
        case 70: 
          { return symbol(TokenType.ELSEIF);
          }
        case 179: break;
        case 75: 
          { return symbol(TokenType.INTEGER_LITERAL, Utils.parseAsciiInt4(yytext()));
          }
        case 180: break;
        case 33: 
          { return symbol(TokenType.NOTEQ);
          }
        case 181: break;
        case 66: 
          { return symbol(TokenType.WHILE);
          }
        case 182: break;
        case 76: 
          { return symbol(TokenType.RETURNS);
          }
        case 183: break;
        case 74: 
          { return symbol(TokenType.MODULE);
          }
        case 184: break;
        case 24: 
          { string.append( yytext() );
          }
        case 185: break;
        case 96: 
          { return symbol(TokenType.NATIVETYPE);
          }
        case 186: break;
        case 81: 
          { return symbol(TokenType.PRIVATE);
          }
        case 187: break;
        case 54: 
          { return symbol(TokenType.TRUE);
          }
        case 188: break;
        case 14: 
          { return symbol(TokenType.LSQUARE);
          }
        case 189: break;
        case 11: 
          { return symbol(TokenType.COMMA);
          }
        case 190: break;
        case 41: 
          { return symbol(TokenType.SET);
          }
        case 191: break;
        case 91: 
          { return symbol(TokenType.INTERFACE);
          }
        case 192: break;
        case 32: 
          { return symbol(TokenType.EQEQ);
          }
        case 193: break;
        case 58: 
          { return symbol(TokenType.NULL);
          }
        case 194: break;
        case 27: 
          { return symbol(TokenType.REAL_LITERAL, Double.parseDouble(yytext()));
          }
        case 195: break;
        case 17: 
          { return symbol(TokenType.PLUS);
          }
        case 196: break;
        case 51: 
          { return symbol(TokenType.CALL);
          }
        case 197: break;
        case 1: 
          { 
          }
        case 198: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return symbol(TokenType.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
