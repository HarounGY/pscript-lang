//generated by parseq
package de.peeeq.wurstscript.jassAst;

class JassProgImpl implements JassProg, JassAstElementIntern {
	JassProgImpl(JassVars globals, JassFunctions functions) {
		if (globals == null) throw new IllegalArgumentException();
		((JassAstElementIntern)globals).setParent(this);
		this.globals = globals;
		if (functions == null) throw new IllegalArgumentException();
		((JassAstElementIntern)functions).setParent(this);
		this.functions = functions;
	}

	private JassAstElement parent;
	public JassAstElement getParent() { return parent; }
	public void setParent(JassAstElement parent) {
		if (parent != null && this.parent != null) { 			throw new Error("Parent of " + this + " already set: " + this.parent + "\ntried to change to " + parent); 		}
		this.parent = parent;
	}

	private JassVars globals;
	public void setGlobals(JassVars globals) {
		if (globals == null) throw new IllegalArgumentException();
		((JassAstElementIntern)this.globals).setParent(null);
		((JassAstElementIntern)globals).setParent(this);
		this.globals = globals;
	} 
	public JassVars getGlobals() { return globals; }

	private JassFunctions functions;
	public void setFunctions(JassFunctions functions) {
		if (functions == null) throw new IllegalArgumentException();
		((JassAstElementIntern)this.functions).setParent(null);
		((JassAstElementIntern)functions).setParent(this);
		this.functions = functions;
	} 
	public JassFunctions getFunctions() { return functions; }

	public JassAstElement get(int i) {
		switch (i) {
			case 0: return globals;
			case 1: return functions;
			default: throw new IllegalArgumentException("Index out of range: " + i);
		}
	}
	public int size() {
		return 2;
	}
	@Override public JassProg copy() {
		return new JassProgImpl((JassVars) globals.copy(), (JassFunctions) functions.copy());
	}
	@Override public void accept(JassProg.Visitor v) {
		globals.accept(v);
		functions.accept(v);
		v.visit(this);
	}
	@Override public String toString() {
		return "JassProg(" + globals + ", " +functions+")";
	}
}
