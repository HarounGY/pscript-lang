//generated by parseq
package de.peeeq.wurstscript.jassAst;

class JassFunctionImpl implements JassFunction, JassAstElementIntern {
	JassFunctionImpl(String name, JassSimpleVars params, String returnType, JassVars locals, JassStatements body) {
		if (name == null) throw new IllegalArgumentException();
		this.name = name;
		if (params == null) throw new IllegalArgumentException();
		((JassAstElementIntern)params).setParent(this);
		this.params = params;
		if (returnType == null) throw new IllegalArgumentException();
		this.returnType = returnType;
		if (locals == null) throw new IllegalArgumentException();
		((JassAstElementIntern)locals).setParent(this);
		this.locals = locals;
		if (body == null) throw new IllegalArgumentException();
		((JassAstElementIntern)body).setParent(this);
		this.body = body;
	}

	private JassAstElement parent;
	public JassAstElement getParent() { return parent; }
	public void setParent(JassAstElement parent) {
		if (parent != null && this.parent != null) { 			throw new Error("Parent of " + this + " already set: " + this.parent + "\ntried to change to " + parent); 		}
		this.parent = parent;
	}

	private String name;
	public void setName(String name) {
		if (name == null) throw new IllegalArgumentException();
		this.name = name;
	} 
	public String getName() { return name; }

	private JassSimpleVars params;
	public void setParams(JassSimpleVars params) {
		if (params == null) throw new IllegalArgumentException();
		((JassAstElementIntern)this.params).setParent(null);
		((JassAstElementIntern)params).setParent(this);
		this.params = params;
	} 
	public JassSimpleVars getParams() { return params; }

	private String returnType;
	public void setReturnType(String returnType) {
		if (returnType == null) throw new IllegalArgumentException();
		this.returnType = returnType;
	} 
	public String getReturnType() { return returnType; }

	private JassVars locals;
	public void setLocals(JassVars locals) {
		if (locals == null) throw new IllegalArgumentException();
		((JassAstElementIntern)this.locals).setParent(null);
		((JassAstElementIntern)locals).setParent(this);
		this.locals = locals;
	} 
	public JassVars getLocals() { return locals; }

	private JassStatements body;
	public void setBody(JassStatements body) {
		if (body == null) throw new IllegalArgumentException();
		((JassAstElementIntern)this.body).setParent(null);
		((JassAstElementIntern)body).setParent(this);
		this.body = body;
	} 
	public JassStatements getBody() { return body; }

	public JassAstElement get(int i) {
		switch (i) {
			case 0: return params;
			case 1: return locals;
			case 2: return body;
			default: throw new IllegalArgumentException("Index out of range: " + i);
		}
	}
	public int size() {
		return 3;
	}
	public JassFunction copy() {
		return new JassFunctionImpl(name, params.copy(), returnType, locals.copy(), body.copy());
	}
	@Override public void accept(JassProg.Visitor v) {
		params.accept(v);
		locals.accept(v);
		body.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassFunctions.Visitor v) {
		params.accept(v);
		locals.accept(v);
		body.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassFunction.Visitor v) {
		params.accept(v);
		locals.accept(v);
		body.accept(v);
		v.visit(this);
	}
	@Override public String toString() {
		return "JassFunction(" + name + ", " +params + ", " +returnType + ", " +locals + ", " +body+")";
	}
}
