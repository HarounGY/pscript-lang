//generated by parseq
package de.peeeq.wurstscript.jassAst;

class JassExprVarArrayAccessImpl implements JassExprVarArrayAccess, JassAstElementIntern {
	JassExprVarArrayAccessImpl(String varName, JassExpr index) {
		if (varName == null) throw new IllegalArgumentException();
		this.varName = varName;
		if (index == null) throw new IllegalArgumentException();
		((JassAstElementIntern)index).setParent(this);
		this.index = index;
	}

	private JassAstElement parent;
	public JassAstElement getParent() { return parent; }
	public void setParent(JassAstElement parent) {
		if (parent != null && this.parent != null) { 			throw new Error("Parent of " + this + " already set: " + this.parent + "\ntried to change to " + parent); 		}
		this.parent = parent;
	}

	private String varName;
	public void setVarName(String varName) {
		if (varName == null) throw new IllegalArgumentException();
		this.varName = varName;
	} 
	public String getVarName() { return varName; }

	private JassExpr index;
	public void setIndex(JassExpr index) {
		if (index == null) throw new IllegalArgumentException();
		((JassAstElementIntern)this.index).setParent(null);
		((JassAstElementIntern)index).setParent(this);
		this.index = index;
	} 
	public JassExpr getIndex() { return index; }

	public JassAstElement get(int i) {
		switch (i) {
			case 0: return index;
			default: throw new IllegalArgumentException("Index out of range: " + i);
		}
	}
	public int size() {
		return 1;
	}
	public JassExprVarArrayAccess copy() {
		return new JassExprVarArrayAccessImpl(varName, index.copy());
	}
	@Override public void accept(JassStmtIf.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(StmtExitwhen.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassStmtReturn.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassExprVarArrayAccess.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassProg.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassStatement.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassStatements.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassExprBinary.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassStmtLoop.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassExprlist.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassExpr.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassExprAtomic.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassStmtCall.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassExprUnary.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassExprFunctionCall.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassStmtSet.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassFunctions.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassStmtSetArray.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassFunction.Visitor v) {
		index.accept(v);
		v.visit(this);
	}
	@Override public <T> T match(JassExpr.Matcher<T> matcher) {
		return matcher.case_JassExprVarArrayAccess(this);
	}
	@Override public void match(JassExpr.MatcherVoid matcher) {
		matcher.case_JassExprVarArrayAccess(this);
	}

	@Override public <T> T match(JassExprAtomic.Matcher<T> matcher) {
		return matcher.case_JassExprVarArrayAccess(this);
	}
	@Override public void match(JassExprAtomic.MatcherVoid matcher) {
		matcher.case_JassExprVarArrayAccess(this);
	}

	@Override public String toString() {
		return "JassExprVarArrayAccess(" + varName + ", " +index+")";
	}
}
