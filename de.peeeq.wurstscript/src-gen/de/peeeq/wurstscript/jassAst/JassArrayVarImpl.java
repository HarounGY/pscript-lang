//generated by parseq
package de.peeeq.wurstscript.jassAst;

class JassArrayVarImpl implements JassArrayVar, JassAstElementIntern {
	JassArrayVarImpl(String type, String name) {
		if (type == null) throw new IllegalArgumentException();
		this.type = type;
		if (name == null) throw new IllegalArgumentException();
		this.name = name;
	}

	private JassAstElement parent;
	public JassAstElement getParent() { return parent; }
	public void setParent(JassAstElement parent) {
		if (parent != null && this.parent != null) { 			throw new Error("Parent of " + this + " already set: " + this.parent + "\ntried to change to " + parent); 		}
		this.parent = parent;
	}

	private String type;
	public void setType(String type) {
		if (type == null) throw new IllegalArgumentException();
		this.type = type;
	} 
	public String getType() { return type; }

	private String name;
	public void setName(String name) {
		if (name == null) throw new IllegalArgumentException();
		this.name = name;
	} 
	public String getName() { return name; }

	public JassAstElement get(int i) {
		switch (i) {
			default: throw new IllegalArgumentException("Index out of range: " + i);
		}
	}
	public int size() {
		return 0;
	}
	@Override public JassArrayVar copy() {
		return new JassArrayVarImpl(type, name);
	}
	@Override public void accept(JassProg.Visitor v) {
		v.visit(this);
	}
	@Override public void accept(JassFunction.Visitor v) {
		v.visit(this);
	}
	@Override public void accept(JassVar.Visitor v) {
		v.visit(this);
	}
	@Override public void accept(JassFunctions.Visitor v) {
		v.visit(this);
	}
	@Override public void accept(JassVars.Visitor v) {
		v.visit(this);
	}
	@Override public void accept(JassArrayVar.Visitor v) {
		v.visit(this);
	}
	@Override public <T> T match(JassVar.Matcher<T> matcher) {
		return matcher.case_JassArrayVar(this);
	}
	@Override public void match(JassVar.MatcherVoid matcher) {
		matcher.case_JassArrayVar(this);
	}

	@Override public String toString() {
		return "JassArrayVar(" + type + ", " +name+")";
	}
}
