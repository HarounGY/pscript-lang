//generated by parseq
package de.peeeq.wurstscript.jassAst;

public class JassAst {
	public static JassProg JassProg(JassVars globals, JassFunctions functions) {
		return new JassProgImpl(globals, functions);
	}
	public static JassSimpleVar JassSimpleVar(String type, String name) {
		return new JassSimpleVarImpl(type, name);
	}
	public static JassArrayVar JassArrayVar(String type, String name) {
		return new JassArrayVarImpl(type, name);
	}
	public static JassFunction JassFunction(String name, JassSimpleVars params, String returnType, JassVars locals, JassStatements body) {
		return new JassFunctionImpl(name, params, returnType, locals, body);
	}
	public static JassStmtIf JassStmtIf(JassExpr cond, JassStatements thenBlock, JassStatements elseBlock) {
		return new JassStmtIfImpl(cond, thenBlock, elseBlock);
	}
	public static JassStmtLoop JassStmtLoop(JassStatements body) {
		return new JassStmtLoopImpl(body);
	}
	public static JassStmtSet JassStmtSet(String left, JassExpr right) {
		return new JassStmtSetImpl(left, right);
	}
	public static JassStmtSetArray JassStmtSetArray(String left, JassExpr index, JassExpr right) {
		return new JassStmtSetArrayImpl(left, index, right);
	}
	public static JassStmtCall JassStmtCall(String functionName, JassExprlist arguments) {
		return new JassStmtCallImpl(functionName, arguments);
	}
	public static JassStmtReturn JassStmtReturn(JassExpr returnValue) {
		return new JassStmtReturnImpl(returnValue);
	}
	public static JassStmtReturnVoid JassStmtReturnVoid() {
		return new JassStmtReturnVoidImpl();
	}
	public static JassStmtExitwhen JassStmtExitwhen(JassExpr cond) {
		return new JassStmtExitwhenImpl(cond);
	}
	public static JassExprBinary JassExprBinary(JassExpr left, JassOpBinary op, JassExpr right) {
		return new JassExprBinaryImpl(left, op, right);
	}
	public static JassExprUnary JassExprUnary(JassOpUnary op, JassExpr right) {
		return new JassExprUnaryImpl(op, right);
	}
	public static JassExprFunctionCall JassExprFunctionCall(String funcName, JassExprlist arguments) {
		return new JassExprFunctionCallImpl(funcName, arguments);
	}
	public static JassExprIntVal JassExprIntVal(int val) {
		return new JassExprIntValImpl(val);
	}
	public static JassExprRealVal JassExprRealVal(double val) {
		return new JassExprRealValImpl(val);
	}
	public static JassExprStringVal JassExprStringVal(String val) {
		return new JassExprStringValImpl(val);
	}
	public static JassExprBoolVal JassExprBoolVal(boolean val) {
		return new JassExprBoolValImpl(val);
	}
	public static JassExprFuncRef JassExprFuncRef(String funcName) {
		return new JassExprFuncRefImpl(funcName);
	}
	public static JassExprVarAccess JassExprVarAccess(String varName) {
		return new JassExprVarAccessImpl(varName);
	}
	public static JassExprVarArrayAccess JassExprVarArrayAccess(String varName, JassExpr index) {
		return new JassExprVarArrayAccessImpl(varName, index);
	}
	public static JassExprNull JassExprNull() {
		return new JassExprNullImpl();
	}
	public static JassOpOr JassOpOr() {
		return new JassOpOrImpl();
	}
	public static JassOpAnd JassOpAnd() {
		return new JassOpAndImpl();
	}
	public static JassOpEquals JassOpEquals() {
		return new JassOpEqualsImpl();
	}
	public static JassOpUnequals JassOpUnequals() {
		return new JassOpUnequalsImpl();
	}
	public static JassOpLessEq JassOpLessEq() {
		return new JassOpLessEqImpl();
	}
	public static JassOpLess JassOpLess() {
		return new JassOpLessImpl();
	}
	public static JassOpGreaterEq JassOpGreaterEq() {
		return new JassOpGreaterEqImpl();
	}
	public static JassOpGreater JassOpGreater() {
		return new JassOpGreaterImpl();
	}
	public static JassOpPlus JassOpPlus() {
		return new JassOpPlusImpl();
	}
	public static JassOpMinus JassOpMinus() {
		return new JassOpMinusImpl();
	}
	public static JassOpMult JassOpMult() {
		return new JassOpMultImpl();
	}
	public static JassOpDiv JassOpDiv() {
		return new JassOpDivImpl();
	}
	public static JassOpNot JassOpNot() {
		return new JassOpNotImpl();
	}
	public static JassVars JassVars(JassVar ... elements ) {
		JassVars l = new JassVarsImpl();
		for (JassVar e : elements) { l.add(e); }
		return l;
	}
	public static JassSimpleVars JassSimpleVars(JassSimpleVar ... elements ) {
		JassSimpleVars l = new JassSimpleVarsImpl();
		for (JassSimpleVar e : elements) { l.add(e); }
		return l;
	}
	public static JassFunctions JassFunctions(JassFunction ... elements ) {
		JassFunctions l = new JassFunctionsImpl();
		for (JassFunction e : elements) { l.add(e); }
		return l;
	}
	public static JassStatements JassStatements(JassStatement ... elements ) {
		JassStatements l = new JassStatementsImpl();
		for (JassStatement e : elements) { l.add(e); }
		return l;
	}
	public static JassExprlist JassExprlist(JassExpr ... elements ) {
		JassExprlist l = new JassExprlistImpl();
		for (JassExpr e : elements) { l.add(e); }
		return l;
	}
}