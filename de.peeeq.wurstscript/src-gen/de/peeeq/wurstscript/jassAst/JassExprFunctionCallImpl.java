//generated by parseq
package de.peeeq.wurstscript.jassAst;

class JassExprFunctionCallImpl implements JassExprFunctionCall, JassAstElementIntern {
	JassExprFunctionCallImpl(String funcName, JassExprlist arguments) {
		if (funcName == null) throw new IllegalArgumentException();
		this.funcName = funcName;
		if (arguments == null) throw new IllegalArgumentException();
		((JassAstElementIntern)arguments).setParent(this);
		this.arguments = arguments;
	}

	private JassAstElement parent;
	public JassAstElement getParent() { return parent; }
	public void setParent(JassAstElement parent) {
		if (parent != null && this.parent != null) { 			throw new Error("Parent of " + this + " already set: " + this.parent + "\ntried to change to " + parent); 		}
		this.parent = parent;
	}

	private String funcName;
	public void setFuncName(String funcName) {
		if (funcName == null) throw new IllegalArgumentException();
		this.funcName = funcName;
	} 
	public String getFuncName() { return funcName; }

	private JassExprlist arguments;
	public void setArguments(JassExprlist arguments) {
		if (arguments == null) throw new IllegalArgumentException();
		((JassAstElementIntern)this.arguments).setParent(null);
		((JassAstElementIntern)arguments).setParent(this);
		this.arguments = arguments;
	} 
	public JassExprlist getArguments() { return arguments; }

	public JassAstElement get(int i) {
		switch (i) {
			case 0: return arguments;
			default: throw new IllegalArgumentException("Index out of range: " + i);
		}
	}
	public int size() {
		return 1;
	}
	public JassExprFunctionCall copy() {
		return new JassExprFunctionCallImpl(funcName, arguments.copy());
	}
	@Override public void accept(JassStatement.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassStmtCall.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassFunction.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassExprlist.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassExpr.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassStmtIf.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassStatements.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassStmtExitwhen.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassExprFunctionCall.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassStmtSetArray.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassExprBinary.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassExprUnary.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassExprVarArrayAccess.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassStmtLoop.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassStmtReturn.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassProg.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassStmtSet.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassFunctions.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public void accept(JassExprAtomic.Visitor v) {
		arguments.accept(v);
		v.visit(this);
	}
	@Override public <T> T match(JassExpr.Matcher<T> matcher) {
		return matcher.case_JassExprFunctionCall(this);
	}
	@Override public void match(JassExpr.MatcherVoid matcher) {
		matcher.case_JassExprFunctionCall(this);
	}

	@Override public String toString() {
		return "JassExprFunctionCall(" + funcName + ", " +arguments+")";
	}
}
